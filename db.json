{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/photos/damotiansheng.png","path":"photos/damotiansheng.png","modified":1,"renderable":0},{"_id":"themes/theme-yilia/source/main.js","path":"main.js","modified":1,"renderable":1},{"_id":"themes/theme-yilia/source/style.js","path":"style.js","modified":1,"renderable":1}],"Cache":[{"_id":"themes/theme-yilia/_config.yml","hash":"6cde3630e7daea13d23f2330e6a125e6a97eadc2","modified":1478436925000},{"_id":"themes/theme-yilia/README.md","hash":"a97dec860cf442a9395633eafd4fda405c92569e","modified":1477278960000},{"_id":"themes/theme-yilia/package.json","hash":"00617be92734bd435ec21614c445bed23cf7448d","modified":1477278960000},{"_id":"themes/theme-yilia/webpack.config.js","hash":"ccf5929d2727b00e76266f9f5d6edc0bc74539dc","modified":1477278960000},{"_id":"source/_posts/fastdfs之storage主流程.md","hash":"f535b41a0e83335ffa07e8a3965a1d242b1e869a","modified":1480843731000},{"_id":"source/_posts/fastdfs之tracker主流程.md","hash":"8f09381d93a73b0a61217720dadc3f12e3b6ebb8","modified":1480831277000},{"_id":"source/_posts/fastdfs之事件监听.md","hash":"4cbb9711d7718749736a882f93b0fdaabe0e082f","modified":1480835714000},{"_id":"source/_posts/fastdfs之超时事件的处理.md","hash":"ba931184b0656a8570d4204ce4be8c00d28244b9","modified":1480835682000},{"_id":"source/_posts/fastdfs文件系统搭建.md","hash":"4cee6d603e97cabd52fa2de0309c15f3e563929d","modified":1480836095000},{"_id":"source/_posts/fastdfs连接池.md","hash":"3e706ce9db6074c9e38ccce7e2ccdfee8d32a032","modified":1480836082000},{"_id":"source/_posts/hello-world.md","hash":"321d1d5f1de94e450b9513dea214b439369d4aa9","modified":1477278907000},{"_id":"source/_posts/test.md","hash":"0fdf0fe340c2d451479255ce947b312281c2da31","modified":1481184257793},{"_id":"source/_posts/多个线程监听同一个fd.md","hash":"90e35c9fbae39d4fdc2d66d65e40860de56452a1","modified":1480827409000},{"_id":"source/_posts/搭建github博客.md","hash":"a8e61c9f870b0bd1b4d058587e381ed669e3642b","modified":1478430498000},{"_id":"source/categories/index.md","hash":"4cc45cdef46a1d14626ac4c1fc7da13d2069093d","modified":1478436778000},{"_id":"source/photos/damotiansheng.png","hash":"7ec66590fc0b4f5b3411cf0b70d2c10e852b4d94","modified":1477278907000},{"_id":"themes/theme-yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1477278960000},{"_id":"themes/theme-yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1477278960000},{"_id":"themes/theme-yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1477278960000},{"_id":"themes/theme-yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1477278960000},{"_id":"themes/theme-yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1477278960000},{"_id":"themes/theme-yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1477278960000},{"_id":"themes/theme-yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1477278960000},{"_id":"themes/theme-yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1477278960000},{"_id":"themes/theme-yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1477278960000},{"_id":"themes/theme-yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1477278960000},{"_id":"themes/theme-yilia/layout/layout.ejs","hash":"18bc94a020c6e74b0a7a29bc412670605e0c0873","modified":1477278960000},{"_id":"themes/theme-yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1477278960000},{"_id":"themes/theme-yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1477278960000},{"_id":"themes/theme-yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1477278960000},{"_id":"source/_posts/fastdfs配置文件解析模块.md","hash":"b0d81dcf76fcd6250e94688d38668ff9b344c266","modified":1478438337000},{"_id":"themes/theme-yilia/layout/_partial/after-footer.ejs","hash":"ef0205fa690a388e48ddcb62ed77f05c753a7b9d","modified":1477278960000},{"_id":"themes/theme-yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1477278960000},{"_id":"themes/theme-yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1477278960000},{"_id":"themes/theme-yilia/layout/_partial/article.ejs","hash":"52adf017b2e3f2a31816bf40641283ef1bde3b39","modified":1477278960000},{"_id":"themes/theme-yilia/layout/_partial/article.ejs.bak","hash":"65e786ace35a89eb2ec3eaff406de88565cc0b82","modified":1477278960000},{"_id":"themes/theme-yilia/layout/_partial/article.ejs.bak.1023","hash":"65e786ace35a89eb2ec3eaff406de88565cc0b82","modified":1477278960000},{"_id":"themes/theme-yilia/layout/_partial/article.ejs.modify","hash":"861f1953d62aaf3737a2ebbc24c3c3363fd092d7","modified":1477278960000},{"_id":"themes/theme-yilia/layout/_partial/article.ejs~","hash":"52adf017b2e3f2a31816bf40641283ef1bde3b39","modified":1477278960000},{"_id":"themes/theme-yilia/layout/_partial/baidu_tongji.ejs","hash":"0b8f447054d373d16b7707bdf3440e8bb02b3757","modified":1477287563000},{"_id":"themes/theme-yilia/layout/_partial/baidu_tongji.ejs~","hash":"0b8f447054d373d16b7707bdf3440e8bb02b3757","modified":1477287555000},{"_id":"themes/theme-yilia/layout/_partial/footer.ejs","hash":"ce6daf39d0da300fd11b6f3048c89de81fe011a9","modified":1477292916000},{"_id":"themes/theme-yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1477278960000},{"_id":"themes/theme-yilia/layout/_partial/head.ejs","hash":"48b0e3f3667db4c0a6e0c6ebd461b6ae69c933c4","modified":1477289160000},{"_id":"themes/theme-yilia/layout/_partial/head.ejs~","hash":"48b0e3f3667db4c0a6e0c6ebd461b6ae69c933c4","modified":1477289149000},{"_id":"themes/theme-yilia/layout/_partial/header.ejs","hash":"d78993618051392103df1107c0da5abb81e2acac","modified":1477278960000},{"_id":"themes/theme-yilia/layout/_partial/left-col.ejs","hash":"256f83ef8bc7bdc8f69617e606fe1118136b5208","modified":1477278960000},{"_id":"themes/theme-yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1477278960000},{"_id":"themes/theme-yilia/layout/_partial/mobile-nav.ejs","hash":"324f809c7d1505cbf1ef3a479782c67ae90dfa81","modified":1477278960000},{"_id":"themes/theme-yilia/layout/_partial/tools.ejs","hash":"c5b92f83828e41a891c6db1d3e63cd2e007034e0","modified":1477278960000},{"_id":"themes/theme-yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/.eslintignore","hash":"0abf1c392f32bdf193fe824ead96926f550a85ae","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/.eslintrc","hash":"2c4a55a386408308d637f658a4b2f5e82f4e58db","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/.jscsrc","hash":"5f410f9c9caedfdd1eabb1571de1f8f9014eefb6","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/.npmignore","hash":"84ab7c92a20b2cdd63ada937fae53268474d9561","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/LICENSE","hash":"fecd013bdadc9ead2732027f06bf8fc19761efcb","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/README.md","hash":"ac3ff00c33871564e9769604a42f4d8cd872dd78","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/atom.xml","hash":"9670d3fc2a0d61cd8a5d212094691307f02bf1aa","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/index.js","hash":"5a7e25b7d01cdc28af76d27e284cdcf57e9ddd39","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/package.json","hash":"660d4ca6cc860e148798efb4952f4189f6546ec8","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/rss2.xml","hash":"961db5521a30e950078654c8022bef6c2c5ef5ff","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/css/archive.scss","hash":"b750499d5120f963b683d0c96ac3f345c714e448","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/css/article-main.scss","hash":"000a5875e1e46116b824c9ac0657178093ce4a17","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/css/article-inner.scss","hash":"4edb98e196eac9e67f86b76e39a2a03673391842","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/css/article-nav.scss","hash":"d046414a96adc400b54897fc236b3272e6deeafd","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/css/article.scss","hash":"b1add6b3c05416ac854ec5dd9d4cc20be3fafc1f","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/css/duoshuo.scss","hash":"1a4be8634b8dcf271cebad1feb687e96a038ffbf","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/css/fonts.scss","hash":"f5ee21869fcd3e2b257b49b0f680c78763d416dd","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/css/grid.scss","hash":"fe592c32cc2e6462358ac907e1e38a0dad01219f","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/css/highlight.scss","hash":"819774a2979d0d94eb4e3ebf62afc96f803bac67","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/css/left.scss","hash":"2a261fa2e402909a866c648a5de8eb287da6fba9","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/css/main.scss","hash":"5ffabb8323ff8cd26be466c7e02a6affc0f08da7","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/css/mobile-slider.scss","hash":"4277e4b7e8fef5480d8e2b9574cbfdf59f0225c8","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/css/mobile.scss","hash":"c170329ef2e7c2dcec58b1134793beac521133d4","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/css/social.scss","hash":"5b4a2cfd8a26687dc7bc44a4fa55ebb7d1ffe363","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/css/style.js","hash":"6c4cb072d0d5cbbb5291aa255dee31c7b13cfe66","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/css/switch.scss","hash":"795b0d1ad5ff278933409a1ab7451483fe6ceae5","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/css/tags.scss","hash":"79d3fad4fcda15210410774089b0ee7fe8d58810","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/js/archive-inner.js","hash":"da4a770ccb23ca1ded23fa6475ce1379f0c10604","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/css/tools.scss","hash":"c92aa91195696d1f2e5280a8db358593068e5e76","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/css/archive-inner.scss","hash":"c70d67116dd4a8ff0a10c397059823820f846dbd","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/js/browser.js","hash":"8ca48b006591bbf6d75688637c14fd1b5bdd650f","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/js/fix-page.js","hash":"f18e33e99b1032b95a60b018960bed64235c1a29","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/js/jquery.lazyload.js","hash":"37961302284435b2677b7fd1e0c0f7624e226e4a","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/js/main.js","hash":"a2dc03513509a04003185891c33d47f1de5c49dc","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/js/mobile.js","hash":"4d79f5f2d789e6cddfd7b502df238107e9c63aac","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/js/tags.js","hash":"f259b3f808df3a8523a42978f922bb9eda76e0ee","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/js/tools.js","hash":"ed69771cd501770c2c303ae6ae695d2a9a187cdd","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/js/util.js","hash":"28c66c54cab81b2a6c8c393226f5bd30f369e1bb","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/js/viewer.js","hash":"8b68f943b259bf6b4a648a10efe6c0160a880017","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/photoSwipe/photoswipe-ui-default.js","hash":"724162c14e5722a2ce1f44cf086dcea7b6855b80","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/photoSwipe/photoswipe-ui-default.min.js","hash":"38557bef17c33e172bc8e1670cd302d91622dfad","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/photoSwipe/photoswipe.min.js","hash":"e3267f5ae23f00c1ae052d019f12787296e34afc","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/photoSwipe/photoswipe.scss","hash":"838d43529282b91a60934bbd39f3f9f5dbefee98","modified":1477278960000},{"_id":"themes/theme-yilia/source/main.js","hash":"591b5266281ba1840ac4e64b24e371449145d57c","modified":1477278960000},{"_id":"themes/theme-yilia/source/style.js","hash":"1ebf7574e1e27a3c079e5686b82a7e17abc3fb98","modified":1477278960000},{"_id":"themes/theme-yilia/layout/_partial/post/date.ejs","hash":"2ab4308d013dcb1f0898cf112e3f75573e597e33","modified":1477278960000},{"_id":"themes/theme-yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1477278960000},{"_id":"themes/theme-yilia/layout/_partial/post/share_addthis.ejs","hash":"d9fa04c06319510bd088ca9c286af947da3cfb38","modified":1477278960000},{"_id":"themes/theme-yilia/layout/_partial/post/share_addthis.ejs.bak","hash":"d9fa04c06319510bd088ca9c286af947da3cfb38","modified":1477278960000},{"_id":"themes/theme-yilia/layout/_partial/post/category.ejs","hash":"62cde65a4ab7aef85a4390308bc7608f59463e02","modified":1477278960000},{"_id":"themes/theme-yilia/layout/_partial/post/share_jia.ejs","hash":"a59c83e46aaccb053b60bb41369dfcd6848cbd69","modified":1477291760000},{"_id":"themes/theme-yilia/layout/_partial/post/share_jia.ejs.bak.20161024","hash":"a59c83e46aaccb053b60bb41369dfcd6848cbd69","modified":1477289986000},{"_id":"themes/theme-yilia/layout/_partial/post/share_jia.ejs~","hash":"97bf9af414f6be67f8b1cbf6ef03c0018346176e","modified":1477291679000},{"_id":"themes/theme-yilia/layout/_partial/post/tag.ejs","hash":"3a44b657ebdeed1764d90f81b43e91e5a8f25c21","modified":1477278960000},{"_id":"themes/theme-yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/lib/generator.js","hash":"699fab472dedd85e5d511bf869ed42e9888f752a","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/css/core/_animation.scss","hash":"6f44ec8ff32515280c0b7ea8ad7e4cb5f4dfcd84","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/css/core/_mixin.scss","hash":"dc89a3b360881584838cdd9b95fe88aae6518e50","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/photoSwipe/photoswipe.js","hash":"ff9e3cc58b44a61144a9e211503755b170c24e91","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/css/fonts/icomoon.eot","hash":"9a661069e1255d10032926a8ef87502f445f4e20","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/css/fonts/icomoon.svg","hash":"56ba63db8bfe20347e0457b4c583dd18e29ca701","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/css/fonts/icomoon.ttf","hash":"9f1e824fc076dbfedf186609a2664558d5e3e986","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/css/fonts/icomoon.woff","hash":"a5c2eb785800a3a0aeaf2284d191d69df1893d6d","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/css/img/black-scales.png","hash":"243ea748d016704922ccfc0b6c18d97472c27bff","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/css/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/css/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/css/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/css/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/css/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/css/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/css/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/css/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/css/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/css/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/css/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/css/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/css/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/css/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/photoSwipe/default-skin/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/photoSwipe/default-skin/default-skin.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/photoSwipe/default-skin/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/photoSwipe/default-skin/default-skin.scss","hash":"91f44576a5f5ccff4740ff5020656bd2f00ca13c","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/css/img/black-paper.png","hash":"a180d3109a5cb6b9b9aa60d81730446ebe275473","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/.bin/nunjucks-precompile","hash":"372fd593b8ece6cade6bc1eda437f27393338c43","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/.jshintignore","hash":"5fe4a6d834e5ae2e4d35e612f2ce6199fc46c61c","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/.jshintrc","hash":"dcc96fb26e619f82b008e9a1e2dc000d1bf89110","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/.travis.yml","hash":"3c67f0fc7fb2f1ba5b85aeb613c3a42b59aa8f6b","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/CHANGELOG.md","hash":"698131b68bc739c6c6b26410be0326c806c1e9fa","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/CONTRIBUTING.md","hash":"d34987496148969fba3639034ce11d723971bc69","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/LICENSE","hash":"2faac141d2c68b9766cf0500199837d18190a337","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/.npmignore","hash":"ead16bd5746244a42c2c97eab24a3778df445db5","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/MAINTENANCE.md","hash":"a40a327fb71247270868db1b445a5b1fcca0cb66","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/README.md","hash":"820831d9ca40311973bafca7edc8ba0c3977a835","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/appveyor.yml","hash":"80cd4a1b21a1f1ed91a820345fa845485159f9e5","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/bower.json","hash":"a9f4dac798dd13c9ef92e729ae8bb131fe9ba207","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/contribute.json","hash":"c7acd4a672c9ab9b689cc09ca5a241f8e67d7f87","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/index.js","hash":"cfadef334e22ac9d984577780fc2dbbdfd56378b","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/package.json","hash":"bfc2ae811f521934d4320e93201572c367bf9128","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/object-assign/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/object-assign/index.js","hash":"ef75e2353da412395fc77a42b1414b20cdb355cf","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/object-assign/readme.md","hash":"00125d72a4daa353e3013d4d16d96e541f8533a0","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/object-assign/package.json","hash":"ad90dd0e2dbc73568cb3e80dad498b81ed8c3be9","modified":1477278960000},{"_id":"themes/theme-yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1477278960000},{"_id":"themes/theme-yilia/layout/_partial/post/share_addthis.ejs~","hash":"e15544c514413ea771e6be2ee83ae3b181c04053","modified":1477278960000},{"_id":"themes/theme-yilia/source-src/js/jquery.js","hash":"bfc05b695dfa4f23e11d04b84993585da7a764bf","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/.idea/compiler.xml","hash":"0ea3893ea6ba2ee765823ed26ee08134fb68bd33","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/.idea/jsLibraryMappings.xml","hash":"e1aea880b81de30e5cde4ffc5eb18153d9eabb01","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/.idea/misc.xml","hash":"376da686ff3ded15b720d35c0c25001ce0b6a0c7","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/.idea/modules.xml","hash":"bc75aa612fb363d07485ea7a7bad737515a662a2","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/.idea/vcs.xml","hash":"6f94fc1df9e8721673d47588ac444667dc9ded06","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/.idea/workspace.xml","hash":"344a906cec1157e8099cc31e412248be31c7be9b","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/bin/precompile","hash":"372fd593b8ece6cade6bc1eda437f27393338c43","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/bin/bundle.js","hash":"d77ea1d2f05b40c38f1fc1a1a78f425bde5861c9","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/bin/bundle","hash":"48a7e8175c54e389f4f987404f0730c896ffbec0","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/bin/precompile.cmd","hash":"272034aeaf91666cbb9a070b065e9148d8847aef","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/browser/nunjucks-slim.min.js","hash":"e8843e6bcb5f8341a2550ab9a850b5647903e6a1","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/src/environment.js","hash":"3b9f39c311a5672618b648067d359478c22b51eb","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/src/filters.js","hash":"f5e608810cb68c3a0c90bdb516c730d46d0cbe2e","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/src/globals.js","hash":"20083a56a7c152e79c1523fa7cdcd1d678a63560","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/src/jinja-compat.js","hash":"6a06a9a9ebedacd69bcbc02f5ca55a5145c053be","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/src/lexer.js","hash":"d21b00ad284cbc94a659d03fbae94ed3c9d2b721","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/src/lib.js","hash":"c04b3edf021b43e063de8345d2c0c1ee81d937ed","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/src/loader.js","hash":"98c678b05aca87bf53fe2ff68481bfb16bd719d8","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/src/loaders.js","hash":"03e009b8c88066e235c08f21d2585056770e200f","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/src/node-loaders.js","hash":"089ae0b8a9aa2733480a33bf280665d6a6545d4c","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/src/nodes.js","hash":"49d30b442c3d0a353c5fc23f525f35598e1d9fe4","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/src/object.js","hash":"e4163abfa1a77ca0edd0328a71fe0d7aecbfaedc","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/src/parser.js","hash":"2701ef0ed5e7bdd4ba4fe990393f1c0082dc23bb","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/src/precompile-global.js","hash":"029f106b5721755396d1bf59029191e89df4d2dd","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/src/precompile.js","hash":"85bac96cd7d684836d5e621994ad17b72853b41a","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/src/precompiled-loader.js","hash":"743d57e85e55c597c3925374a0939900df45ca61","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/src/runtime.js","hash":"45abf718d3defd7bd40335eb773ea6b44ef75277","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/src/transformer.js","hash":"0bd28cb417f0a967afadad375f9d58b237dcf9a8","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/browser/nunjucks.min.js","hash":"15d9e77bafc0c564657b58c7c5bbf5b3859706ca","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/browser/nunjucks-slim.js","hash":"325b91b1bea78423a323adc08d40b26056dc06f9","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/src/web-loaders.js","hash":"42b3ebee2293bd92307ce13475ffff5addc743f5","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/src/compiler.js","hash":"541e0ecb2fd67daa92d98bcf1aa7037527be2412","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/browser/nunjucks.js","hash":"1220577fc86a3826cd4012143cc5741ff55a7f95","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/.idea/copyright/profiles_settings.xml","hash":"434857451393ced0b77e7b66e7fe805223fc5845","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/.idea/libraries/nunjucks_node_modules.xml","hash":"82085a3aceaa493741486cefcb697b02d18602d9","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/asap/CHANGES.md","hash":"9a7df32d01531d37c1e257ef8901a718b5d7d431","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/asap/LICENSE.md","hash":"b9e748ee0b7d1cbadaf9f1fa8997b092ebeb9db7","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/asap/README.md","hash":"538d5e8ff175447bc0506b06c6ee25bf48e980b2","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/asap/asap.js","hash":"dfb4ab3ad5524d143221515950159eee5c0fd0db","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/asap/browser-asap.js","hash":"8dba5a29c0d3479897084d0843de36805382be48","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/asap/browser-raw.js","hash":"bc8104273b725150c81a2869d657dca110c30ce5","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/asap/package.json","hash":"58f0be83096da9cf0def0ba11cd56ceb34e717e0","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/asap/raw.js","hash":"5dd00f087a2cb50f5bcf6bde80f144e3444c6b26","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/CHANGELOG.md","hash":"065ef60d5995e1fd894deb01f9425dab583aa205","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/README.md","hash":"76836c3d061a517ab188ba2bbb45158d183f56e2","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/package.json","hash":"705c335fa5cc153a51caebe1593a41a3dc29c06c","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/index.js","hash":"f8281361074fbc5a34ec69894631d10735c7f01f","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/CHANGELOG.md","hash":"d9196286c174d7a5b43f399e594b8cecc9fd2fca","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/LICENSE","hash":"35d8442a9599f876c805b2c7d31178ecfa18c829","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/README.md","hash":"d3b40f4632f942e4a5de69d44553fe93fcb59490","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/.idea/nunjucks.iml","hash":"a5109c03768d034a78936c68d9ef7bbd458bba8e","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/completion.sh.hbs","hash":"527538bb86ffeeeeaaf6bde7782035bbc3532e35","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/index.js","hash":"5e89ce55ed93617db2fe557e36d4d7b7f6d4bad3","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/package.json","hash":"31456146bea52bdef01008a80b95436a74fb89bc","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/lib/fsevents-handler.js","hash":"330bc447a30e4f23b07737a981ec15a2b5eb37bf","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/lib/nodefs-handler.js","hash":"2bb20459d65f97b270774f64af9ec021bed83222","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/lib/completion.js","hash":"c6b42f85a1b277af518e874c85ad8a3372cc215a","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/lib/parser.js","hash":"44da675b52d65faab5ad8419771fad5a102447a6","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/lib/tokenize-arg-string.js","hash":"09a8af7dac77372a3eaafacce18da57e65e787a6","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/lib/usage.js","hash":"bd4f76268f9d093a88d9fa04dc3b4b62bcef5f80","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/locales/de.json","hash":"ffcb949051e2a24feb3411a3e9e438b6dfbc41cd","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/locales/fr.json","hash":"b1750db0f960b4041d335f3bda2f79ab52b21f49","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/locales/id.json","hash":"33f77c9fb11ac72f4d56e1c2f97ecf6436a69768","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/locales/ja.json","hash":"3c7babc2acca76784bd1e0521bc1793ddeec7bf8","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/locales/ko.json","hash":"8c8c8efd420b8cfd0f46ea54e7bc863473cafde9","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/locales/nb.json","hash":"e59b7beb20a18b9d1ab8bcec6076870f609475af","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/locales/pirate.json","hash":"36c58937b254ae548d9c5bde0b686f5b51e7eccc","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/locales/pl.json","hash":"34a0e25894873eded51e616b93f18f77c7b83f46","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/locales/pt.json","hash":"156d95fc019083afcdfc0ded0eafbcdd466a3cf3","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/lib/validation.js","hash":"83412c0cd901237d7d91380ee84880eadb4fda33","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/locales/en.json","hash":"f7f3d8d7a8a8367bb6aeed19cc850f598b5c8464","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/locales/tr.json","hash":"33ed2f793625641a85ea6efd5aaa062c7fae8e13","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/locales/zh.json","hash":"7b7c12fc6a41516254f336dd14bcc23752091288","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/locales/pt_BR.json","hash":"a8f5b2dc5e9e8a6b30231b63c1e6c67b5ac8e42e","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/locales/es.json","hash":"e0496c4ff926a1c72141bf12fcea5feb1b5c6ac9","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/LICENSE","hash":"2faff6eb900a1f252dd5628fa007d8df033d9717","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/package.json","hash":"fe2be03afd3b3bfd037c94fdd9c3a1829b9ae292","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/async-each/.npmignore","hash":"1d4793257714691afce4e899b0cce7b8ede84447","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/async-each/README.md","hash":"2ce988cb8d594dd63818371fa47120d6740a411f","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/async-each/index.js","hash":"c329e80e544646b7f83d52d3428687b19e6d7119","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/async-each/package.json","hash":"4857198b6a5eadee087e277e65754b6c9bbfa307","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/glob-parent/.npmignore","hash":"54c4045bc2a2525978de7a75dab4af99dc9ed7a0","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/glob-parent/.travis.yml","hash":"5053409ffeab2fae8d586077018f76b3f3241453","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/glob-parent/LICENSE","hash":"0f5ecc10b17b4e9208f2eee02966ad7b02d7ebf6","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/glob-parent/README.md","hash":"741eed87e0324d39712974e26c15ab63d819589c","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/glob-parent/index.js","hash":"bc23a7b46fa7a53ce69d21ea1eaaed6cee918e66","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/glob-parent/package.json","hash":"9e2d991e1a113e7580241ae7056e4ce5b2326050","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/glob-parent/test.js","hash":"b839f9516685893bc7b6229577e403f19ab6804f","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/inherits/LICENSE","hash":"3b0e8d58a362b1787ef3504fba4f593b22f3cee4","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/inherits/README.md","hash":"f2f8d26f1cf5fb1e3a68aa225221b064f999fefb","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/inherits/inherits.js","hash":"491caba7b70590f6dcbe37d7edccd9f89ac1b9fd","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/inherits/inherits_browser.js","hash":"7c13eacf36e79e5e7dd257d80ec25846e4df7eb3","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/inherits/package.json","hash":"63634a005a22cb90fdf747a0b825489bb05f5d5a","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/is-binary-path/index.js","hash":"575833c2dfcc83b547352b7432bac1e82bcbee35","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/is-binary-path/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/is-binary-path/package.json","hash":"d628aae652ad0f441899cc4c316be440bcc1232b","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/is-binary-path/readme.md","hash":"1f6cadc94e211099cf21ef60f65fa27c4d765c26","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/is-glob/LICENSE","hash":"cce8f85bce93fb036bc1846f001ffea1b098108c","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/is-glob/README.md","hash":"c63677aa8188743e55fa3988d143b031e08ade12","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/is-glob/index.js","hash":"b3dcfb08edc51fa11b2f6a028e432f7f81c67ca8","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/is-glob/package.json","hash":"faa01d944362318fd9b4c72d7799a201769eb593","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/async-each/CHANGELOG.md","hash":"9ceebc3d9c05febd689691243cccf80204c9c5ac","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/path-is-absolute/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/path-is-absolute/package.json","hash":"411c9c1e1a4cf8e3707b29e59587dd2ff1fa3b5f","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/path-is-absolute/readme.md","hash":"b09eee74fdfb9195b8b81401654da2a403886d2d","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/.npmignore","hash":"e31bf1a44ac82728f64fe63d5fc691f3111103e4","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/.travis.yml","hash":"edcbaf750ad22014cba25d8a30e2f7c05e9c39a5","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/LICENSE","hash":"8c9db3c96b659c6ab7190a7b02a9f1ca90458ea8","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/README.md","hash":"caf3972fc843ec620aad623e672a8536469c443a","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/package.json","hash":"4927155185fec5de68572369791da6a1a305012b","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/readdirp.js","hash":"e7fc1e2ec8e3cbc0248355271882cfccf91b4960","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/stream-api.js","hash":"c233c30c5881eb9ec96c5054d9449ca81c8d48b3","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/.bin/window-size","hash":"3be15c787c4707cd700f50e9deae2840394e1822","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/camelcase/index.js","hash":"2b8c116fea89376fba3557ffb11fa0e3328846d5","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/camelcase/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/camelcase/package.json","hash":"9a4a04eebc6d5b77e0f8a70af36a56776dd63773","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/camelcase/readme.md","hash":"c90528b5f1cea2de255651c9daab5b0aea013737","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/cliui/CHANGELOG.md","hash":"26cb805006986096e67141729c6fa6e6de4b3fc6","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/cliui/LICENSE.txt","hash":"039fa81eb89fc5c892f5ce2d22ee6ac0a8503880","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/cliui/README.md","hash":"1e22b71fd4a73fa941054e5f565c3f4e21827804","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/cliui/index.js","hash":"ffb7fefbb726b99e2dff9e1342ff86caba27e863","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/cliui/package.json","hash":"500e60a5e3019a967f1f22483871001a5fa439ec","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/decamelize/index.js","hash":"b2b327355fce3e54d2a2c542beb41ae803c33285","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/decamelize/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/decamelize/package.json","hash":"68ab5046f6f987043db5e017877875e2ee23593f","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/decamelize/readme.md","hash":"ab75be4d249b40443b662f2cd920be0cf657c6e0","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/os-locale/index.js","hash":"b0aa01d61dede1b2f87d5ed56318f83787551a07","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/os-locale/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/os-locale/package.json","hash":"f75f22584f0b79d61082cd482e7a9f4ee7570c91","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/os-locale/readme.md","hash":"625c3415731f47406831239e3c2abf791df39d99","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/string-width/index.js","hash":"488a7f558004cde30cd57c2eeac1aca4e2947a7a","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/string-width/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/string-width/package.json","hash":"c34e9b723df801faefdbe303897762ba5e8291cd","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/string-width/readme.md","hash":"31d4db706cd6186a3a8e4c69ec499663f3a97f23","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/window-size/LICENSE","hash":"f6794e2167dc92e7ab5f2b00a15f0af45639a5a1","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/window-size/README.md","hash":"c286863d0378b310abed728a9425b4d00f2027a1","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/window-size/cli.js","hash":"3be15c787c4707cd700f50e9deae2840394e1822","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/window-size/index.js","hash":"a6e4427986c2372b10f86c12b4521dff04b3cb52","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/window-size/package.json","hash":"1b866158da15ad0658ea5bb2f2e41c1a56bde42f","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/y18n/LICENSE","hash":"d1e0173a0697ade86e242be697a030918b770336","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/y18n/README.md","hash":"27de96420d32db9e8a1ff0be8aa965761bce4c0b","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/y18n/index.js","hash":"abb180b94096f6824676f2d1ca30376f25451a49","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/y18n/package.json","hash":"fdfa2e5be4c8edbec834218b394878ed61b92f3b","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/path-is-absolute/index.js","hash":"6de38a82f68960de2bd07fd9114541f02bee2f62","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/README.md","hash":"6abfe77bff90bcf1c9adde01eab4a5eb609eda7b","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/index.js","hash":"21e942db79cdd8c863a7c1d4c619de728a3f4277","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/examples/callback-api.js","hash":"bc8172824ff3c01eed53b563f95f99f1d90c2435","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/examples/grep.js","hash":"03dd42417a46ccac5adcb5d3cf4ae328b20cb90b","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/examples/package.json","hash":"63aecfe08596ce3954da36160fd30e4c15fe0bb9","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/examples/stream-api-pipe.js","hash":"3bed4d356d63f329ed4c3d6745b41215c2b2ffad","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/test/readdirp-stream.js","hash":"2cec0eca327638fd9e654c43424ed6aa2ffd17ee","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/test/readdirp.js","hash":"04bb5ac265a4f6e10f05c7f6311366eb2d6dfda8","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/examples/Readme.md","hash":"b019e9ebb387f5ddfb2313b7cb79e62cad77f83d","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/examples/stream-api.js","hash":"56ebe5e04e674c190e9d9e14363475672922edd2","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/test/bed/root_file1.ext1","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/test/bed/root_file2.ext2","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/test/bed/root_file3.ext3","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/is-binary-path/node_modules/binary-extensions/binary-extensions.json","hash":"7a6bbe07c36886fcc3642f6be68d7b7825f56d7f","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/is-glob/node_modules/is-extglob/LICENSE","hash":"cce8f85bce93fb036bc1846f001ffea1b098108c","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/is-glob/node_modules/is-extglob/README.md","hash":"70fccdf58f29062dbed00016f2790ae604a83d54","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/is-glob/node_modules/is-extglob/index.js","hash":"f2caa8e7efa77712cf91d0f349830dc563f1c9fa","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/is-glob/node_modules/is-extglob/package.json","hash":"cc5c8a03cb170c48ba4971e00e9ad32bd5c8fc95","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/arrify/index.js","hash":"d91a789bdf6d6e7ea9014b0b1bacfef0d7621f47","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/arrify/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/arrify/package.json","hash":"d8813b0ec83726bfecbcfe7a318acbb78cfc0b76","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/arrify/readme.md","hash":"6354f6960ff472c330f75421ac9a81d3709599ad","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/LICENSE","hash":"cce8f85bce93fb036bc1846f001ffea1b098108c","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/README.md","hash":"2dc079b248dcfeb9b6f677f43a0250dafa249adf","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/index.js","hash":"f679699eb8954133a5e6e9c329559ef261d12d53","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/package.json","hash":"5f8ea54c17a1a36cc3c1beb21c194244014c9f80","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/graceful-fs/LICENSE","hash":"6560c016f1644ce652d83d039d8ba9e64795fd49","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/graceful-fs/README.md","hash":"649ce10ecea3a470be5c2d07ddeae45c7e7b3482","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/graceful-fs/fs.js","hash":"8b8116f2fc0e6393cfed3b1076810ce5d02e0f01","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/graceful-fs/graceful-fs.js","hash":"2daf54f71514b35a9b2724bc789b6dbb138a8e76","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/graceful-fs/legacy-streams.js","hash":"f4a3583d4c3e8b0c407ab8406bdafb02b4055b7f","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/graceful-fs/package.json","hash":"3f43d03cb963e68550694afeff89d6a089a641f7","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/graceful-fs/polyfills.js","hash":"f6f520a3143be037ab44496b5956ffb37ed2c746","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/minimatch/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/minimatch/README.md","hash":"c5acb4041ec3730165d4d6ce835a6bd801c8ccec","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/minimatch/minimatch.js","hash":"c2ee9ea234b053f5177e703334036d505eaa0978","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/minimatch/package.json","hash":"f1715a8cbbb94efc151fe0bc527c16af96664df9","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/set-immediate-shim/index.js","hash":"a5eb921ba840fa680ed144b2e610043a7acd7a4e","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/set-immediate-shim/package.json","hash":"272277ab365ef5d54fce8949dfa2b4145871582d","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/set-immediate-shim/readme.md","hash":"43e2db7332bdf706ad496c03803426a2a9b4caec","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/cliui/node_modules/strip-ansi/index.js","hash":"fa7b64a04c5989a1c9b78e83768b90384ac9abcc","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/cliui/node_modules/strip-ansi/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/cliui/node_modules/strip-ansi/package.json","hash":"50a3a0da08713e7a65a43242b6942b1f77b9e037","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/cliui/node_modules/strip-ansi/readme.md","hash":"ee19204de1797a46e3101e8b064a3cfd4741fd6c","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/cliui/node_modules/wrap-ansi/index.js","hash":"ed9c0328c71a7788d2e8b0bf5122ff2975e69a9d","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/cliui/node_modules/wrap-ansi/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/cliui/node_modules/wrap-ansi/package.json","hash":"d378b056821700de2110e7d6df71676d3270710c","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/cliui/node_modules/wrap-ansi/readme.md","hash":"a5e54f33d345d03fb99a267ffecf5b99c37b5502","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/os-locale/node_modules/lcid/index.js","hash":"44bee35e89acd1a5d4f69588d68d0aab44ea3d2e","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/os-locale/node_modules/lcid/lcid.json","hash":"8fa5db38e0809fdbcdd19e59bb3377504612863e","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/os-locale/node_modules/lcid/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/os-locale/node_modules/lcid/package.json","hash":"cf21d673ef887c9fdebfc19652e332144941d896","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/os-locale/node_modules/lcid/readme.md","hash":"f8875f8dd5001202245c475d8e10a0ccb4d4552d","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/string-width/node_modules/code-point-at/index.js","hash":"6470bf99550991a78ace073dafbbf480ab1f0a08","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/string-width/node_modules/code-point-at/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/string-width/node_modules/code-point-at/package.json","hash":"f71eac9c14485102ab0bc39c89ac433fb6b4e1cd","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/string-width/node_modules/code-point-at/readme.md","hash":"df4c8318bd1768cfb78311f7e3b9fcb45aaaab47","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/string-width/node_modules/is-fullwidth-code-point/index.js","hash":"7647b9a016393c95e9694ff1dafb3e4ee66fd795","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/string-width/node_modules/is-fullwidth-code-point/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/string-width/node_modules/is-fullwidth-code-point/package.json","hash":"76ee2a1ffffe34adb46878770e77ca4a322ae546","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/string-width/node_modules/is-fullwidth-code-point/readme.md","hash":"51b58cdc5cdf9b9e20396c9daaa411a7337280c3","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/string-width/node_modules/strip-ansi/index.js","hash":"fa7b64a04c5989a1c9b78e83768b90384ac9abcc","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/string-width/node_modules/strip-ansi/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/string-width/node_modules/strip-ansi/package.json","hash":"50a3a0da08713e7a65a43242b6942b1f77b9e037","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/string-width/node_modules/strip-ansi/readme.md","hash":"ee19204de1797a46e3101e8b064a3cfd4741fd6c","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/.npmignore","hash":"7e52b34499134020ad3b1755e816db1bddaab27d","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/.travis.yml","hash":"b5a980a0b2e5681fe9a9510d3fde8a35ffb1ec0f","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/LICENSE","hash":"73efe5bda3791d234730ab0dcc48eb619a2e0ec6","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/README.md","hash":"58e63cb6b2525648d15d35f7dda932aced2fe2aa","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/duplex.js","hash":"5ff8b0af1efbb8ed54ac1b3f57167447cb902344","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/package.json","hash":"1fdf0f8bffc59fa87e31b59f472242a29d570319","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/passthrough.js","hash":"ff1590a9a778dc9d8ed51064670d82426782ee6e","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/readable.js","hash":"343555ce6bb91b32c8547c5fe0444474906ee764","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/transform.js","hash":"2d31b50e657e5b03ce5abc5ce6b77187e8e876c2","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/writable.js","hash":"8a7bd86d1803614b9381a924ab9ef0a19fd70e6c","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/test/bed/root_dir1/root_dir1_file1.ext1","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/test/bed/root_dir1/root_dir1_file2.ext2","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/test/bed/root_dir1/root_dir1_file3.ext3","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/test/bed/root_dir2/root_dir2_file1.ext1","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/test/bed/root_dir2/root_dir2_file2.ext2","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/is-binary-path/node_modules/binary-extensions/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/is-binary-path/node_modules/binary-extensions/package.json","hash":"d7a668bc67461c99326b97ba0ce0984191cb0522","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/is-binary-path/node_modules/binary-extensions/readme.md","hash":"df2c147fdca66c819adb5e7e7709ba1d4167a37b","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/lib/glob.js","hash":"100291bc1b0e543fa2d491f9d157aa06c11aa496","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/lib/_stream_duplex.js","hash":"df22a616d3108766d7537b9985b7cd8cd729f1d0","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/lib/_stream_passthrough.js","hash":"493a4cf1bf1927d8a2bf5936b7d50b72bdafa378","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/lib/_stream_readable.js","hash":"bc3031b843858db8604a9a7eca6267c3780b1f52","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/lib/_stream_transform.js","hash":"c06f7b50e22f65d4cfcd9881c264140d991ccbb8","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/lib/_stream_writable.js","hash":"61dde7385ec04b5e452c97db200fd6836210458b","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/test/bed/root_dir1/root_dir1_subdir1/root1_dir1_subdir1_file1.ext1","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/doc/stream.md","hash":"a8804edc257494b0d04abdd1171b7661e10a86dd","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/arr-diff/LICENSE","hash":"cce8f85bce93fb036bc1846f001ffea1b098108c","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/arr-diff/README.md","hash":"aea1c9d09e3e4836b20459900490582a913ba318","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/arr-diff/index.js","hash":"b0af4d581bd0e4f370526dfaee3d2a8daf45880c","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/arr-diff/package.json","hash":"b0c9d578a7de8e32fa252f21506159ede49a82f1","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/array-unique/LICENSE","hash":"cce8f85bce93fb036bc1846f001ffea1b098108c","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/array-unique/README.md","hash":"c469edac074366095833e9e37da13d111df44bd7","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/array-unique/index.js","hash":"1826adc4c19e8d8bcf421d342ae7e2db52f69bb6","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/array-unique/package.json","hash":"05e8e0fd8ade33c892205152cf67b1c495ec47ed","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/LICENSE","hash":"3693ecd333cf832d150571c8cf7448da1434c8a6","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/README.md","hash":"5d8b9eba6236008531040cf7a3ae36199bba4241","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/index.js","hash":"68b2876bd7c9fa21956c4bacb0af16978eee6c08","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/package.json","hash":"90dd574b785707e837ded5ebfd5d4b3e0855dbb8","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/expand-brackets/LICENSE","hash":"e3bbd0d3b6f13873dd8a31097d8043f090b565f4","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/expand-brackets/README.md","hash":"a8e35b4b855a62ebf1b02710cad6e23431db31b4","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/expand-brackets/index.js","hash":"8637e90b2cbfda4cf2edf6b394e57f50c6747684","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/expand-brackets/package.json","hash":"168650ec67d5137042ba273bd26c61801f83376f","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/extglob/LICENSE","hash":"f6794e2167dc92e7ab5f2b00a15f0af45639a5a1","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/extglob/README.md","hash":"ac4514f62a9bbf39090ca79839a0cc9a95d8e810","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/extglob/index.js","hash":"c330dc0091d0f58e6a22455c1dc1ad5796013bbd","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/extglob/package.json","hash":"42df10fc39c9a4c69fb009e81d54b707f8988125","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/filename-regex/README.md","hash":"6f7b2600f371413b90ac67824993d73f8e209664","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/filename-regex/index.js","hash":"0c901dd7fd6cedfd15f2c1fea2cbf3efb3837aaf","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/filename-regex/package.json","hash":"069e378eda77771143c22234c69a8cda275e3808","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/is-extglob/LICENSE","hash":"cce8f85bce93fb036bc1846f001ffea1b098108c","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/is-extglob/README.md","hash":"70fccdf58f29062dbed00016f2790ae604a83d54","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/is-extglob/index.js","hash":"f2caa8e7efa77712cf91d0f349830dc563f1c9fa","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/is-extglob/package.json","hash":"cc5c8a03cb170c48ba4971e00e9ad32bd5c8fc95","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/kind-of/LICENSE","hash":"3693ecd333cf832d150571c8cf7448da1434c8a6","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/kind-of/README.md","hash":"c5fa548231ffff893e4616df496fdf6afba0ef9d","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/kind-of/index.js","hash":"ad67453f6b331b33d38b5b0e5c7c8516bc57b5da","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/kind-of/package.json","hash":"797ef981720ef74c54763d432cb472f52ea4707c","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/normalize-path/LICENSE","hash":"cce8f85bce93fb036bc1846f001ffea1b098108c","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/normalize-path/README.md","hash":"83f0d8c7ef174ff6b375a48765494088ba5c93a6","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/normalize-path/index.js","hash":"1fa7549f17a96f788cb935c242c33d122f5bb005","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/normalize-path/package.json","hash":"32ef4a3905aa81063eaaf83b7c76d2133753c6fe","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/object.omit/LICENSE","hash":"cce8f85bce93fb036bc1846f001ffea1b098108c","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/object.omit/README.md","hash":"1b8bcc9834b67c3a49946e23a44a1edb4bd92833","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/object.omit/index.js","hash":"859e8fa5823e361cf0b34ec07263765a36923ebf","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/object.omit/package.json","hash":"1b47d1028074d134fb27b33850ccc919550407e9","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/parse-glob/LICENSE","hash":"f6794e2167dc92e7ab5f2b00a15f0af45639a5a1","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/parse-glob/README.md","hash":"b08c9fd27a7da80a2e0afb00003498384f3aabbb","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/parse-glob/index.js","hash":"80de4342abc02723990d3849ef8f5710a3bfc2a0","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/parse-glob/package.json","hash":"e2bc958b4a5d286471de40273f5a30acb6387255","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/regex-cache/LICENSE","hash":"e3bbd0d3b6f13873dd8a31097d8043f090b565f4","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/regex-cache/README.md","hash":"e0165167497464ddd6b8032df84e547efefafafb","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/regex-cache/index.js","hash":"9bf12bc1f237ac9a2652806adde33f7be50ac66b","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/regex-cache/package.json","hash":"33c193231170567e93812375f865685dbde6f3fb","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/minimatch/node_modules/brace-expansion/README.md","hash":"3ed262742cc9e8e0db93c5f1d729127af1ffbe82","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/minimatch/node_modules/brace-expansion/index.js","hash":"ca6eef16d70a99ded935606f7b62f97be1033323","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/minimatch/node_modules/brace-expansion/package.json","hash":"ef734855b8735c961bbf901468543fbebbef35e7","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/cliui/node_modules/strip-ansi/node_modules/ansi-regex/index.js","hash":"03d6a4cc534cbb9a855b01b372a17bfa2b830442","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/lib/chars.js","hash":"10dede99931a8786b6c738b202ac8bda153ea112","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/lib/utils.js","hash":"fceb374ebf62334dcf0f221b0eee463ea1d4134f","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/lib/expand.js","hash":"f2b3efa8497d24116fc595b73f94a4e7cff15dc2","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/os-locale/node_modules/lcid/node_modules/invert-kv/index.js","hash":"de8db0a1bda39e00bb4831788a8a52fb7c968e94","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/os-locale/node_modules/lcid/node_modules/invert-kv/package.json","hash":"a0c52b4b8bff1d75e23dab9237ab6f1517ccfc20","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/os-locale/node_modules/lcid/node_modules/invert-kv/readme.md","hash":"b50599e017388e5820ce7991ef8815c1cc334aa8","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/string-width/node_modules/code-point-at/node_modules/number-is-nan/index.js","hash":"f46fa63ddeeaf817837ade36c96a37045c36b5bf","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/string-width/node_modules/code-point-at/node_modules/number-is-nan/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/string-width/node_modules/code-point-at/node_modules/number-is-nan/package.json","hash":"f3faa8478565cc23988e2fb3cc0e586c2c0c4fb8","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/string-width/node_modules/code-point-at/node_modules/number-is-nan/readme.md","hash":"d579efeab4be85082383108869ebd212ba56ab5a","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/string-width/node_modules/is-fullwidth-code-point/node_modules/number-is-nan/index.js","hash":"f46fa63ddeeaf817837ade36c96a37045c36b5bf","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/string-width/node_modules/is-fullwidth-code-point/node_modules/number-is-nan/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/string-width/node_modules/is-fullwidth-code-point/node_modules/number-is-nan/package.json","hash":"f3faa8478565cc23988e2fb3cc0e586c2c0c4fb8","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/string-width/node_modules/is-fullwidth-code-point/node_modules/number-is-nan/readme.md","hash":"d579efeab4be85082383108869ebd212ba56ab5a","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/string-width/node_modules/strip-ansi/node_modules/ansi-regex/index.js","hash":"03d6a4cc534cbb9a855b01b372a17bfa2b830442","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/string-width/node_modules/strip-ansi/node_modules/ansi-regex/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/string-width/node_modules/strip-ansi/node_modules/ansi-regex/package.json","hash":"ed8a5bccef4a7dd0d990332e78c3eada748416c6","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/string-width/node_modules/strip-ansi/node_modules/ansi-regex/readme.md","hash":"76c119f1cf0605a0409f9c2756de3e55a1398fc2","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/doc/wg-meetings/2015-01-30.md","hash":"1fafe6e2e28a4404db90ae6dc867199b74468ca4","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/node_modules/buffer-shims/index.js","hash":"dd320600941e8120a2b23f4dae07ea8c263e4647","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/node_modules/buffer-shims/license.md","hash":"f6a31aeb7f0de3db0bf8eb10c2ea236257fdb187","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/node_modules/buffer-shims/package.json","hash":"b0e167c830dc42bac6f9520a6bfd1e748b46d1fe","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/node_modules/buffer-shims/readme.md","hash":"cb2ff15a1b206374422c38790db50ed936e03cc0","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/node_modules/core-util-is/LICENSE","hash":"a95471326a84657b0e164f84e1285685f63011e0","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/node_modules/core-util-is/README.md","hash":"d4987293f1078d937454a14a5ca6f386d227679d","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/node_modules/core-util-is/float.patch","hash":"d7f073ceb05c6f6dd1bb852fc00f5379a3e41301","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/node_modules/core-util-is/package.json","hash":"8fed2442011030c291d0eda41e542eea20541ac2","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/node_modules/core-util-is/test.js","hash":"2837ee1d57f385943ba5ccc7fd0ec4ed1cb8cfdd","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/node_modules/isarray/.npmignore","hash":"8b894ec0b3bbc33011392ad9bafeb1df2634db45","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/node_modules/isarray/.travis.yml","hash":"a88152a7be9167603b19549ff75cd80d22501731","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/node_modules/isarray/Makefile","hash":"6ab383baa5dc5f695793d66f5b30f0c271e15807","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/node_modules/isarray/README.md","hash":"b4a604915101db16bb5aebc51cb5385b40c709b6","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/node_modules/isarray/component.json","hash":"88615028e91d7872104932a02b78a75f04df8465","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/node_modules/isarray/index.js","hash":"5c3d1f3ad38be1bded1ec4e065f9463c9bbe359d","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/node_modules/isarray/package.json","hash":"8e2990de665eaa167c3732df89c4422e572ea0f9","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/cliui/node_modules/strip-ansi/node_modules/ansi-regex/readme.md","hash":"76c119f1cf0605a0409f9c2756de3e55a1398fc2","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/cliui/node_modules/strip-ansi/node_modules/ansi-regex/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/yargs/node_modules/cliui/node_modules/strip-ansi/node_modules/ansi-regex/package.json","hash":"ed8a5bccef4a7dd0d990332e78c3eada748416c6","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/node_modules/isarray/test.js","hash":"d822e1a795c5658736d31abdaed0608e01d25183","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/node_modules/process-nextick-args/index.js","hash":"19704cf1716bd11b5fd95e20a35506b764aa541e","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/node_modules/process-nextick-args/package.json","hash":"c3d2386ea459957ab9bcd470b832f493a0f45ada","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/node_modules/process-nextick-args/license.md","hash":"9def7167175d2ac68505dd2ae0c7b8dd63bc4c3d","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/node_modules/process-nextick-args/.travis.yml","hash":"f4a67b72445cea74c4c35acfd9bef7bb1f8276a4","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/node_modules/process-nextick-args/test.js","hash":"279a062028d86a4ee0ab2ab800ecf7ca29f4905e","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/node_modules/process-nextick-args/readme.md","hash":"3eba0a30f0a115fd767a0c8c9761d60d1dc768c0","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/node_modules/string_decoder/.npmignore","hash":"fc05bac99247f420fd3eee41f17afeb48f06a76e","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/node_modules/string_decoder/LICENSE","hash":"8344f8cf34d06153cd7ffc797c070e00d69eb442","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/node_modules/string_decoder/package.json","hash":"8903547d96916208231b42b07118965ac94a83bc","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/node_modules/util-deprecate/History.md","hash":"1fc5b9cf603a0b6abeb852b35bec607a411e5b9b","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/node_modules/util-deprecate/LICENSE","hash":"cbde92577cb69b3b45dd33f8dc600732cf9e14cb","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/node_modules/util-deprecate/README.md","hash":"8e590b24df7b037031e571b7b2b9600217b83ae0","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/node_modules/util-deprecate/browser.js","hash":"335965112d6117af8926dce4497a1fb9fca022eb","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/node_modules/util-deprecate/node.js","hash":"26bb9fcabaf57f0bb50e5e026c13de394bc0c478","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/node_modules/util-deprecate/package.json","hash":"65f02407f09f8aaca53fdc5a4f49718b4a329890","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/node_modules/string_decoder/README.md","hash":"c8dac065c0a3043936a7c07ea1d698234c3ad159","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/node_modules/string_decoder/index.js","hash":"91f40da3177881cf70b87520444b755e1d9592ec","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/lib/internal/streams/BufferList.js","hash":"b6d4cead08f33e7ba6e71f4b815fa941169f1742","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/readable-stream/node_modules/core-util-is/lib/util.js","hash":"7d34435928ee9228995c04eaa7bdcef875c41e65","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/arr-diff/node_modules/arr-flatten/LICENSE","hash":"cce8f85bce93fb036bc1846f001ffea1b098108c","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/arr-diff/node_modules/arr-flatten/package.json","hash":"17353db894f827f28883086b0607b2ba7259c782","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/node_modules/expand-range/LICENSE","hash":"4a1040f60d8e056a8bc2df7310046ab0a3127d91","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/node_modules/expand-range/README.md","hash":"42710977e33fb611a921985af4df9fb1062f3b81","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/node_modules/expand-range/index.js","hash":"34a62cc825d22f01bbb691a1a6d2ff68686e692e","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/node_modules/expand-range/package.json","hash":"e51e4a5efa3e4bd64b229e074985f66460ed9f5e","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/node_modules/repeat-element/LICENSE","hash":"7e21c9f5aa0a1be61e943a935506095ea40bbafc","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/node_modules/repeat-element/README.md","hash":"230540131df8177d53f6ee1a57eec5d9413992ec","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/node_modules/repeat-element/index.js","hash":"33ee2f6ac8638233b7d7eb0a35b43249f05ee5c5","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/node_modules/repeat-element/package.json","hash":"473105e9d69bedbd1ce1629eeb2985d6c1987c70","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/expand-brackets/node_modules/is-posix-bracket/LICENSE","hash":"e3bbd0d3b6f13873dd8a31097d8043f090b565f4","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/expand-brackets/node_modules/is-posix-bracket/README.md","hash":"adc082455ae8422d02b15123af4ea4066d4bba3b","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/expand-brackets/node_modules/is-posix-bracket/index.js","hash":"c029d99d05d6868e753a517bdb2e22db5ae7c274","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/expand-brackets/node_modules/is-posix-bracket/package.json","hash":"c73db323adef89e82e84443d85f879be39d40f80","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/kind-of/node_modules/is-buffer/.travis.yml","hash":"c9d7d97844866248472ed0e6af71f2f3c0458120","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/kind-of/node_modules/is-buffer/.zuul.yml","hash":"5ee45268c63b82b769f1a8c4499250fdd22c11e4","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/kind-of/node_modules/is-buffer/LICENSE","hash":"07d9563f6153658de124707787ff43f0458ab24a","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/kind-of/node_modules/is-buffer/README.md","hash":"c5ab62b7664349dda53564487eda0b79d0bcc72b","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/kind-of/node_modules/is-buffer/index.js","hash":"e02257ad46671767a1d044aebcf75e7f3f4c9441","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/kind-of/node_modules/is-buffer/package.json","hash":"1f4d47bb39f81b646b1ee7a62b8ef6415cb8cee5","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/object.omit/node_modules/for-own/LICENSE","hash":"cce8f85bce93fb036bc1846f001ffea1b098108c","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/object.omit/node_modules/for-own/README.md","hash":"387ea9211f5e4116fa100072852d196f1945147b","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/object.omit/node_modules/for-own/index.js","hash":"b22afcd44da9188c7ad05b7190a4002413bf6d8a","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/object.omit/node_modules/for-own/package.json","hash":"a715289cdce8ed55748fc25d271ead51b405926a","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/object.omit/node_modules/is-extendable/LICENSE","hash":"f6794e2167dc92e7ab5f2b00a15f0af45639a5a1","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/object.omit/node_modules/is-extendable/README.md","hash":"e47f712e0969fbe6cda9f18339d0fc7ad37cb62c","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/object.omit/node_modules/is-extendable/index.js","hash":"c38e98e8a299a93debd6e95bdcb56da06580a884","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/object.omit/node_modules/is-extendable/package.json","hash":"39bac72a83c30abe273e66b819e254dfe93ba7ff","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/parse-glob/node_modules/glob-base/LICENSE","hash":"f6794e2167dc92e7ab5f2b00a15f0af45639a5a1","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/parse-glob/node_modules/glob-base/README.md","hash":"83e0e13e0f9d9bed8b85f401fd22e6fd146fbc49","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/parse-glob/node_modules/glob-base/index.js","hash":"2f15588ede319f3f78ecb5b8be65c80f8c1570cf","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/parse-glob/node_modules/glob-base/package.json","hash":"64e9e601ad9905d441df215a53f5369883b3bfb4","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/parse-glob/node_modules/is-dotfile/LICENSE","hash":"7e21c9f5aa0a1be61e943a935506095ea40bbafc","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/parse-glob/node_modules/is-dotfile/README.md","hash":"a339a6cc02297687e3420dc751b47b9ae7d400a4","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/parse-glob/node_modules/is-dotfile/index.js","hash":"c1a0fc16e3b10c1dbdfc77cb46097575bf7293e0","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/parse-glob/node_modules/is-dotfile/package.json","hash":"e31d2d6ec826762e2ca384e8a97bd3c9bc6aef0a","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/regex-cache/node_modules/is-equal-shallow/LICENSE","hash":"f6794e2167dc92e7ab5f2b00a15f0af45639a5a1","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/regex-cache/node_modules/is-equal-shallow/README.md","hash":"d3ec7e25f88751d4aa7536c376f32d97816038ec","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/regex-cache/node_modules/is-equal-shallow/index.js","hash":"8ad23aff08c366907d80bf6f3d24a6c6a13d6a89","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/regex-cache/node_modules/is-equal-shallow/package.json","hash":"7d9704684fdca04af21a5f9dbb82ae9ec23ca362","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/regex-cache/node_modules/is-primitive/LICENSE","hash":"cce8f85bce93fb036bc1846f001ffea1b098108c","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/regex-cache/node_modules/is-primitive/README.md","hash":"13fde70833e452345cce4c999e73872f5ce83d49","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/regex-cache/node_modules/is-primitive/index.js","hash":"4d12a2283734792d84b1b92555671f52adc55a99","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/regex-cache/node_modules/is-primitive/package.json","hash":"64445df0db491a60fe012e2098797eb5803c0a12","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/minimatch/node_modules/brace-expansion/node_modules/balanced-match/.npmignore","hash":"bf3481c896126bd5395e5095c994fb82c9e4fa8a","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/minimatch/node_modules/brace-expansion/node_modules/balanced-match/LICENSE.md","hash":"09013c002fbdd686da2ec13c5a6d014f0a294ba9","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/minimatch/node_modules/brace-expansion/node_modules/balanced-match/README.md","hash":"1386baac658274264e12701b085143357d817bb1","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/minimatch/node_modules/brace-expansion/node_modules/balanced-match/index.js","hash":"d21b9b828ab5ebb248d8973602f036f1ab301fcf","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/minimatch/node_modules/brace-expansion/node_modules/balanced-match/package.json","hash":"28b02c454e1ba1a7a1bc7e3114c55fc06a755895","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/minimatch/node_modules/brace-expansion/node_modules/concat-map/.travis.yml","hash":"994e65474ac75a6687de118e175526bc106cef57","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/minimatch/node_modules/brace-expansion/node_modules/concat-map/LICENSE","hash":"b2e68ce937c1f851926f7e10280cc93221d4f53c","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/minimatch/node_modules/brace-expansion/node_modules/concat-map/README.markdown","hash":"132e6e8fd1d19ec2422fdcde00840d8237e44094","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/minimatch/node_modules/brace-expansion/node_modules/concat-map/index.js","hash":"a3063f014cc693b320dbd64de3243a79247c1e05","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/minimatch/node_modules/brace-expansion/node_modules/concat-map/package.json","hash":"fdfed757e32059f5197bd778529a8b5bf8e5458d","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/node_modules/preserve/.gitattributes","hash":"514b6d54817ac3ab41bdaf1af9818c6520463df5","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/node_modules/preserve/.jshintrc","hash":"24dd712f1ac9b5343fca8e7fdaee27b7e1c0ba71","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/node_modules/preserve/.npmignore","hash":"026661455b3e8504461938da7cf22fa149113b65","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/node_modules/preserve/.travis.yml","hash":"ebe015d4e59b33c034c0140e91343f6a2a549a6d","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/node_modules/preserve/.verb.md","hash":"59da141744d54ce2c3eb50ca587eccc954257d5b","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/node_modules/preserve/LICENSE","hash":"d99d5158898474f25efb4c8790f9fcc4cf55b350","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/node_modules/preserve/README.md","hash":"daedd5d9696a86795f63b002cfd4537033d639ec","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/node_modules/preserve/index.js","hash":"1d37d615f1ea0e2469a6e1a8a64eb7c1c7b6f110","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/node_modules/preserve/package.json","hash":"43a66d20de836c8a73efa7dc2991647f67d2c7ae","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/node_modules/preserve/test.js","hash":"3baac5a1e812bcc42443c2dc6a401c0a55d01f4c","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/kind-of/node_modules/is-buffer/test/basic.js","hash":"f81e7bac65c3be81f6d8d0ff5940cf82b58ef61f","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/minimatch/node_modules/brace-expansion/node_modules/concat-map/example/map.js","hash":"022a614b8d9f5ccb67b6ce1f478b1efd7aff298e","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/readdirp/node_modules/minimatch/node_modules/brace-expansion/node_modules/concat-map/test/map.js","hash":"162cce32c23628192cef64924a1ce768af399a4b","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/arr-diff/node_modules/arr-flatten/README.md","hash":"3f5ac995fae4c1ac9372779114b7b683e3b21a85","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/arr-diff/node_modules/arr-flatten/index.js","hash":"f520001d7bfbf978f6b90448fc2dc51f5bdf6ca4","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/node_modules/expand-range/node_modules/fill-range/LICENSE","hash":"cce8f85bce93fb036bc1846f001ffea1b098108c","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/node_modules/expand-range/node_modules/fill-range/package.json","hash":"a79a72e73e690e3549ee9b84da72d2a8ecbe75a9","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/object.omit/node_modules/for-own/node_modules/for-in/README.md","hash":"7c65d4cf33e20b0df5846b379d501aa346abf528","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/object.omit/node_modules/for-own/node_modules/for-in/index.js","hash":"10f54d28a782bb79b781f7e5b33151802abd90b2","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/object.omit/node_modules/for-own/node_modules/for-in/package.json","hash":"8310d2d93b598cc5943cad01bcaea60c74413dd3","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/object.omit/node_modules/for-own/node_modules/for-in/LICENSE","hash":"3693ecd333cf832d150571c8cf7448da1434c8a6","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/node_modules/expand-range/node_modules/fill-range/README.md","hash":"846adfe3de4ed18174b00fd079e3704daab075e9","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/node_modules/expand-range/node_modules/fill-range/index.js","hash":"5ddcbe607a51a43d05eecfc9fe333a96005e91e1","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/node_modules/expand-range/node_modules/fill-range/node_modules/is-number/package.json","hash":"8e786f8f077ecf1b278f089909020193ff83f386","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/node_modules/expand-range/node_modules/fill-range/node_modules/is-number/LICENSE","hash":"cce8f85bce93fb036bc1846f001ffea1b098108c","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/node_modules/expand-range/node_modules/fill-range/node_modules/is-number/index.js","hash":"be43df441aa52b7b5827318a5bb9e17601c1f616","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/node_modules/expand-range/node_modules/fill-range/node_modules/is-number/README.md","hash":"6a27818480a55a97b4c590b0ddd1827b6ff836d9","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/node_modules/expand-range/node_modules/fill-range/node_modules/isobject/LICENSE","hash":"3693ecd333cf832d150571c8cf7448da1434c8a6","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/node_modules/expand-range/node_modules/fill-range/node_modules/isobject/README.md","hash":"0a45cf971072445d3a2ca2d52920e6e668c015eb","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/node_modules/expand-range/node_modules/fill-range/node_modules/isobject/package.json","hash":"98b8344660d92f79a3510c5030c09e9ffd9af0bc","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/node_modules/expand-range/node_modules/fill-range/node_modules/randomatic/LICENSE","hash":"2fc7036acf8dab2c91ea48a293a2a52f37662c34","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/node_modules/expand-range/node_modules/fill-range/node_modules/randomatic/README.md","hash":"1cfbcf24eeeba70bd12cd724052a67e50c71c2a8","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/node_modules/expand-range/node_modules/fill-range/node_modules/randomatic/index.js","hash":"b3eab954771903c20e51724faafa84685dca1ccc","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/node_modules/expand-range/node_modules/fill-range/node_modules/randomatic/package.json","hash":"d361d1821edb1e2c56ebf44a175eaa6a683b8e48","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/node_modules/expand-range/node_modules/fill-range/node_modules/repeat-string/LICENSE","hash":"3693ecd333cf832d150571c8cf7448da1434c8a6","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/node_modules/expand-range/node_modules/fill-range/node_modules/repeat-string/README.md","hash":"5630db002235a756a6bd36b7c9cf4837d9399fde","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/node_modules/expand-range/node_modules/fill-range/node_modules/repeat-string/index.js","hash":"9d78110f6f917a74c342e9d5237a9de1419c7029","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/node_modules/expand-range/node_modules/fill-range/node_modules/repeat-string/package.json","hash":"bba17e61252c46d65e71b9c467ff8da39c7369ab","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/node_modules/expand-range/node_modules/fill-range/node_modules/isobject/node_modules/isarray/.npmignore","hash":"8b894ec0b3bbc33011392ad9bafeb1df2634db45","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/node_modules/expand-range/node_modules/fill-range/node_modules/isobject/node_modules/isarray/.travis.yml","hash":"a88152a7be9167603b19549ff75cd80d22501731","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/node_modules/expand-range/node_modules/fill-range/node_modules/isobject/node_modules/isarray/Makefile","hash":"6ab383baa5dc5f695793d66f5b30f0c271e15807","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/node_modules/expand-range/node_modules/fill-range/node_modules/isobject/node_modules/isarray/README.md","hash":"b4a604915101db16bb5aebc51cb5385b40c709b6","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/node_modules/expand-range/node_modules/fill-range/node_modules/isobject/node_modules/isarray/component.json","hash":"88615028e91d7872104932a02b78a75f04df8465","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/node_modules/expand-range/node_modules/fill-range/node_modules/isobject/node_modules/isarray/index.js","hash":"5c3d1f3ad38be1bded1ec4e065f9463c9bbe359d","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/node_modules/expand-range/node_modules/fill-range/node_modules/isobject/node_modules/isarray/package.json","hash":"92ff32a74d129b8242f96c6b12500d01ffb3afab","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/node_modules/expand-range/node_modules/fill-range/node_modules/isobject/node_modules/isarray/test.js","hash":"d822e1a795c5658736d31abdaed0608e01d25183","modified":1477278960000},{"_id":"themes/theme-yilia/node_modules/hexo-generator-feed/node_modules/nunjucks/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/node_modules/expand-range/node_modules/fill-range/node_modules/isobject/index.js","hash":"8da9927ffb038a7aa79044b181f555522f52e102","modified":1477278960000},{"_id":"public/categories/index.html","hash":"3cfa6f79d542632bb7844b939ed5f7f1af8994cf","modified":1481184278193},{"_id":"public/archives/2016/10/index.html","hash":"e12f75bf2dcb5c3638b556a5ad877b83c72dfe8e","modified":1481184278303},{"_id":"public/archives/2016/11/index.html","hash":"11ab254cdcfb53d22641341533141888cd91a3ce","modified":1481184278306},{"_id":"public/categories/hexo/index.html","hash":"3c8d2a5aed7f1c89655c3468fa0050a35d0e55b4","modified":1481184278306},{"_id":"public/categories/fastdfs/index.html","hash":"efe37aa872864eb974bf7aec47a6e576b9784a1d","modified":1481184278306},{"_id":"public/tags/epoll/index.html","hash":"4892e1300c04879335bfb3db88cc46a274582861","modified":1481184278306},{"_id":"public/tags/超时事件/index.html","hash":"ebfd599ee392cf44a53ede340229fb8f0c81a04c","modified":1481184278306},{"_id":"public/tags/分布式文件系统/index.html","hash":"845bd6bac4ad862700dd75195f3412c583a50678","modified":1481184278306},{"_id":"public/tags/连接池/index.html","hash":"40a168c8ae483611c8be7c713a068fe71d84a103","modified":1481184278307},{"_id":"public/tags/hexo/index.html","hash":"f93ea71f75e2a76954e73e7b04355e036c38c98c","modified":1481184278307},{"_id":"public/tags/github/index.html","hash":"a367a330ea8cb9976fcccb000df7d8f363b5a0ef","modified":1481184278307},{"_id":"public/tags/multi-pthread/index.html","hash":"dc7e03106a90716565ee7027613b6d9b65e78e9b","modified":1481184278307},{"_id":"public/tags/搭建github博客/index.html","hash":"4d205592ac9d9d3a79f574cf1500cb66ff2ca742","modified":1481184278307},{"_id":"public/2016/12/05/fastdfs之storage主流程/index.html","hash":"e1324ea091c6b5c745625169729a86a2f76f70ee","modified":1481184278307},{"_id":"public/2016/12/04/fastdfs之超时事件的处理/index.html","hash":"19dd425118e098d297d7ad868d9402ebe3130a17","modified":1481184278307},{"_id":"public/2016/12/04/fastdfs之事件监听/index.html","hash":"7c85ceb4024024e9d45d37758242b4827480c37a","modified":1481184278307},{"_id":"public/2016/12/04/fastdfs之tracker主流程/index.html","hash":"595a7715252327f7db458794a077be230a86869d","modified":1481184278307},{"_id":"public/2016/12/04/fastdfs连接池/index.html","hash":"fa1f3e42c9b212bf11b66e28f14e272949d7d15b","modified":1481184278308},{"_id":"public/2016/11/28/多个线程监听同一个fd/index.html","hash":"804d64f13598bb7c39d07da79f186ac57f1eccf4","modified":1481184278308},{"_id":"public/2016/11/07/fastdfs配置文件解析模块/index.html","hash":"33b399df693c332504252c037173fd6790a90696","modified":1481184278308},{"_id":"public/2016/10/22/fastdfs文件系统搭建/index.html","hash":"2001d9789f50805c63d000ab1fc10dc1374ceb83","modified":1481184278308},{"_id":"public/2016/10/14/搭建github博客/index.html","hash":"0e8b6311901747994df30ade641b8e4170535b21","modified":1481184278308},{"_id":"public/archives/index.html","hash":"fe8a4b509c70ba07b66ac4b9154ddc1852316fae","modified":1481184278308},{"_id":"public/archives/2016/index.html","hash":"e8d83ce236a90c97520bce9c695022aa6e4517ff","modified":1481184278308},{"_id":"public/archives/2016/12/index.html","hash":"42b53a44e47d11d51c7db3e106a4abca5276057d","modified":1481184278308},{"_id":"public/index.html","hash":"b109b7c3cd661fba4083dd763f471ddb55ea292f","modified":1481184278309},{"_id":"public/tags/fastdfs/index.html","hash":"bc89490d7b2dc2e6a4d725c520a6a83f483aee4a","modified":1481184278309},{"_id":"public/2016/12/09/test/index.html","hash":"ce1f8aa4c3239616ef5e2134dfadb774cb6c5fc2","modified":1481184278313},{"_id":"public/archives/page/2/index.html","hash":"fd0c09f2e0f9643d4c526da245e2f61222d3ef74","modified":1481184278313},{"_id":"public/archives/2016/page/2/index.html","hash":"5eea71e78e1be6895592a8be1a9f316718b1b987","modified":1481184278313},{"_id":"public/page/2/index.html","hash":"773c03b4bba40c8d6df6ce7236b4fcf1b67afef1","modified":1481184278313},{"_id":"public/tags/test/index.html","hash":"722da0cba302b332def87ee3325a86f51e7fdd9d","modified":1481184278313},{"_id":"public/2016/12/08/hello-world/index.html","hash":"0df28160957144e47ff1a7124960fe3f3c640b56","modified":1481184278313},{"_id":"public/photos/damotiansheng.png","hash":"7ec66590fc0b4f5b3411cf0b70d2c10e852b4d94","modified":1481184278316},{"_id":"public/main.js","hash":"591b5266281ba1840ac4e64b24e371449145d57c","modified":1481184278327},{"_id":"public/style.js","hash":"1ebf7574e1e27a3c079e5686b82a7e17abc3fb98","modified":1481184278327}],"Category":[{"name":"hexo","_id":"ciwg2v9k5000e6al8brj89yv6"},{"name":"fastdfs","_id":"ciwg2v9lm00156al8j4ttvci3"}],"Data":[],"Page":[{"title":"categories","date":"2016-11-06T19:17:28.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-11-06 19:17:28\ntype: \"categories\"\ncomments: false\n---\n","updated":"2016-11-06T12:52:58.000Z","path":"categories/index.html","layout":"page","_id":"ciwg2v9ih00016al8byt6nwg4","content":"","excerpt":"","more":""}],"Post":[{"title":"fastdfs之storage主流程","date":"2016-12-04T17:08:51.000Z","_content":"\n## 主要工作\n[相关文章](http://blog.chinaunix.net/uid-20498361-id-3328762.html)\n1）思想：与tracker主流程一样，采用主线程监听得到fd,dispatch子线程（默认4个工作线程）进行处理；\n2）创建的线程数：会创建与tracker server数量相等的report thread,用于向tracker server发送相关信息，会创建4个工作线程用于处理任务，会创建一个调度线程，用于执行一些定期任务，如：log_sync_func，fdfs_binlog_sync_func等，还会创建一些IO读写线程，用于读写目录，默认一个目录有一个读线程和一个写线程，线程函数都为dio_thread_entrance函数；\n3）主要处理过程：主线程往管道写入得到的连接的相关信息（其实是写入一个fast_task_info地址），工作线程会调用storage_recv_notify_read函数得到该地址，然后依据不同的状态进行不同的处理，具体见storage_recv_notify_read函数；\n<!--more-->\n\n## 相关数据结构\n```\nstruct nio_thread_data\n{\n\tstruct ioevent_puller ev_puller; //IO multiplexing function: poll, kqueue \n\tstruct fast_timer timer; // time wheel \n\tint pipe_fds[2]; //to wake up current thread who owns current nio_thread_data\n\tstruct fast_task_info *deleted_list;\n\tThreadLoopCallback thread_loop_callback;\n\tvoid *arg;   //extra argument pointer\n};\n\nstruct storage_nio_thread_data\n{\n\tstruct nio_thread_data thread_data;\n\tGroupArray group_array;  //FastDHT group array\n};\n每个工作线程对应一个storage_nio_thread_data结构\n```\n## 相关代码\n```\n// fdfs_storaged.c->main函数\nint main(int argc, char *argv[])\n{\n\tchar *conf_filename;\n\tint result;\n\tint sock;\n\tint wait_count;\n\tpthread_t schedule_tid;\n\tstruct sigaction act;\n\tScheduleEntry scheduleEntries[SCHEDULE_ENTRIES_MAX_COUNT];\n\tScheduleArray scheduleArray;\n\tchar pidFilename[MAX_PATH_SIZE];\n\tbool stop;\n\n\tif (argc < 2)\n\t{\n\t\tusage(argv[0]);\n\t\treturn 1;\n\t}\n\n\tg_current_time = time(NULL);\n\tg_up_time = g_current_time;\n\n\tlog_init2();  //init the log system\n\ttrunk_shared_init(); // init the g_fdfs_base64_context global variable\n\n\tconf_filename = argv[1];\n\t\n\tif ((result=get_base_path_from_conf_file(conf_filename,\n\t\tg_fdfs_base_path, sizeof(g_fdfs_base_path))) != 0) // get base path from conf_filename\n\t{\n\t\tlog_destroy();\n\t\treturn result;\n\t}\n\n\tsnprintf(pidFilename, sizeof(pidFilename),\n\t\t\"%s/data/fdfs_storaged.pid\", g_fdfs_base_path);\n\t\n\tif ((result=process_action(pidFilename, argv[2], &stop)) != 0)// process command: restart/stop/start\n\t{\n\t\tif (result == EINVAL)\n\t\t{\n\t\t\tusage(argv[0]);\n\t\t}\n\t\t\n\t\tlog_destroy();\n\t\treturn result;\n\t}\n\t\n\tif (stop)\n\t{\n\t\tlog_destroy();\n\t\treturn 0;\n\t}\n\n#if defined(DEBUG_FLAG) && defined(OS_LINUX)\n\tif (getExeAbsoluteFilename(argv[0], g_exe_name, \\\n\t\tsizeof(g_exe_name)) == NULL) //get the absolute path of exe file saved to g_exe_name\n\t{\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\tlog_destroy();\n\t\treturn errno != 0 ? errno : ENOENT;\n\t}\n#endif\n\n\tdaemon_init(false); // set to daemon mode \n\tumask(0);\n\n\tmemset(g_bind_addr, 0, sizeof(g_bind_addr));\n\t\n\tif ((result=storage_func_init(conf_filename, \\\n\t\t\tg_bind_addr, sizeof(g_bind_addr))) != 0) // parse the conf_filename and get some values saved to global variable\n\t{\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\tlog_destroy();\n\t\treturn result;\n\t}\n\n\t//*g_bind_addr = '\\0', g_server_port=23000\n\t// socketServer to finish socket, bind, listen\n\tsock = socketServer(g_bind_addr, g_server_port, &result);\n\t\n\tif (sock < 0)\n\t{\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\tlog_destroy();\n\t\treturn result;\n\t}\n\n\t// tcpsetserveropt: set send/recv timeout and keepalive parameter\n\tif ((result=tcpsetserveropt(sock, g_fdfs_network_timeout)) != 0)\n\t{\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\tlog_destroy();\n\t\treturn result;\n\t}\n\n\tif ((result=write_to_pid_file(pidFilename)) != 0) \n\t{\n\t\tlog_destroy();\n\t\treturn result;\n\t}\n\n\n    // create base_path and the sync path, create file: binlog.000(default), init the sync_thread_lock \n\tif ((result=storage_sync_init()) != 0)\n\t{\n\t\tlogCrit(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"storage_sync_init fail, program exit!\", __LINE__);\n\t\tg_continue_flag = false;\n\t\treturn result;\n\t}\n\n    // init the lock of reporter_thread_lock, clear g_storage_servers and g_sorted_storages\n\tif ((result=tracker_report_init()) != 0)\n\t{\n\t\tlogCrit(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"tracker_report_init fail, program exit!\", __LINE__);\n\t\tg_continue_flag = false;\n\t\treturn result;\n\t}\n\t\n    //create 4 work thread default, init some lock, build a task object(fast_task_info) pool(g_free_queue)\n\tif ((result=storage_service_init()) != 0)\n\t{\n\t\tlogCrit(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"storage_service_init fail, program exit!\", __LINE__);\n\t\tg_continue_flag = false;\n\t\treturn result;\n\t}\n\n    // init the rand generator\n\tif ((result=set_rand_seed()) != 0)\n\t{\n\t\tlogCrit(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"set_rand_seed fail, program exit!\", __LINE__);\n\t\tg_continue_flag = false;\n\t\treturn result;\n\t}\n\n\tmemset(&act, 0, sizeof(act));\n\tsigemptyset(&act.sa_mask);\n\n\tact.sa_handler = sigUsrHandler; // sigUsrHandler do nothing\n\t\n\tif(sigaction(SIGUSR1, &act, NULL) < 0 || \\\n\t\tsigaction(SIGUSR2, &act, NULL) < 0)\n\t{\n\t\tlogCrit(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"call sigaction fail, errno: %d, error info: %s\", \\\n\t\t\t__LINE__, errno, STRERROR(errno));\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\treturn errno;\n\t}\n\n\tact.sa_handler = sigHupHandler; // set g_log_context.rotate_immediately to true\n\t\n\tif(sigaction(SIGHUP, &act, NULL) < 0)\n\t{\n\t\tlogCrit(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"call sigaction fail, errno: %d, error info: %s\", \\\n\t\t\t__LINE__, errno, STRERROR(errno));\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\treturn errno;\n\t}\n\t\n\tact.sa_handler = SIG_IGN;\n\tif(sigaction(SIGPIPE, &act, NULL) < 0)\n\t{\n\t\tlogCrit(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"call sigaction fail, errno: %d, error info: %s\", \\\n\t\t\t__LINE__, errno, STRERROR(errno));\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\treturn errno;\n\t}\n\n\tact.sa_handler = sigQuitHandler;\n\tif(sigaction(SIGINT, &act, NULL) < 0 || \\\n\t\tsigaction(SIGTERM, &act, NULL) < 0 || \\\n\t\tsigaction(SIGQUIT, &act, NULL) < 0)\n\t{\n\t\tlogCrit(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"call sigaction fail, errno: %d, error info: %s\", \\\n\t\t\t__LINE__, errno, STRERROR(errno));\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\treturn errno;\n\t}\n\n#if defined(DEBUG_FLAG)\n\n/*\n#if defined(OS_LINUX)\n\tmemset(&act, 0, sizeof(act));\n        act.sa_sigaction = sigSegvHandler;\n        act.sa_flags = SA_SIGINFO;\n        if (sigaction(SIGSEGV, &act, NULL) < 0 || \\\n        \tsigaction(SIGABRT, &act, NULL) < 0)\n\t{\n\t\tlogCrit(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"call sigaction fail, errno: %d, error info: %s\", \\\n\t\t\t__LINE__, errno, STRERROR(errno));\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\treturn errno;\n\t}\n#endif\n*/\n\n\tmemset(&act, 0, sizeof(act));\n\tsigemptyset(&act.sa_mask);\n\tact.sa_handler = sigDumpHandler;\n\tif(sigaction(SIGUSR1, &act, NULL) < 0 || \\\n\t\tsigaction(SIGUSR2, &act, NULL) < 0)\n\t{\n\t\tlogCrit(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"call sigaction fail, errno: %d, error info: %s\", \\\n\t\t\t__LINE__, errno, STRERROR(errno));\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\treturn errno;\n\t}\n#endif\n\n#ifdef WITH_HTTPD\n\tif (!g_http_params.disabled)\n\t{\n\t\tif ((result=storage_httpd_start(g_bind_addr)) != 0)\n\t\t{\n\t\t\tlogCrit(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\t\"storage_httpd_start fail, \" \\\n\t\t\t\t\"program exit!\", __LINE__);\n\t\t\treturn result;\n\t\t}\n\t}\n#endif\n\n     // create some child thread, a thread conrresoponds to one tracker server\n\tif ((result=tracker_report_thread_start()) != 0)\n\t{\n\t\tlogCrit(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"tracker_report_thread_start fail, \" \\\n\t\t\t\"program exit!\", __LINE__);\n\t\tg_continue_flag = false;\n\t\tstorage_func_destroy();\n\t\tlog_destroy();\n\t\treturn result;\n\t}\n\n\tscheduleArray.entries = scheduleEntries;\n\tscheduleArray.count = 0;\n\tmemset(scheduleEntries, 0, sizeof(scheduleEntries));\n\n\tINIT_SCHEDULE_ENTRY(scheduleEntries[scheduleArray.count],\n\t\tscheduleArray.count + 1, TIME_NONE, TIME_NONE, TIME_NONE,\n\t\tg_sync_log_buff_interval, log_sync_func, &g_log_context);\n\tscheduleArray.count++;\n\n\tINIT_SCHEDULE_ENTRY(scheduleEntries[scheduleArray.count],\n\t\tscheduleArray.count + 1, TIME_NONE, TIME_NONE, TIME_NONE,\n\t\tg_sync_binlog_buff_interval, fdfs_binlog_sync_func, NULL);\n\tscheduleArray.count++;\n\n\tINIT_SCHEDULE_ENTRY(scheduleEntries[scheduleArray.count],\n\t\tscheduleArray.count + 1, TIME_NONE, TIME_NONE, TIME_NONE,\n\t\tg_sync_stat_file_interval, fdfs_stat_file_sync_func, NULL);\n\tscheduleArray.count++;\n\n\tif (g_if_use_trunk_file)\n\t{\n\t\tINIT_SCHEDULE_ENTRY(scheduleEntries[scheduleArray.count],\n\t\t\tscheduleArray.count + 1, TIME_NONE, TIME_NONE, TIME_NONE,\n\t\t\t1, trunk_binlog_sync_func, NULL);\n\t\tscheduleArray.count++;\n\t}\n\n\tif (g_use_access_log)\n\t{\n\t\tINIT_SCHEDULE_ENTRY(scheduleEntries[scheduleArray.count],\n\t\t\tscheduleArray.count + 1, TIME_NONE, TIME_NONE, TIME_NONE,\n\t\t\tg_sync_log_buff_interval, log_sync_func, &g_access_log_context);\n\t\tscheduleArray.count++;\n\n\t\tif (g_rotate_access_log)\n\t\t{\n\t\t\tINIT_SCHEDULE_ENTRY_EX(scheduleEntries[scheduleArray.count],\n\t\t\t\tscheduleArray.count + 1, g_access_log_rotate_time,\n\t\t\t\t24 * 3600, log_notify_rotate, &g_access_log_context);\n\t\t\tscheduleArray.count++;\n\n\t\t\tif (g_log_file_keep_days > 0)\n\t\t\t{\n\t\t\t\tlog_set_keep_days(&g_access_log_context,\n\t\t\t\t\tg_log_file_keep_days);\n\n\t\t\t\tINIT_SCHEDULE_ENTRY(scheduleEntries[scheduleArray.count],\n\t\t\t\t\tscheduleArray.count + 1, 1, 0, 0, 24 * 3600,\n\t\t\t\t\tlog_delete_old_files, &g_access_log_context);\n\t\t\t\tscheduleArray.count++;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (g_rotate_error_log)\n\t{\n\t\tINIT_SCHEDULE_ENTRY_EX(scheduleEntries[scheduleArray.count],\n\t\t\tscheduleArray.count + 1, g_error_log_rotate_time,\n\t\t\t24 * 3600, log_notify_rotate, &g_log_context);\n\t\tscheduleArray.count++;\n\n\t\tif (g_log_file_keep_days > 0)\n\t\t{\n\t\t\tlog_set_keep_days(&g_log_context, g_log_file_keep_days);\n\n\t\t\tINIT_SCHEDULE_ENTRY(scheduleEntries[scheduleArray.count],\n\t\t\t\tscheduleArray.count + 1, 1, 0, 0, 24 * 3600,\n\t\t\t\tlog_delete_old_files, &g_log_context);\n\t\t\tscheduleArray.count++;\n\t\t}\n\t}\n\n     // create a thread to schedule log_sync_func,fdfs_stat_file_sync_func and so on\n\tif ((result=sched_start(&scheduleArray, &schedule_tid, \\\n\t\tg_thread_stack_size, (bool * volatile)&g_continue_flag)) != 0)\n\t{\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\tlog_destroy();\n\t\treturn result;\n\t}\n\n     // set current group and user of current process\n\tif ((result=set_run_by(g_run_by_group, g_run_by_user)) != 0)\n\t{\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\tlog_destroy();\n\t\treturn result;\n\t}\n\t\n    // create read and write thread: dio_thread_entrance for every store_path,\n    // one path has a read thread and a write thread default\n\tif ((result=storage_dio_init()) != 0)\n\t{\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\tlog_destroy();\n\t\treturn result;\n\t}\n\t\n\tlog_set_cache(true); // set g_log_context.log_to_cache to true\n\n\tbTerminateFlag = false;\n\tbAcceptEndFlag = false;\n\t\n\tstorage_accept_loop(sock); // enter main thread loop, accept to get fd, and wakeup child thread to process\n\tbAcceptEndFlag = true;\n\n\tfdfs_binlog_sync_func(NULL);  //binlog fsync\n\n\tif (g_schedule_flag)\n\t{\n\t\tpthread_kill(schedule_tid, SIGINT);\n\t}\n\n\tstorage_terminate_threads();  // wakeup work thread to quit\n\tstorage_dio_terminate();      // terminate the io thread\n\n\tkill_tracker_report_threads(); // kill report thread\n\tkill_storage_sync_threads();\n\n\twait_count = 0;\n\twhile (g_storage_thread_count != 0 || \\\n\t\tg_dio_thread_count != 0 || \\\n\t\tg_tracker_reporter_count > 0 || \\\n\t\tg_schedule_flag)\n\t{\n/*\n#if defined(DEBUG_FLAG) && defined(OS_LINUX)\n\t\tif (bSegmentFault)\n\t\t{\n\t\t\tsleep(5);\n\t\t\tbreak;\n\t\t}\n#endif\n*/\n\n\t\tusleep(10000);\n\t\tif (++wait_count > 6000)\n\t\t{\n\t\t\tlogWarning(\"waiting timeout, exit!\");\n\t\t\tbreak;\n\t\t}\n\t}\n\n\ttracker_report_destroy();\n\tstorage_service_destroy();\n\tstorage_sync_destroy();\n\tstorage_func_destroy();\n\n\tif (g_if_use_trunk_file)\n\t{\n\t\ttrunk_sync_destroy();\n\t\tstorage_trunk_destroy();\n\t}\n\n\tlogInfo(\"exit normally.\\n\");\n\tlog_destroy();\n\t\n\tdelete_pid_file(pidFilename);\n\treturn 0;\n}\n\n```\n```\n// 主线程函数\n// storage server main thread, accept to get the fd, save some info, and write the address of (struct fast_task_info),\n// it contains the fd\nstatic void *accept_thread_entrance(void* arg)\n{\n\tint server_sock;\n\tint incomesock;\n\tstruct sockaddr_in inaddr;\n\tsocklen_t sockaddr_len;\n\tin_addr_t client_addr;\n\tchar szClientIp[IP_ADDRESS_SIZE];\n\tlong task_addr;\n\tstruct fast_task_info *pTask;\n\tStorageClientInfo *pClientInfo;\n\tstruct storage_nio_thread_data *pThreadData;\n\n\tserver_sock = (long)arg;\n\t\n\twhile (g_continue_flag)\n\t{\n\t\tsockaddr_len = sizeof(inaddr);\n\t\tincomesock = accept(server_sock, (struct sockaddr*)&inaddr, \\\n\t\t\t\t\t&sockaddr_len);\n\t\t\n\t\tif (incomesock < 0) //error\n\t\t{\n\t\t\tif (!(errno == EINTR || errno == EAGAIN))\n\t\t\t{\n\t\t\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\t\t\"accept failed, \" \\\n\t\t\t\t\t\"errno: %d, error info: %s\", \\\n\t\t\t\t\t__LINE__, errno, STRERROR(errno));\n\t\t\t}\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tclient_addr = getPeerIpaddr(incomesock, \\\n\t\t\t\tszClientIp, IP_ADDRESS_SIZE);\n\t\t\n\t\tif (g_allow_ip_count >= 0)\n\t\t{\n\t\t\tif (bsearch(&client_addr, g_allow_ip_addrs, \\\n\t\t\t\t\tg_allow_ip_count, sizeof(in_addr_t), \\\n\t\t\t\t\tcmp_by_ip_addr_t) == NULL)\n\t\t\t{\n\t\t\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\t\t\"ip addr %s is not allowed to access\", \\\n\t\t\t\t\t__LINE__, szClientIp);\n\n\t\t\t\tclose(incomesock);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n        // set non block for fd\n\t\tif (tcpsetnonblockopt(incomesock) != 0)\n\t\t{\n\t\t\tclose(incomesock);\n\t\t\tcontinue;\n\t\t}\n\n\t\tpTask = free_queue_pop(); // get a free task object from free task object pool(g_free_queue)\n\t\t\n\t\tif (pTask == NULL)\n\t\t{\n\t\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\t\"malloc task buff failed\", \\\n\t\t\t\t__LINE__);\n\t\t\tclose(incomesock);\n\t\t\tcontinue;\n\t\t}\n\n\t\tpClientInfo = (StorageClientInfo *)pTask->arg; // pTask->arg is pointer to (StorageClientInfo *), see storage_service_init->free_queue_init_ex func\n\t\tpTask->event.fd = incomesock;\n\t\tpClientInfo->stage = FDFS_STORAGE_STAGE_NIO_INIT; //will be used in storage_recv_notify_read function\n\t\tpClientInfo->nio_thread_index = pTask->event.fd % g_work_threads;\n\t\tpThreadData = g_nio_thread_data + pClientInfo->nio_thread_index;\n\n\t\tstrcpy(pTask->client_ip, szClientIp);\n\n\t\ttask_addr = (long)pTask; // convert address to long, and write the long\n\t\tif (write(pThreadData->thread_data.pipe_fds[1], &task_addr, \\\n\t\t\tsizeof(task_addr)) != sizeof(task_addr))\n\t\t{\n\t\t\tclose(incomesock);\n\t\t\tfree_queue_push(pTask);\n\t\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\t\"call write failed, \" \\\n\t\t\t\t\"errno: %d, error info: %s\", \\\n\t\t\t\t__LINE__, errno, STRERROR(errno));\n\t\t}\n        else\n        {\n            int current_connections;\n            current_connections = __sync_add_and_fetch(&g_storage_stat.connection.\n                    current_count, 1);\n\t\t\t\n            if (current_connections > g_storage_stat.connection.max_count) \n\t\t\t{\n                g_storage_stat.connection.max_count = current_connections;\n            }\n\t\t\t\n            ++g_stat_change_count;\n        }\n\t}\n\n\treturn NULL;\n}\n\n//工作线程函数\n// default is 4 threads to call work_thread_entrance\nstatic void *work_thread_entrance(void* arg)\n{\n\tint result;\n\tstruct storage_nio_thread_data *pThreadData;\n\n\tpThreadData = (struct storage_nio_thread_data *)arg;\n\t\n\tif (g_check_file_duplicate) // check duplicate, here just leave it\n\t{\n\t\tif ((result=fdht_copy_group_array(&(pThreadData->group_array),\\\n\t\t\t\t&g_group_array)) != 0)\n\t\t{\n\t\t\tpthread_mutex_lock(&g_storage_thread_lock);\n\t\t\tg_storage_thread_count--;\n\t\t\tpthread_mutex_unlock(&g_storage_thread_lock);\n\t\t\treturn NULL;\n\t\t}\n\t}\n\t\n\tioevent_loop(&pThreadData->thread_data, storage_recv_notify_read,\n\t\ttask_finish_clean_up, &g_continue_flag);  // epoll wait to listen\n\n\t// free free(ioevent->events) and close(ioevent->poll_fd) \n\tioevent_destroy(&pThreadData->thread_data.ev_puller);\n\n\tif (g_check_file_duplicate)\n\t{\n\t\tif (g_keep_alive)\n\t\t{\n\t\t\tfdht_disconnect_all_servers(&(pThreadData->group_array));\n\t\t}\n\n\t\tfdht_free_group_array(&(pThreadData->group_array));\n\t}\n\n\tif ((result=pthread_mutex_lock(&g_storage_thread_lock)) != 0)\n\t{\n\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"call pthread_mutex_lock fail, \" \\\n\t\t\t\"errno: %d, error info: %s\", \\\n\t\t\t__LINE__, result, STRERROR(result));\n\t}\n\t\n\tg_storage_thread_count--;\n\t\n\tif ((result=pthread_mutex_unlock(&g_storage_thread_lock)) != 0)\n\t{\n\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"call pthread_mutex_lock fail, \" \\\n\t\t\t\"errno: %d, error info: %s\", \\\n\t\t\t__LINE__, result, STRERROR(result));\n\t}\n\n\tlogDebug(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\"nio thread exited, thread count: %d\", \\\n\t\t__LINE__, g_storage_thread_count);\n\n\treturn NULL;\n}\n\nvoid storage_recv_notify_read(int sock, short event, void *arg)\n{\n\tstruct fast_task_info *pTask;\n\tStorageClientInfo *pClientInfo;\n\tlong task_addr;\n\tint64_t remain_bytes;\n\tint bytes;\n\tint result;\n\n\twhile (1)\n\t{         // read a address of buffer, it is the address of (struct fast_task_info), see accept_thread_entrance func\n\t\tif ((bytes=read(sock, &task_addr, sizeof(task_addr))) < 0)\n\t\t{\n\t\t\tif (!(errno == EAGAIN || errno == EWOULDBLOCK))\n\t\t\t{\n\t\t\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\t\t\"call read failed, \" \\\n\t\t\t\t\t\"errno: %d, error info: %s\", \\\n\t\t\t\t\t__LINE__, errno, STRERROR(errno));\n\t\t\t}\n\n\t\t\tbreak;\n\t\t}\n\t\telse if (bytes == 0)\n\t\t{\n\t\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\t\"call read failed, end of file\", __LINE__);\n\t\t\tbreak;\n\t\t}\n\n\t\tpTask = (struct fast_task_info *)task_addr; \n\t\tpClientInfo = (StorageClientInfo *)pTask->arg;\n\n\t\tif (pTask->event.fd < 0)  //quit flag\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\t/* //logInfo(\"=====thread index: %d, pTask->event.fd=%d\", \\\n\t\t\tpClientInfo->nio_thread_index, pTask->event.fd);\n\t\t*/\n\n\t\tif (pClientInfo->stage & FDFS_STORAGE_STAGE_DIO_THREAD)\n\t\t{\n\t\t\tpClientInfo->stage &= ~FDFS_STORAGE_STAGE_DIO_THREAD;\n\t\t}\n\t\t\n\t\tswitch (pClientInfo->stage)\n\t\t{\n\t\t\tcase FDFS_STORAGE_STAGE_NIO_INIT:\n\t\t\t\tresult = storage_nio_init(pTask);\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\tcase FDFS_STORAGE_STAGE_NIO_RECV:\n\t\t\t\tpTask->offset = 0;\n\t\t\t\tremain_bytes = pClientInfo->total_length - \\\n\t\t\t\t\t       pClientInfo->total_offset;\n\t\t\t\t\n\t\t\t\tif (remain_bytes > pTask->size)\n\t\t\t\t{\n\t\t\t\t\tpTask->length = pTask->size;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tpTask->length = remain_bytes;\n\t\t\t\t}\n\n\t\t\t\tif (set_recv_event(pTask) == 0)\n\t\t\t\t{\n\t\t\t\t\tclient_sock_read(pTask->event.fd,\n\t\t\t\t\t\tIOEVENT_READ, pTask);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tresult = 0;\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\tcase FDFS_STORAGE_STAGE_NIO_SEND:\n\t\t\t\tresult = storage_send_add_event(pTask);\n\t\t\t\tbreak;\n\t\t\tcase FDFS_STORAGE_STAGE_NIO_CLOSE:\n\t\t\t\tresult = EIO;   //close this socket\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\t\t\"invalid stage: %d\", __LINE__, \\\n\t\t\t\t\tpClientInfo->stage);\n\t\t\t\tresult = EINVAL;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (result != 0)\n\t\t{\n\t\t\tadd_to_deleted_list(pTask);\n\t\t}\n\t}\n}\n\n```\n","source":"_posts/fastdfs之storage主流程.md","raw":"---\ntitle: fastdfs之storage主流程\ndate: 2016-12-04 17:08:51\ntags: [fastdfs]\n---\n\n## 主要工作\n[相关文章](http://blog.chinaunix.net/uid-20498361-id-3328762.html)\n1）思想：与tracker主流程一样，采用主线程监听得到fd,dispatch子线程（默认4个工作线程）进行处理；\n2）创建的线程数：会创建与tracker server数量相等的report thread,用于向tracker server发送相关信息，会创建4个工作线程用于处理任务，会创建一个调度线程，用于执行一些定期任务，如：log_sync_func，fdfs_binlog_sync_func等，还会创建一些IO读写线程，用于读写目录，默认一个目录有一个读线程和一个写线程，线程函数都为dio_thread_entrance函数；\n3）主要处理过程：主线程往管道写入得到的连接的相关信息（其实是写入一个fast_task_info地址），工作线程会调用storage_recv_notify_read函数得到该地址，然后依据不同的状态进行不同的处理，具体见storage_recv_notify_read函数；\n<!--more-->\n\n## 相关数据结构\n```\nstruct nio_thread_data\n{\n\tstruct ioevent_puller ev_puller; //IO multiplexing function: poll, kqueue \n\tstruct fast_timer timer; // time wheel \n\tint pipe_fds[2]; //to wake up current thread who owns current nio_thread_data\n\tstruct fast_task_info *deleted_list;\n\tThreadLoopCallback thread_loop_callback;\n\tvoid *arg;   //extra argument pointer\n};\n\nstruct storage_nio_thread_data\n{\n\tstruct nio_thread_data thread_data;\n\tGroupArray group_array;  //FastDHT group array\n};\n每个工作线程对应一个storage_nio_thread_data结构\n```\n## 相关代码\n```\n// fdfs_storaged.c->main函数\nint main(int argc, char *argv[])\n{\n\tchar *conf_filename;\n\tint result;\n\tint sock;\n\tint wait_count;\n\tpthread_t schedule_tid;\n\tstruct sigaction act;\n\tScheduleEntry scheduleEntries[SCHEDULE_ENTRIES_MAX_COUNT];\n\tScheduleArray scheduleArray;\n\tchar pidFilename[MAX_PATH_SIZE];\n\tbool stop;\n\n\tif (argc < 2)\n\t{\n\t\tusage(argv[0]);\n\t\treturn 1;\n\t}\n\n\tg_current_time = time(NULL);\n\tg_up_time = g_current_time;\n\n\tlog_init2();  //init the log system\n\ttrunk_shared_init(); // init the g_fdfs_base64_context global variable\n\n\tconf_filename = argv[1];\n\t\n\tif ((result=get_base_path_from_conf_file(conf_filename,\n\t\tg_fdfs_base_path, sizeof(g_fdfs_base_path))) != 0) // get base path from conf_filename\n\t{\n\t\tlog_destroy();\n\t\treturn result;\n\t}\n\n\tsnprintf(pidFilename, sizeof(pidFilename),\n\t\t\"%s/data/fdfs_storaged.pid\", g_fdfs_base_path);\n\t\n\tif ((result=process_action(pidFilename, argv[2], &stop)) != 0)// process command: restart/stop/start\n\t{\n\t\tif (result == EINVAL)\n\t\t{\n\t\t\tusage(argv[0]);\n\t\t}\n\t\t\n\t\tlog_destroy();\n\t\treturn result;\n\t}\n\t\n\tif (stop)\n\t{\n\t\tlog_destroy();\n\t\treturn 0;\n\t}\n\n#if defined(DEBUG_FLAG) && defined(OS_LINUX)\n\tif (getExeAbsoluteFilename(argv[0], g_exe_name, \\\n\t\tsizeof(g_exe_name)) == NULL) //get the absolute path of exe file saved to g_exe_name\n\t{\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\tlog_destroy();\n\t\treturn errno != 0 ? errno : ENOENT;\n\t}\n#endif\n\n\tdaemon_init(false); // set to daemon mode \n\tumask(0);\n\n\tmemset(g_bind_addr, 0, sizeof(g_bind_addr));\n\t\n\tif ((result=storage_func_init(conf_filename, \\\n\t\t\tg_bind_addr, sizeof(g_bind_addr))) != 0) // parse the conf_filename and get some values saved to global variable\n\t{\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\tlog_destroy();\n\t\treturn result;\n\t}\n\n\t//*g_bind_addr = '\\0', g_server_port=23000\n\t// socketServer to finish socket, bind, listen\n\tsock = socketServer(g_bind_addr, g_server_port, &result);\n\t\n\tif (sock < 0)\n\t{\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\tlog_destroy();\n\t\treturn result;\n\t}\n\n\t// tcpsetserveropt: set send/recv timeout and keepalive parameter\n\tif ((result=tcpsetserveropt(sock, g_fdfs_network_timeout)) != 0)\n\t{\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\tlog_destroy();\n\t\treturn result;\n\t}\n\n\tif ((result=write_to_pid_file(pidFilename)) != 0) \n\t{\n\t\tlog_destroy();\n\t\treturn result;\n\t}\n\n\n    // create base_path and the sync path, create file: binlog.000(default), init the sync_thread_lock \n\tif ((result=storage_sync_init()) != 0)\n\t{\n\t\tlogCrit(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"storage_sync_init fail, program exit!\", __LINE__);\n\t\tg_continue_flag = false;\n\t\treturn result;\n\t}\n\n    // init the lock of reporter_thread_lock, clear g_storage_servers and g_sorted_storages\n\tif ((result=tracker_report_init()) != 0)\n\t{\n\t\tlogCrit(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"tracker_report_init fail, program exit!\", __LINE__);\n\t\tg_continue_flag = false;\n\t\treturn result;\n\t}\n\t\n    //create 4 work thread default, init some lock, build a task object(fast_task_info) pool(g_free_queue)\n\tif ((result=storage_service_init()) != 0)\n\t{\n\t\tlogCrit(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"storage_service_init fail, program exit!\", __LINE__);\n\t\tg_continue_flag = false;\n\t\treturn result;\n\t}\n\n    // init the rand generator\n\tif ((result=set_rand_seed()) != 0)\n\t{\n\t\tlogCrit(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"set_rand_seed fail, program exit!\", __LINE__);\n\t\tg_continue_flag = false;\n\t\treturn result;\n\t}\n\n\tmemset(&act, 0, sizeof(act));\n\tsigemptyset(&act.sa_mask);\n\n\tact.sa_handler = sigUsrHandler; // sigUsrHandler do nothing\n\t\n\tif(sigaction(SIGUSR1, &act, NULL) < 0 || \\\n\t\tsigaction(SIGUSR2, &act, NULL) < 0)\n\t{\n\t\tlogCrit(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"call sigaction fail, errno: %d, error info: %s\", \\\n\t\t\t__LINE__, errno, STRERROR(errno));\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\treturn errno;\n\t}\n\n\tact.sa_handler = sigHupHandler; // set g_log_context.rotate_immediately to true\n\t\n\tif(sigaction(SIGHUP, &act, NULL) < 0)\n\t{\n\t\tlogCrit(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"call sigaction fail, errno: %d, error info: %s\", \\\n\t\t\t__LINE__, errno, STRERROR(errno));\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\treturn errno;\n\t}\n\t\n\tact.sa_handler = SIG_IGN;\n\tif(sigaction(SIGPIPE, &act, NULL) < 0)\n\t{\n\t\tlogCrit(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"call sigaction fail, errno: %d, error info: %s\", \\\n\t\t\t__LINE__, errno, STRERROR(errno));\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\treturn errno;\n\t}\n\n\tact.sa_handler = sigQuitHandler;\n\tif(sigaction(SIGINT, &act, NULL) < 0 || \\\n\t\tsigaction(SIGTERM, &act, NULL) < 0 || \\\n\t\tsigaction(SIGQUIT, &act, NULL) < 0)\n\t{\n\t\tlogCrit(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"call sigaction fail, errno: %d, error info: %s\", \\\n\t\t\t__LINE__, errno, STRERROR(errno));\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\treturn errno;\n\t}\n\n#if defined(DEBUG_FLAG)\n\n/*\n#if defined(OS_LINUX)\n\tmemset(&act, 0, sizeof(act));\n        act.sa_sigaction = sigSegvHandler;\n        act.sa_flags = SA_SIGINFO;\n        if (sigaction(SIGSEGV, &act, NULL) < 0 || \\\n        \tsigaction(SIGABRT, &act, NULL) < 0)\n\t{\n\t\tlogCrit(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"call sigaction fail, errno: %d, error info: %s\", \\\n\t\t\t__LINE__, errno, STRERROR(errno));\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\treturn errno;\n\t}\n#endif\n*/\n\n\tmemset(&act, 0, sizeof(act));\n\tsigemptyset(&act.sa_mask);\n\tact.sa_handler = sigDumpHandler;\n\tif(sigaction(SIGUSR1, &act, NULL) < 0 || \\\n\t\tsigaction(SIGUSR2, &act, NULL) < 0)\n\t{\n\t\tlogCrit(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"call sigaction fail, errno: %d, error info: %s\", \\\n\t\t\t__LINE__, errno, STRERROR(errno));\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\treturn errno;\n\t}\n#endif\n\n#ifdef WITH_HTTPD\n\tif (!g_http_params.disabled)\n\t{\n\t\tif ((result=storage_httpd_start(g_bind_addr)) != 0)\n\t\t{\n\t\t\tlogCrit(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\t\"storage_httpd_start fail, \" \\\n\t\t\t\t\"program exit!\", __LINE__);\n\t\t\treturn result;\n\t\t}\n\t}\n#endif\n\n     // create some child thread, a thread conrresoponds to one tracker server\n\tif ((result=tracker_report_thread_start()) != 0)\n\t{\n\t\tlogCrit(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"tracker_report_thread_start fail, \" \\\n\t\t\t\"program exit!\", __LINE__);\n\t\tg_continue_flag = false;\n\t\tstorage_func_destroy();\n\t\tlog_destroy();\n\t\treturn result;\n\t}\n\n\tscheduleArray.entries = scheduleEntries;\n\tscheduleArray.count = 0;\n\tmemset(scheduleEntries, 0, sizeof(scheduleEntries));\n\n\tINIT_SCHEDULE_ENTRY(scheduleEntries[scheduleArray.count],\n\t\tscheduleArray.count + 1, TIME_NONE, TIME_NONE, TIME_NONE,\n\t\tg_sync_log_buff_interval, log_sync_func, &g_log_context);\n\tscheduleArray.count++;\n\n\tINIT_SCHEDULE_ENTRY(scheduleEntries[scheduleArray.count],\n\t\tscheduleArray.count + 1, TIME_NONE, TIME_NONE, TIME_NONE,\n\t\tg_sync_binlog_buff_interval, fdfs_binlog_sync_func, NULL);\n\tscheduleArray.count++;\n\n\tINIT_SCHEDULE_ENTRY(scheduleEntries[scheduleArray.count],\n\t\tscheduleArray.count + 1, TIME_NONE, TIME_NONE, TIME_NONE,\n\t\tg_sync_stat_file_interval, fdfs_stat_file_sync_func, NULL);\n\tscheduleArray.count++;\n\n\tif (g_if_use_trunk_file)\n\t{\n\t\tINIT_SCHEDULE_ENTRY(scheduleEntries[scheduleArray.count],\n\t\t\tscheduleArray.count + 1, TIME_NONE, TIME_NONE, TIME_NONE,\n\t\t\t1, trunk_binlog_sync_func, NULL);\n\t\tscheduleArray.count++;\n\t}\n\n\tif (g_use_access_log)\n\t{\n\t\tINIT_SCHEDULE_ENTRY(scheduleEntries[scheduleArray.count],\n\t\t\tscheduleArray.count + 1, TIME_NONE, TIME_NONE, TIME_NONE,\n\t\t\tg_sync_log_buff_interval, log_sync_func, &g_access_log_context);\n\t\tscheduleArray.count++;\n\n\t\tif (g_rotate_access_log)\n\t\t{\n\t\t\tINIT_SCHEDULE_ENTRY_EX(scheduleEntries[scheduleArray.count],\n\t\t\t\tscheduleArray.count + 1, g_access_log_rotate_time,\n\t\t\t\t24 * 3600, log_notify_rotate, &g_access_log_context);\n\t\t\tscheduleArray.count++;\n\n\t\t\tif (g_log_file_keep_days > 0)\n\t\t\t{\n\t\t\t\tlog_set_keep_days(&g_access_log_context,\n\t\t\t\t\tg_log_file_keep_days);\n\n\t\t\t\tINIT_SCHEDULE_ENTRY(scheduleEntries[scheduleArray.count],\n\t\t\t\t\tscheduleArray.count + 1, 1, 0, 0, 24 * 3600,\n\t\t\t\t\tlog_delete_old_files, &g_access_log_context);\n\t\t\t\tscheduleArray.count++;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (g_rotate_error_log)\n\t{\n\t\tINIT_SCHEDULE_ENTRY_EX(scheduleEntries[scheduleArray.count],\n\t\t\tscheduleArray.count + 1, g_error_log_rotate_time,\n\t\t\t24 * 3600, log_notify_rotate, &g_log_context);\n\t\tscheduleArray.count++;\n\n\t\tif (g_log_file_keep_days > 0)\n\t\t{\n\t\t\tlog_set_keep_days(&g_log_context, g_log_file_keep_days);\n\n\t\t\tINIT_SCHEDULE_ENTRY(scheduleEntries[scheduleArray.count],\n\t\t\t\tscheduleArray.count + 1, 1, 0, 0, 24 * 3600,\n\t\t\t\tlog_delete_old_files, &g_log_context);\n\t\t\tscheduleArray.count++;\n\t\t}\n\t}\n\n     // create a thread to schedule log_sync_func,fdfs_stat_file_sync_func and so on\n\tif ((result=sched_start(&scheduleArray, &schedule_tid, \\\n\t\tg_thread_stack_size, (bool * volatile)&g_continue_flag)) != 0)\n\t{\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\tlog_destroy();\n\t\treturn result;\n\t}\n\n     // set current group and user of current process\n\tif ((result=set_run_by(g_run_by_group, g_run_by_user)) != 0)\n\t{\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\tlog_destroy();\n\t\treturn result;\n\t}\n\t\n    // create read and write thread: dio_thread_entrance for every store_path,\n    // one path has a read thread and a write thread default\n\tif ((result=storage_dio_init()) != 0)\n\t{\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\tlog_destroy();\n\t\treturn result;\n\t}\n\t\n\tlog_set_cache(true); // set g_log_context.log_to_cache to true\n\n\tbTerminateFlag = false;\n\tbAcceptEndFlag = false;\n\t\n\tstorage_accept_loop(sock); // enter main thread loop, accept to get fd, and wakeup child thread to process\n\tbAcceptEndFlag = true;\n\n\tfdfs_binlog_sync_func(NULL);  //binlog fsync\n\n\tif (g_schedule_flag)\n\t{\n\t\tpthread_kill(schedule_tid, SIGINT);\n\t}\n\n\tstorage_terminate_threads();  // wakeup work thread to quit\n\tstorage_dio_terminate();      // terminate the io thread\n\n\tkill_tracker_report_threads(); // kill report thread\n\tkill_storage_sync_threads();\n\n\twait_count = 0;\n\twhile (g_storage_thread_count != 0 || \\\n\t\tg_dio_thread_count != 0 || \\\n\t\tg_tracker_reporter_count > 0 || \\\n\t\tg_schedule_flag)\n\t{\n/*\n#if defined(DEBUG_FLAG) && defined(OS_LINUX)\n\t\tif (bSegmentFault)\n\t\t{\n\t\t\tsleep(5);\n\t\t\tbreak;\n\t\t}\n#endif\n*/\n\n\t\tusleep(10000);\n\t\tif (++wait_count > 6000)\n\t\t{\n\t\t\tlogWarning(\"waiting timeout, exit!\");\n\t\t\tbreak;\n\t\t}\n\t}\n\n\ttracker_report_destroy();\n\tstorage_service_destroy();\n\tstorage_sync_destroy();\n\tstorage_func_destroy();\n\n\tif (g_if_use_trunk_file)\n\t{\n\t\ttrunk_sync_destroy();\n\t\tstorage_trunk_destroy();\n\t}\n\n\tlogInfo(\"exit normally.\\n\");\n\tlog_destroy();\n\t\n\tdelete_pid_file(pidFilename);\n\treturn 0;\n}\n\n```\n```\n// 主线程函数\n// storage server main thread, accept to get the fd, save some info, and write the address of (struct fast_task_info),\n// it contains the fd\nstatic void *accept_thread_entrance(void* arg)\n{\n\tint server_sock;\n\tint incomesock;\n\tstruct sockaddr_in inaddr;\n\tsocklen_t sockaddr_len;\n\tin_addr_t client_addr;\n\tchar szClientIp[IP_ADDRESS_SIZE];\n\tlong task_addr;\n\tstruct fast_task_info *pTask;\n\tStorageClientInfo *pClientInfo;\n\tstruct storage_nio_thread_data *pThreadData;\n\n\tserver_sock = (long)arg;\n\t\n\twhile (g_continue_flag)\n\t{\n\t\tsockaddr_len = sizeof(inaddr);\n\t\tincomesock = accept(server_sock, (struct sockaddr*)&inaddr, \\\n\t\t\t\t\t&sockaddr_len);\n\t\t\n\t\tif (incomesock < 0) //error\n\t\t{\n\t\t\tif (!(errno == EINTR || errno == EAGAIN))\n\t\t\t{\n\t\t\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\t\t\"accept failed, \" \\\n\t\t\t\t\t\"errno: %d, error info: %s\", \\\n\t\t\t\t\t__LINE__, errno, STRERROR(errno));\n\t\t\t}\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tclient_addr = getPeerIpaddr(incomesock, \\\n\t\t\t\tszClientIp, IP_ADDRESS_SIZE);\n\t\t\n\t\tif (g_allow_ip_count >= 0)\n\t\t{\n\t\t\tif (bsearch(&client_addr, g_allow_ip_addrs, \\\n\t\t\t\t\tg_allow_ip_count, sizeof(in_addr_t), \\\n\t\t\t\t\tcmp_by_ip_addr_t) == NULL)\n\t\t\t{\n\t\t\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\t\t\"ip addr %s is not allowed to access\", \\\n\t\t\t\t\t__LINE__, szClientIp);\n\n\t\t\t\tclose(incomesock);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n        // set non block for fd\n\t\tif (tcpsetnonblockopt(incomesock) != 0)\n\t\t{\n\t\t\tclose(incomesock);\n\t\t\tcontinue;\n\t\t}\n\n\t\tpTask = free_queue_pop(); // get a free task object from free task object pool(g_free_queue)\n\t\t\n\t\tif (pTask == NULL)\n\t\t{\n\t\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\t\"malloc task buff failed\", \\\n\t\t\t\t__LINE__);\n\t\t\tclose(incomesock);\n\t\t\tcontinue;\n\t\t}\n\n\t\tpClientInfo = (StorageClientInfo *)pTask->arg; // pTask->arg is pointer to (StorageClientInfo *), see storage_service_init->free_queue_init_ex func\n\t\tpTask->event.fd = incomesock;\n\t\tpClientInfo->stage = FDFS_STORAGE_STAGE_NIO_INIT; //will be used in storage_recv_notify_read function\n\t\tpClientInfo->nio_thread_index = pTask->event.fd % g_work_threads;\n\t\tpThreadData = g_nio_thread_data + pClientInfo->nio_thread_index;\n\n\t\tstrcpy(pTask->client_ip, szClientIp);\n\n\t\ttask_addr = (long)pTask; // convert address to long, and write the long\n\t\tif (write(pThreadData->thread_data.pipe_fds[1], &task_addr, \\\n\t\t\tsizeof(task_addr)) != sizeof(task_addr))\n\t\t{\n\t\t\tclose(incomesock);\n\t\t\tfree_queue_push(pTask);\n\t\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\t\"call write failed, \" \\\n\t\t\t\t\"errno: %d, error info: %s\", \\\n\t\t\t\t__LINE__, errno, STRERROR(errno));\n\t\t}\n        else\n        {\n            int current_connections;\n            current_connections = __sync_add_and_fetch(&g_storage_stat.connection.\n                    current_count, 1);\n\t\t\t\n            if (current_connections > g_storage_stat.connection.max_count) \n\t\t\t{\n                g_storage_stat.connection.max_count = current_connections;\n            }\n\t\t\t\n            ++g_stat_change_count;\n        }\n\t}\n\n\treturn NULL;\n}\n\n//工作线程函数\n// default is 4 threads to call work_thread_entrance\nstatic void *work_thread_entrance(void* arg)\n{\n\tint result;\n\tstruct storage_nio_thread_data *pThreadData;\n\n\tpThreadData = (struct storage_nio_thread_data *)arg;\n\t\n\tif (g_check_file_duplicate) // check duplicate, here just leave it\n\t{\n\t\tif ((result=fdht_copy_group_array(&(pThreadData->group_array),\\\n\t\t\t\t&g_group_array)) != 0)\n\t\t{\n\t\t\tpthread_mutex_lock(&g_storage_thread_lock);\n\t\t\tg_storage_thread_count--;\n\t\t\tpthread_mutex_unlock(&g_storage_thread_lock);\n\t\t\treturn NULL;\n\t\t}\n\t}\n\t\n\tioevent_loop(&pThreadData->thread_data, storage_recv_notify_read,\n\t\ttask_finish_clean_up, &g_continue_flag);  // epoll wait to listen\n\n\t// free free(ioevent->events) and close(ioevent->poll_fd) \n\tioevent_destroy(&pThreadData->thread_data.ev_puller);\n\n\tif (g_check_file_duplicate)\n\t{\n\t\tif (g_keep_alive)\n\t\t{\n\t\t\tfdht_disconnect_all_servers(&(pThreadData->group_array));\n\t\t}\n\n\t\tfdht_free_group_array(&(pThreadData->group_array));\n\t}\n\n\tif ((result=pthread_mutex_lock(&g_storage_thread_lock)) != 0)\n\t{\n\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"call pthread_mutex_lock fail, \" \\\n\t\t\t\"errno: %d, error info: %s\", \\\n\t\t\t__LINE__, result, STRERROR(result));\n\t}\n\t\n\tg_storage_thread_count--;\n\t\n\tif ((result=pthread_mutex_unlock(&g_storage_thread_lock)) != 0)\n\t{\n\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"call pthread_mutex_lock fail, \" \\\n\t\t\t\"errno: %d, error info: %s\", \\\n\t\t\t__LINE__, result, STRERROR(result));\n\t}\n\n\tlogDebug(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\"nio thread exited, thread count: %d\", \\\n\t\t__LINE__, g_storage_thread_count);\n\n\treturn NULL;\n}\n\nvoid storage_recv_notify_read(int sock, short event, void *arg)\n{\n\tstruct fast_task_info *pTask;\n\tStorageClientInfo *pClientInfo;\n\tlong task_addr;\n\tint64_t remain_bytes;\n\tint bytes;\n\tint result;\n\n\twhile (1)\n\t{         // read a address of buffer, it is the address of (struct fast_task_info), see accept_thread_entrance func\n\t\tif ((bytes=read(sock, &task_addr, sizeof(task_addr))) < 0)\n\t\t{\n\t\t\tif (!(errno == EAGAIN || errno == EWOULDBLOCK))\n\t\t\t{\n\t\t\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\t\t\"call read failed, \" \\\n\t\t\t\t\t\"errno: %d, error info: %s\", \\\n\t\t\t\t\t__LINE__, errno, STRERROR(errno));\n\t\t\t}\n\n\t\t\tbreak;\n\t\t}\n\t\telse if (bytes == 0)\n\t\t{\n\t\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\t\"call read failed, end of file\", __LINE__);\n\t\t\tbreak;\n\t\t}\n\n\t\tpTask = (struct fast_task_info *)task_addr; \n\t\tpClientInfo = (StorageClientInfo *)pTask->arg;\n\n\t\tif (pTask->event.fd < 0)  //quit flag\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\t/* //logInfo(\"=====thread index: %d, pTask->event.fd=%d\", \\\n\t\t\tpClientInfo->nio_thread_index, pTask->event.fd);\n\t\t*/\n\n\t\tif (pClientInfo->stage & FDFS_STORAGE_STAGE_DIO_THREAD)\n\t\t{\n\t\t\tpClientInfo->stage &= ~FDFS_STORAGE_STAGE_DIO_THREAD;\n\t\t}\n\t\t\n\t\tswitch (pClientInfo->stage)\n\t\t{\n\t\t\tcase FDFS_STORAGE_STAGE_NIO_INIT:\n\t\t\t\tresult = storage_nio_init(pTask);\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\tcase FDFS_STORAGE_STAGE_NIO_RECV:\n\t\t\t\tpTask->offset = 0;\n\t\t\t\tremain_bytes = pClientInfo->total_length - \\\n\t\t\t\t\t       pClientInfo->total_offset;\n\t\t\t\t\n\t\t\t\tif (remain_bytes > pTask->size)\n\t\t\t\t{\n\t\t\t\t\tpTask->length = pTask->size;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tpTask->length = remain_bytes;\n\t\t\t\t}\n\n\t\t\t\tif (set_recv_event(pTask) == 0)\n\t\t\t\t{\n\t\t\t\t\tclient_sock_read(pTask->event.fd,\n\t\t\t\t\t\tIOEVENT_READ, pTask);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tresult = 0;\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\tcase FDFS_STORAGE_STAGE_NIO_SEND:\n\t\t\t\tresult = storage_send_add_event(pTask);\n\t\t\t\tbreak;\n\t\t\tcase FDFS_STORAGE_STAGE_NIO_CLOSE:\n\t\t\t\tresult = EIO;   //close this socket\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\t\t\"invalid stage: %d\", __LINE__, \\\n\t\t\t\t\tpClientInfo->stage);\n\t\t\t\tresult = EINVAL;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (result != 0)\n\t\t{\n\t\t\tadd_to_deleted_list(pTask);\n\t\t}\n\t}\n}\n\n```\n","slug":"fastdfs之storage主流程","published":1,"updated":"2016-12-04T09:28:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwg2v9i700006al80ft2yd0u","content":"<h2 id=\"主要工作\"><a href=\"#主要工作\" class=\"headerlink\" title=\"主要工作\"></a>主要工作</h2><p><a href=\"http://blog.chinaunix.net/uid-20498361-id-3328762.html\" target=\"_blank\" rel=\"external\">相关文章</a><br>1）思想：与tracker主流程一样，采用主线程监听得到fd,dispatch子线程（默认4个工作线程）进行处理；<br>2）创建的线程数：会创建与tracker server数量相等的report thread,用于向tracker server发送相关信息，会创建4个工作线程用于处理任务，会创建一个调度线程，用于执行一些定期任务，如：log_sync_func，fdfs_binlog_sync_func等，还会创建一些IO读写线程，用于读写目录，默认一个目录有一个读线程和一个写线程，线程函数都为dio_thread_entrance函数；<br>3）主要处理过程：主线程往管道写入得到的连接的相关信息（其实是写入一个fast_task_info地址），工作线程会调用storage_recv_notify_read函数得到该地址，然后依据不同的状态进行不同的处理，具体见storage_recv_notify_read函数；<br><a id=\"more\"></a></p>\n<h2 id=\"相关数据结构\"><a href=\"#相关数据结构\" class=\"headerlink\" title=\"相关数据结构\"></a>相关数据结构</h2><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nio_thread_data</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ioevent_puller</span></span> ev_puller; <span class=\"comment\">//IO multiplexing function: poll, kqueue </span></div><div class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">fast_timer</span></span> timer; <span class=\"comment\">// time wheel </span></div><div class=\"line\">\t<span class=\"keyword\">int</span> pipe_fds[<span class=\"number\">2</span>]; <span class=\"comment\">//to wake up current thread who owns current nio_thread_data</span></div><div class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">fast_task_info</span></span> *deleted_list;</div><div class=\"line\">\tThreadLoopCallback thread_loop_callback;</div><div class=\"line\">\tvoid *arg;   <span class=\"comment\">//extra argument pointer</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">storage_nio_thread_data</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nio_thread_data</span></span> thread_data;</div><div class=\"line\">\tGroupArray group_array;  <span class=\"comment\">//FastDHT group array</span></div><div class=\"line\">&#125;;</div><div class=\"line\">每个工作线程对应一个storage_nio_thread_data结构</div></pre></td></tr></table></figure>\n<h2 id=\"相关代码\"><a href=\"#相关代码\" class=\"headerlink\" title=\"相关代码\"></a>相关代码</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div><div class=\"line\">338</div><div class=\"line\">339</div><div class=\"line\">340</div><div class=\"line\">341</div><div class=\"line\">342</div><div class=\"line\">343</div><div class=\"line\">344</div><div class=\"line\">345</div><div class=\"line\">346</div><div class=\"line\">347</div><div class=\"line\">348</div><div class=\"line\">349</div><div class=\"line\">350</div><div class=\"line\">351</div><div class=\"line\">352</div><div class=\"line\">353</div><div class=\"line\">354</div><div class=\"line\">355</div><div class=\"line\">356</div><div class=\"line\">357</div><div class=\"line\">358</div><div class=\"line\">359</div><div class=\"line\">360</div><div class=\"line\">361</div><div class=\"line\">362</div><div class=\"line\">363</div><div class=\"line\">364</div><div class=\"line\">365</div><div class=\"line\">366</div><div class=\"line\">367</div><div class=\"line\">368</div><div class=\"line\">369</div><div class=\"line\">370</div><div class=\"line\">371</div><div class=\"line\">372</div><div class=\"line\">373</div><div class=\"line\">374</div><div class=\"line\">375</div><div class=\"line\">376</div><div class=\"line\">377</div><div class=\"line\">378</div><div class=\"line\">379</div><div class=\"line\">380</div><div class=\"line\">381</div><div class=\"line\">382</div><div class=\"line\">383</div><div class=\"line\">384</div><div class=\"line\">385</div><div class=\"line\">386</div><div class=\"line\">387</div><div class=\"line\">388</div><div class=\"line\">389</div><div class=\"line\">390</div><div class=\"line\">391</div><div class=\"line\">392</div><div class=\"line\">393</div><div class=\"line\">394</div><div class=\"line\">395</div><div class=\"line\">396</div><div class=\"line\">397</div><div class=\"line\">398</div><div class=\"line\">399</div><div class=\"line\">400</div><div class=\"line\">401</div><div class=\"line\">402</div><div class=\"line\">403</div><div class=\"line\">404</div><div class=\"line\">405</div><div class=\"line\">406</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// fdfs_storaged.c-&gt;main函数</span></div><div class=\"line\">int main(int argc, char *argv[])</div><div class=\"line\">&#123;</div><div class=\"line\">\tchar *conf_filename;</div><div class=\"line\">\tint result;</div><div class=\"line\">\tint sock;</div><div class=\"line\">\tint wait_count;</div><div class=\"line\">\tpthread_t schedule_tid;</div><div class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sigaction</span> <span class=\"title\">act</span>;</span></div><div class=\"line\">\t<span class=\"title\">ScheduleEntry</span> <span class=\"title\">scheduleEntries</span>[<span class=\"title\">SCHEDULE_ENTRIES_MAX_COUNT</span>];</div><div class=\"line\">\t<span class=\"title\">ScheduleArray</span> <span class=\"title\">scheduleArray</span>;</div><div class=\"line\">\t<span class=\"title\">char</span> <span class=\"title\">pidFilename</span>[<span class=\"title\">MAX_PATH_SIZE</span>];</div><div class=\"line\">\t<span class=\"title\">bool</span> <span class=\"title\">stop</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"title\">if</span> (<span class=\"title\">argc</span> &lt; 2)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tusage(argv[<span class=\"number\">0</span>]);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tg_current_time = time(<span class=\"type\">NULL</span>);</div><div class=\"line\">\tg_up_time = g_current_time;</div><div class=\"line\"></div><div class=\"line\">\tlog_init2();  <span class=\"comment\">//init the log system</span></div><div class=\"line\">\ttrunk_shared_init(); <span class=\"comment\">// init the g_fdfs_base64_context global variable</span></div><div class=\"line\"></div><div class=\"line\">\tconf_filename = argv[<span class=\"number\">1</span>];</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=get_base_path_from_conf_file(conf_filename,</div><div class=\"line\">\t\tg_fdfs_base_path, <span class=\"built_in\">sizeof</span>(g_fdfs_base_path))) != <span class=\"number\">0</span>) <span class=\"comment\">// get base path from conf_filename</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlog_destroy();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tsnprintf(pidFilename, <span class=\"built_in\">sizeof</span>(pidFilename),</div><div class=\"line\">\t\t<span class=\"string\">\"%s/data/fdfs_storaged.pid\"</span>, g_fdfs_base_path);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=process_action(pidFilename, argv[<span class=\"number\">2</span>], &amp;stop)) != <span class=\"number\">0</span>)<span class=\"comment\">// process command: restart/stop/start</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (result == <span class=\"type\">EINVAL</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tusage(argv[<span class=\"number\">0</span>]);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tlog_destroy();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (stop)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlog_destroy();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">#<span class=\"keyword\">if</span> defined(<span class=\"type\">DEBUG_FLAG</span>) &amp;&amp; defined(<span class=\"type\">OS_LINUX</span>)</div><div class=\"line\">\t<span class=\"keyword\">if</span> (getExeAbsoluteFilename(argv[<span class=\"number\">0</span>], g_exe_name, \\</div><div class=\"line\">\t\t<span class=\"built_in\">sizeof</span>(g_exe_name)) == <span class=\"type\">NULL</span>) <span class=\"comment\">//get the absolute path of exe file saved to g_exe_name</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"exit abnormally!\\n\"</span>);</div><div class=\"line\">\t\tlog_destroy();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> errno != <span class=\"number\">0</span> ? errno : <span class=\"type\">ENOENT</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">#endif</div><div class=\"line\"></div><div class=\"line\">\tdaemon_init(<span class=\"literal\">false</span>); <span class=\"comment\">// set to daemon mode </span></div><div class=\"line\">\tumask(<span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">\tmemset(g_bind_addr, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(g_bind_addr));</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=storage_func_init(conf_filename, \\</div><div class=\"line\">\t\t\tg_bind_addr, <span class=\"built_in\">sizeof</span>(g_bind_addr))) != <span class=\"number\">0</span>) <span class=\"comment\">// parse the conf_filename and get some values saved to global variable</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"exit abnormally!\\n\"</span>);</div><div class=\"line\">\t\tlog_destroy();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//*g_bind_addr = '\\0', g_server_port=23000</span></div><div class=\"line\">\t<span class=\"comment\">// socketServer to finish socket, bind, listen</span></div><div class=\"line\">\tsock = socketServer(g_bind_addr, g_server_port, &amp;result);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (sock &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"exit abnormally!\\n\"</span>);</div><div class=\"line\">\t\tlog_destroy();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// tcpsetserveropt: set send/recv timeout and keepalive parameter</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=tcpsetserveropt(sock, g_fdfs_network_timeout)) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"exit abnormally!\\n\"</span>);</div><div class=\"line\">\t\tlog_destroy();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=write_to_pid_file(pidFilename)) != <span class=\"number\">0</span>) </div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlog_destroy();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// create base_path and the sync path, create file: binlog.000(default), init the sync_thread_lock </span></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=storage_sync_init()) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"storage_sync_init fail, program exit!\"</span>, <span class=\"keyword\">__LINE__</span>);</div><div class=\"line\">\t\tg_continue_flag = <span class=\"literal\">false</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// init the lock of reporter_thread_lock, clear g_storage_servers and g_sorted_storages</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=tracker_report_init()) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"tracker_report_init fail, program exit!\"</span>, <span class=\"keyword\">__LINE__</span>);</div><div class=\"line\">\t\tg_continue_flag = <span class=\"literal\">false</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"comment\">//create 4 work thread default, init some lock, build a task object(fast_task_info) pool(g_free_queue)</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=storage_service_init()) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"storage_service_init fail, program exit!\"</span>, <span class=\"keyword\">__LINE__</span>);</div><div class=\"line\">\t\tg_continue_flag = <span class=\"literal\">false</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// init the rand generator</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=set_rand_seed()) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"set_rand_seed fail, program exit!\"</span>, <span class=\"keyword\">__LINE__</span>);</div><div class=\"line\">\t\tg_continue_flag = <span class=\"literal\">false</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tmemset(&amp;act, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(act));</div><div class=\"line\">\tsigemptyset(&amp;act.sa_mask);</div><div class=\"line\"></div><div class=\"line\">\tact.sa_handler = sigUsrHandler; <span class=\"comment\">// sigUsrHandler do nothing</span></div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span>(sigaction(<span class=\"type\">SIGUSR1</span>, &amp;act, <span class=\"type\">NULL</span>) &lt; <span class=\"number\">0</span> || \\</div><div class=\"line\">\t\tsigaction(<span class=\"type\">SIGUSR2</span>, &amp;act, <span class=\"type\">NULL</span>) &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"call sigaction fail, errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t<span class=\"keyword\">__LINE__</span>, errno, <span class=\"type\">STRERROR</span>(errno));</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"exit abnormally!\\n\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> errno;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tact.sa_handler = sigHupHandler; <span class=\"comment\">// set g_log_context.rotate_immediately to true</span></div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span>(sigaction(<span class=\"type\">SIGHUP</span>, &amp;act, <span class=\"type\">NULL</span>) &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"call sigaction fail, errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t<span class=\"keyword\">__LINE__</span>, errno, <span class=\"type\">STRERROR</span>(errno));</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"exit abnormally!\\n\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> errno;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tact.sa_handler = <span class=\"type\">SIG_IGN</span>;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(sigaction(<span class=\"type\">SIGPIPE</span>, &amp;act, <span class=\"type\">NULL</span>) &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"call sigaction fail, errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t<span class=\"keyword\">__LINE__</span>, errno, <span class=\"type\">STRERROR</span>(errno));</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"exit abnormally!\\n\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> errno;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tact.sa_handler = sigQuitHandler;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(sigaction(<span class=\"type\">SIGINT</span>, &amp;act, <span class=\"type\">NULL</span>) &lt; <span class=\"number\">0</span> || \\</div><div class=\"line\">\t\tsigaction(<span class=\"type\">SIGTERM</span>, &amp;act, <span class=\"type\">NULL</span>) &lt; <span class=\"number\">0</span> || \\</div><div class=\"line\">\t\tsigaction(<span class=\"type\">SIGQUIT</span>, &amp;act, <span class=\"type\">NULL</span>) &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"call sigaction fail, errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t<span class=\"keyword\">__LINE__</span>, errno, <span class=\"type\">STRERROR</span>(errno));</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"exit abnormally!\\n\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> errno;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">#<span class=\"keyword\">if</span> defined(<span class=\"type\">DEBUG_FLAG</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">#if defined(OS_LINUX)</div><div class=\"line\">\tmemset(&amp;act, 0, sizeof(act));</div><div class=\"line\">        act.sa_sigaction = sigSegvHandler;</div><div class=\"line\">        act.sa_flags = SA_SIGINFO;</div><div class=\"line\">        if (sigaction(SIGSEGV, &amp;act, NULL) &lt; 0 || \\</div><div class=\"line\">        \tsigaction(SIGABRT, &amp;act, NULL) &lt; 0)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(\"file: \"__FILE__\", line: %d, \" \\</div><div class=\"line\">\t\t\t\"call sigaction fail, errno: %d, error info: %s\", \\</div><div class=\"line\">\t\t\t__LINE__, errno, STRERROR(errno));</div><div class=\"line\">\t\tlogCrit(\"exit abnormally!\\n\");</div><div class=\"line\">\t\treturn errno;</div><div class=\"line\">\t&#125;</div><div class=\"line\">#endif</div><div class=\"line\">*/</div><div class=\"line\"></div><div class=\"line\">\tmemset(&amp;act, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(act));</div><div class=\"line\">\tsigemptyset(&amp;act.sa_mask);</div><div class=\"line\">\tact.sa_handler = sigDumpHandler;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(sigaction(<span class=\"type\">SIGUSR1</span>, &amp;act, <span class=\"type\">NULL</span>) &lt; <span class=\"number\">0</span> || \\</div><div class=\"line\">\t\tsigaction(<span class=\"type\">SIGUSR2</span>, &amp;act, <span class=\"type\">NULL</span>) &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"call sigaction fail, errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t<span class=\"keyword\">__LINE__</span>, errno, <span class=\"type\">STRERROR</span>(errno));</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"exit abnormally!\\n\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> errno;</div><div class=\"line\">\t&#125;</div><div class=\"line\">#endif</div><div class=\"line\"></div><div class=\"line\">#ifdef <span class=\"type\">WITH_HTTPD</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> (!g_http_params.disabled)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((result=storage_httpd_start(g_bind_addr)) != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tlogCrit(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t\t<span class=\"string\">\"storage_httpd_start fail, \"</span> \\</div><div class=\"line\">\t\t\t\t<span class=\"string\">\"program exit!\"</span>, <span class=\"keyword\">__LINE__</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">#endif</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\">// create some child thread, a thread conrresoponds to one tracker server</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=tracker_report_thread_start()) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"tracker_report_thread_start fail, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"program exit!\"</span>, <span class=\"keyword\">__LINE__</span>);</div><div class=\"line\">\t\tg_continue_flag = <span class=\"literal\">false</span>;</div><div class=\"line\">\t\tstorage_func_destroy();</div><div class=\"line\">\t\tlog_destroy();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tscheduleArray.entries = scheduleEntries;</div><div class=\"line\">\tscheduleArray.<span class=\"built_in\">count</span> = <span class=\"number\">0</span>;</div><div class=\"line\">\tmemset(scheduleEntries, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(scheduleEntries));</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"type\">INIT_SCHEDULE_ENTRY</span>(scheduleEntries[scheduleArray.<span class=\"built_in\">count</span>],</div><div class=\"line\">\t\tscheduleArray.<span class=\"built_in\">count</span> + <span class=\"number\">1</span>, <span class=\"type\">TIME_NONE</span>, <span class=\"type\">TIME_NONE</span>, <span class=\"type\">TIME_NONE</span>,</div><div class=\"line\">\t\tg_sync_log_buff_interval, log_sync_func, &amp;g_log_context);</div><div class=\"line\">\tscheduleArray.<span class=\"built_in\">count</span>++;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"type\">INIT_SCHEDULE_ENTRY</span>(scheduleEntries[scheduleArray.<span class=\"built_in\">count</span>],</div><div class=\"line\">\t\tscheduleArray.<span class=\"built_in\">count</span> + <span class=\"number\">1</span>, <span class=\"type\">TIME_NONE</span>, <span class=\"type\">TIME_NONE</span>, <span class=\"type\">TIME_NONE</span>,</div><div class=\"line\">\t\tg_sync_binlog_buff_interval, fdfs_binlog_sync_func, <span class=\"type\">NULL</span>);</div><div class=\"line\">\tscheduleArray.<span class=\"built_in\">count</span>++;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"type\">INIT_SCHEDULE_ENTRY</span>(scheduleEntries[scheduleArray.<span class=\"built_in\">count</span>],</div><div class=\"line\">\t\tscheduleArray.<span class=\"built_in\">count</span> + <span class=\"number\">1</span>, <span class=\"type\">TIME_NONE</span>, <span class=\"type\">TIME_NONE</span>, <span class=\"type\">TIME_NONE</span>,</div><div class=\"line\">\t\tg_sync_stat_file_interval, fdfs_stat_file_sync_func, <span class=\"type\">NULL</span>);</div><div class=\"line\">\tscheduleArray.<span class=\"built_in\">count</span>++;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (g_if_use_trunk_file)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"type\">INIT_SCHEDULE_ENTRY</span>(scheduleEntries[scheduleArray.<span class=\"built_in\">count</span>],</div><div class=\"line\">\t\t\tscheduleArray.<span class=\"built_in\">count</span> + <span class=\"number\">1</span>, <span class=\"type\">TIME_NONE</span>, <span class=\"type\">TIME_NONE</span>, <span class=\"type\">TIME_NONE</span>,</div><div class=\"line\">\t\t\t<span class=\"number\">1</span>, trunk_binlog_sync_func, <span class=\"type\">NULL</span>);</div><div class=\"line\">\t\tscheduleArray.<span class=\"built_in\">count</span>++;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (g_use_access_log)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"type\">INIT_SCHEDULE_ENTRY</span>(scheduleEntries[scheduleArray.<span class=\"built_in\">count</span>],</div><div class=\"line\">\t\t\tscheduleArray.<span class=\"built_in\">count</span> + <span class=\"number\">1</span>, <span class=\"type\">TIME_NONE</span>, <span class=\"type\">TIME_NONE</span>, <span class=\"type\">TIME_NONE</span>,</div><div class=\"line\">\t\t\tg_sync_log_buff_interval, log_sync_func, &amp;g_access_log_context);</div><div class=\"line\">\t\tscheduleArray.<span class=\"built_in\">count</span>++;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (g_rotate_access_log)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"type\">INIT_SCHEDULE_ENTRY_EX</span>(scheduleEntries[scheduleArray.<span class=\"built_in\">count</span>],</div><div class=\"line\">\t\t\t\tscheduleArray.<span class=\"built_in\">count</span> + <span class=\"number\">1</span>, g_access_log_rotate_time,</div><div class=\"line\">\t\t\t\t<span class=\"number\">24</span> * <span class=\"number\">3600</span>, log_notify_rotate, &amp;g_access_log_context);</div><div class=\"line\">\t\t\tscheduleArray.<span class=\"built_in\">count</span>++;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (g_log_file_keep_days &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tlog_set_keep_days(&amp;g_access_log_context,</div><div class=\"line\">\t\t\t\t\tg_log_file_keep_days);</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t<span class=\"type\">INIT_SCHEDULE_ENTRY</span>(scheduleEntries[scheduleArray.<span class=\"built_in\">count</span>],</div><div class=\"line\">\t\t\t\t\tscheduleArray.<span class=\"built_in\">count</span> + <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">24</span> * <span class=\"number\">3600</span>,</div><div class=\"line\">\t\t\t\t\tlog_delete_old_files, &amp;g_access_log_context);</div><div class=\"line\">\t\t\t\tscheduleArray.<span class=\"built_in\">count</span>++;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (g_rotate_error_log)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"type\">INIT_SCHEDULE_ENTRY_EX</span>(scheduleEntries[scheduleArray.<span class=\"built_in\">count</span>],</div><div class=\"line\">\t\t\tscheduleArray.<span class=\"built_in\">count</span> + <span class=\"number\">1</span>, g_error_log_rotate_time,</div><div class=\"line\">\t\t\t<span class=\"number\">24</span> * <span class=\"number\">3600</span>, log_notify_rotate, &amp;g_log_context);</div><div class=\"line\">\t\tscheduleArray.<span class=\"built_in\">count</span>++;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (g_log_file_keep_days &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tlog_set_keep_days(&amp;g_log_context, g_log_file_keep_days);</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"type\">INIT_SCHEDULE_ENTRY</span>(scheduleEntries[scheduleArray.<span class=\"built_in\">count</span>],</div><div class=\"line\">\t\t\t\tscheduleArray.<span class=\"built_in\">count</span> + <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">24</span> * <span class=\"number\">3600</span>,</div><div class=\"line\">\t\t\t\tlog_delete_old_files, &amp;g_log_context);</div><div class=\"line\">\t\t\tscheduleArray.<span class=\"built_in\">count</span>++;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\">// create a thread to schedule log_sync_func,fdfs_stat_file_sync_func and so on</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=sched_start(&amp;scheduleArray, &amp;schedule_tid, \\</div><div class=\"line\">\t\tg_thread_stack_size, (bool * volatile)&amp;g_continue_flag)) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"exit abnormally!\\n\"</span>);</div><div class=\"line\">\t\tlog_destroy();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\">// set current group and user of current process</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=set_run_by(g_run_by_group, g_run_by_user)) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"exit abnormally!\\n\"</span>);</div><div class=\"line\">\t\tlog_destroy();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"comment\">// create read and write thread: dio_thread_entrance for every store_path,</span></div><div class=\"line\">    <span class=\"comment\">// one path has a read thread and a write thread default</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=storage_dio_init()) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"exit abnormally!\\n\"</span>);</div><div class=\"line\">\t\tlog_destroy();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tlog_set_cache(<span class=\"literal\">true</span>); <span class=\"comment\">// set g_log_context.log_to_cache to true</span></div><div class=\"line\"></div><div class=\"line\">\tbTerminateFlag = <span class=\"literal\">false</span>;</div><div class=\"line\">\tbAcceptEndFlag = <span class=\"literal\">false</span>;</div><div class=\"line\">\t</div><div class=\"line\">\tstorage_accept_loop(sock); <span class=\"comment\">// enter main thread loop, accept to get fd, and wakeup child thread to process</span></div><div class=\"line\">\tbAcceptEndFlag = <span class=\"literal\">true</span>;</div><div class=\"line\"></div><div class=\"line\">\tfdfs_binlog_sync_func(<span class=\"type\">NULL</span>);  <span class=\"comment\">//binlog fsync</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (g_schedule_flag)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tpthread_kill(schedule_tid, <span class=\"type\">SIGINT</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tstorage_terminate_threads();  <span class=\"comment\">// wakeup work thread to quit</span></div><div class=\"line\">\tstorage_dio_terminate();      <span class=\"comment\">// terminate the io thread</span></div><div class=\"line\"></div><div class=\"line\">\tkill_tracker_report_threads(); <span class=\"comment\">// kill report thread</span></div><div class=\"line\">\tkill_storage_sync_threads();</div><div class=\"line\"></div><div class=\"line\">\twait_count = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (g_storage_thread_count != <span class=\"number\">0</span> || \\</div><div class=\"line\">\t\tg_dio_thread_count != <span class=\"number\">0</span> || \\</div><div class=\"line\">\t\tg_tracker_reporter_count &gt; <span class=\"number\">0</span> || \\</div><div class=\"line\">\t\tg_schedule_flag)</div><div class=\"line\">\t&#123;</div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">#if defined(DEBUG_FLAG) &amp;&amp; defined(OS_LINUX)</div><div class=\"line\">\t\tif (bSegmentFault)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tsleep(5);</div><div class=\"line\">\t\t\tbreak;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">#endif</div><div class=\"line\">*/</div><div class=\"line\"></div><div class=\"line\">\t\tusleep(<span class=\"number\">10000</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (++wait_count &gt; <span class=\"number\">6000</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tlogWarning(<span class=\"string\">\"waiting timeout, exit!\"</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\ttracker_report_destroy();</div><div class=\"line\">\tstorage_service_destroy();</div><div class=\"line\">\tstorage_sync_destroy();</div><div class=\"line\">\tstorage_func_destroy();</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (g_if_use_trunk_file)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\ttrunk_sync_destroy();</div><div class=\"line\">\t\tstorage_trunk_destroy();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tlogInfo(<span class=\"string\">\"exit normally.\\n\"</span>);</div><div class=\"line\">\tlog_destroy();</div><div class=\"line\">\t</div><div class=\"line\">\tdelete_pid_file(pidFilename);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 主线程函数</span></div><div class=\"line\"><span class=\"comment\">// storage server main thread, accept to get the fd, save some info, and write the address of (struct fast_task_info),</span></div><div class=\"line\"><span class=\"comment\">// it contains the fd</span></div><div class=\"line\"><span class=\"keyword\">static</span> void *accept_thread_entrance(void* arg)</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> server_sock;</div><div class=\"line\">\t<span class=\"keyword\">int</span> incomesock;</div><div class=\"line\">\tstruct sockaddr_in inaddr;</div><div class=\"line\">\tsocklen_t sockaddr_len;</div><div class=\"line\">\tin_addr_t client_addr;</div><div class=\"line\">\t<span class=\"keyword\">char</span> szClientIp[IP_ADDRESS_SIZE];</div><div class=\"line\">\t<span class=\"keyword\">long</span> task_addr;</div><div class=\"line\">\tstruct fast_task_info *pTask;</div><div class=\"line\">\tStorageClientInfo *pClientInfo;</div><div class=\"line\">\tstruct storage_nio_thread_data *pThreadData;</div><div class=\"line\"></div><div class=\"line\">\tserver_sock = (<span class=\"keyword\">long</span>)arg;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">while</span> (g_continue_flag)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tsockaddr_len = sizeof(inaddr);</div><div class=\"line\">\t\tincomesock = accept(server_sock, (struct sockaddr*)&amp;inaddr, \\</div><div class=\"line\">\t\t\t\t\t&amp;sockaddr_len);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (incomesock &lt; <span class=\"number\">0</span>) <span class=\"comment\">//error</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!(errno == EINTR || errno == EAGAIN))</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">\"accept failed, \"</span> \\</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">\"errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">__LINE__</span>, errno, STRERROR(errno));</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tclient_addr = getPeerIpaddr(incomesock, \\</div><div class=\"line\">\t\t\t\tszClientIp, IP_ADDRESS_SIZE);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (g_allow_ip_count &gt;= <span class=\"number\">0</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (bsearch(&amp;client_addr, g_allow_ip_addrs, \\</div><div class=\"line\">\t\t\t\t\tg_allow_ip_count, sizeof(in_addr_t), \\</div><div class=\"line\">\t\t\t\t\tcmp_by_ip_addr_t) == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">\"ip addr %s is not allowed to access\"</span>, \\</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">__LINE__</span>, szClientIp);</div><div class=\"line\"></div><div class=\"line\">\t\t\t\tclose(incomesock);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// set non block for fd</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (tcpsetnonblockopt(incomesock) != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tclose(incomesock);</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tpTask = free_queue_pop(); <span class=\"comment\">// get a free task object from free task object pool(g_free_queue)</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (pTask == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t\t<span class=\"string\">\"malloc task buff failed\"</span>, \\</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">__LINE__</span>);</div><div class=\"line\">\t\t\tclose(incomesock);</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tpClientInfo = (StorageClientInfo *)pTask-&gt;arg; <span class=\"comment\">// pTask-&gt;arg is pointer to (StorageClientInfo *), see storage_service_init-&gt;free_queue_init_ex func</span></div><div class=\"line\">\t\tpTask-&gt;event.fd = incomesock;</div><div class=\"line\">\t\tpClientInfo-&gt;stage = FDFS_STORAGE_STAGE_NIO_INIT; <span class=\"comment\">//will be used in storage_recv_notify_read function</span></div><div class=\"line\">\t\tpClientInfo-&gt;nio_thread_index = pTask-&gt;event.fd % g_work_threads;</div><div class=\"line\">\t\tpThreadData = g_nio_thread_data + pClientInfo-&gt;nio_thread_index;</div><div class=\"line\"></div><div class=\"line\">\t\tstrcpy(pTask-&gt;client_ip, szClientIp);</div><div class=\"line\"></div><div class=\"line\">\t\ttask_addr = (<span class=\"keyword\">long</span>)pTask; <span class=\"comment\">// convert address to long, and write the long</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (write(pThreadData-&gt;thread_data.pipe_fds[<span class=\"number\">1</span>], &amp;task_addr, \\</div><div class=\"line\">\t\t\tsizeof(task_addr)) != sizeof(task_addr))</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tclose(incomesock);</div><div class=\"line\">\t\t\tfree_queue_push(pTask);</div><div class=\"line\">\t\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t\t<span class=\"string\">\"call write failed, \"</span> \\</div><div class=\"line\">\t\t\t\t<span class=\"string\">\"errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">__LINE__</span>, errno, STRERROR(errno));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> current_connections;</div><div class=\"line\">            current_connections = __sync_add_and_fetch(&amp;g_storage_stat.connection.</div><div class=\"line\">                    current_count, <span class=\"number\">1</span>);</div><div class=\"line\">\t\t\t</div><div class=\"line\">            <span class=\"keyword\">if</span> (current_connections &gt; g_storage_stat.connection.max_count) </div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">                g_storage_stat.connection.max_count = current_connections;</div><div class=\"line\">            &#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">            ++g_stat_change_count;</div><div class=\"line\">        &#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">NULL</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//工作线程函数</span></div><div class=\"line\"><span class=\"comment\">// default is 4 threads to call work_thread_entrance</span></div><div class=\"line\"><span class=\"keyword\">static</span> void *work_thread_entrance(void* arg)</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> result;</div><div class=\"line\">\tstruct storage_nio_thread_data *pThreadData;</div><div class=\"line\"></div><div class=\"line\">\tpThreadData = (struct storage_nio_thread_data *)arg;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (g_check_file_duplicate) <span class=\"comment\">// check duplicate, here just leave it</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((result=fdht_copy_group_array(&amp;(pThreadData-&gt;group_array),\\</div><div class=\"line\">\t\t\t\t&amp;g_group_array)) != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tpthread_mutex_lock(&amp;g_storage_thread_lock);</div><div class=\"line\">\t\t\tg_storage_thread_count--;</div><div class=\"line\">\t\t\tpthread_mutex_unlock(&amp;g_storage_thread_lock);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">NULL</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tioevent_loop(&amp;pThreadData-&gt;thread_data, storage_recv_notify_read,</div><div class=\"line\">\t\ttask_finish_clean_up, &amp;g_continue_flag);  <span class=\"comment\">// epoll wait to listen</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// free free(ioevent-&gt;events) and close(ioevent-&gt;poll_fd) </span></div><div class=\"line\">\tioevent_destroy(&amp;pThreadData-&gt;thread_data.ev_puller);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (g_check_file_duplicate)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (g_keep_alive)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tfdht_disconnect_all_servers(&amp;(pThreadData-&gt;group_array));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tfdht_free_group_array(&amp;(pThreadData-&gt;group_array));</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=pthread_mutex_lock(&amp;g_storage_thread_lock)) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"call pthread_mutex_lock fail, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t<span class=\"keyword\">__LINE__</span>, result, STRERROR(result));</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tg_storage_thread_count--;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=pthread_mutex_unlock(&amp;g_storage_thread_lock)) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"call pthread_mutex_lock fail, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t<span class=\"keyword\">__LINE__</span>, result, STRERROR(result));</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tlogDebug(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t<span class=\"string\">\"nio thread exited, thread count: %d\"</span>, \\</div><div class=\"line\">\t\t<span class=\"keyword\">__LINE__</span>, g_storage_thread_count);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">NULL</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">void storage_recv_notify_read(<span class=\"keyword\">int</span> sock, short event, void *arg)</div><div class=\"line\">&#123;</div><div class=\"line\">\tstruct fast_task_info *pTask;</div><div class=\"line\">\tStorageClientInfo *pClientInfo;</div><div class=\"line\">\t<span class=\"keyword\">long</span> task_addr;</div><div class=\"line\">\tint64_t remain_bytes;</div><div class=\"line\">\t<span class=\"keyword\">int</span> bytes;</div><div class=\"line\">\t<span class=\"keyword\">int</span> result;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</div><div class=\"line\">\t&#123;         <span class=\"comment\">// read a address of buffer, it is the address of (struct fast_task_info), see accept_thread_entrance func</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((bytes=read(sock, &amp;task_addr, sizeof(task_addr))) &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!(errno == EAGAIN || errno == EWOULDBLOCK))</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">\"call read failed, \"</span> \\</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">\"errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">__LINE__</span>, errno, STRERROR(errno));</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (bytes == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t\t<span class=\"string\">\"call read failed, end of file\"</span>, <span class=\"keyword\">__LINE__</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tpTask = (struct fast_task_info *)task_addr; </div><div class=\"line\">\t\tpClientInfo = (StorageClientInfo *)pTask-&gt;arg;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (pTask-&gt;event.fd &lt; <span class=\"number\">0</span>)  <span class=\"comment\">//quit flag</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">/* //logInfo(\"=====thread index: %d, pTask-&gt;event.fd=%d\", \\</span></div><div class=\"line\">\t\t\tpClientInfo-&gt;nio_thread_index, pTask-&gt;event.fd);</div><div class=\"line\">\t\t*/</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (pClientInfo-&gt;stage &amp; FDFS_STORAGE_STAGE_DIO_THREAD)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tpClientInfo-&gt;stage &amp;= ~FDFS_STORAGE_STAGE_DIO_THREAD;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">switch</span> (pClientInfo-&gt;stage)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">case</span> FDFS_STORAGE_STAGE_NIO_INIT:</div><div class=\"line\">\t\t\t\tresult = storage_nio_init(pTask);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">case</span> FDFS_STORAGE_STAGE_NIO_RECV:</div><div class=\"line\">\t\t\t\tpTask-&gt;offset = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\tremain_bytes = pClientInfo-&gt;total_length - \\</div><div class=\"line\">\t\t\t\t\t       pClientInfo-&gt;total_offset;</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (remain_bytes &gt; pTask-&gt;size)</div><div class=\"line\">\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\tpTask-&gt;length = pTask-&gt;size;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\tpTask-&gt;length = remain_bytes;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (set_recv_event(pTask) == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\tclient_sock_read(pTask-&gt;event.fd,</div><div class=\"line\">\t\t\t\t\t\tIOEVENT_READ, pTask);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\tresult = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">case</span> FDFS_STORAGE_STAGE_NIO_SEND:</div><div class=\"line\">\t\t\t\tresult = storage_send_add_event(pTask);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">case</span> FDFS_STORAGE_STAGE_NIO_CLOSE:</div><div class=\"line\">\t\t\t\tresult = EIO;   <span class=\"comment\">//close this socket</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">default</span>:</div><div class=\"line\">\t\t\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">\"invalid stage: %d\"</span>, <span class=\"keyword\">__LINE__</span>, \\</div><div class=\"line\">\t\t\t\t\tpClientInfo-&gt;stage);</div><div class=\"line\">\t\t\t\tresult = EINVAL;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (result != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tadd_to_deleted_list(pTask);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"<h2 id=\"主要工作\"><a href=\"#主要工作\" class=\"headerlink\" title=\"主要工作\"></a>主要工作</h2><p><a href=\"http://blog.chinaunix.net/uid-20498361-id-3328762.html\">相关文章</a><br>1）思想：与tracker主流程一样，采用主线程监听得到fd,dispatch子线程（默认4个工作线程）进行处理；<br>2）创建的线程数：会创建与tracker server数量相等的report thread,用于向tracker server发送相关信息，会创建4个工作线程用于处理任务，会创建一个调度线程，用于执行一些定期任务，如：log_sync_func，fdfs_binlog_sync_func等，还会创建一些IO读写线程，用于读写目录，默认一个目录有一个读线程和一个写线程，线程函数都为dio_thread_entrance函数；<br>3）主要处理过程：主线程往管道写入得到的连接的相关信息（其实是写入一个fast_task_info地址），工作线程会调用storage_recv_notify_read函数得到该地址，然后依据不同的状态进行不同的处理，具体见storage_recv_notify_read函数；<br>","more":"</p>\n<h2 id=\"相关数据结构\"><a href=\"#相关数据结构\" class=\"headerlink\" title=\"相关数据结构\"></a>相关数据结构</h2><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nio_thread_data</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ioevent_puller</span></span> ev_puller; <span class=\"comment\">//IO multiplexing function: poll, kqueue </span></div><div class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">fast_timer</span></span> timer; <span class=\"comment\">// time wheel </span></div><div class=\"line\">\t<span class=\"keyword\">int</span> pipe_fds[<span class=\"number\">2</span>]; <span class=\"comment\">//to wake up current thread who owns current nio_thread_data</span></div><div class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">fast_task_info</span></span> *deleted_list;</div><div class=\"line\">\tThreadLoopCallback thread_loop_callback;</div><div class=\"line\">\tvoid *arg;   <span class=\"comment\">//extra argument pointer</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">storage_nio_thread_data</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nio_thread_data</span></span> thread_data;</div><div class=\"line\">\tGroupArray group_array;  <span class=\"comment\">//FastDHT group array</span></div><div class=\"line\">&#125;;</div><div class=\"line\">每个工作线程对应一个storage_nio_thread_data结构</div></pre></td></tr></table></figure>\n<h2 id=\"相关代码\"><a href=\"#相关代码\" class=\"headerlink\" title=\"相关代码\"></a>相关代码</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div><div class=\"line\">338</div><div class=\"line\">339</div><div class=\"line\">340</div><div class=\"line\">341</div><div class=\"line\">342</div><div class=\"line\">343</div><div class=\"line\">344</div><div class=\"line\">345</div><div class=\"line\">346</div><div class=\"line\">347</div><div class=\"line\">348</div><div class=\"line\">349</div><div class=\"line\">350</div><div class=\"line\">351</div><div class=\"line\">352</div><div class=\"line\">353</div><div class=\"line\">354</div><div class=\"line\">355</div><div class=\"line\">356</div><div class=\"line\">357</div><div class=\"line\">358</div><div class=\"line\">359</div><div class=\"line\">360</div><div class=\"line\">361</div><div class=\"line\">362</div><div class=\"line\">363</div><div class=\"line\">364</div><div class=\"line\">365</div><div class=\"line\">366</div><div class=\"line\">367</div><div class=\"line\">368</div><div class=\"line\">369</div><div class=\"line\">370</div><div class=\"line\">371</div><div class=\"line\">372</div><div class=\"line\">373</div><div class=\"line\">374</div><div class=\"line\">375</div><div class=\"line\">376</div><div class=\"line\">377</div><div class=\"line\">378</div><div class=\"line\">379</div><div class=\"line\">380</div><div class=\"line\">381</div><div class=\"line\">382</div><div class=\"line\">383</div><div class=\"line\">384</div><div class=\"line\">385</div><div class=\"line\">386</div><div class=\"line\">387</div><div class=\"line\">388</div><div class=\"line\">389</div><div class=\"line\">390</div><div class=\"line\">391</div><div class=\"line\">392</div><div class=\"line\">393</div><div class=\"line\">394</div><div class=\"line\">395</div><div class=\"line\">396</div><div class=\"line\">397</div><div class=\"line\">398</div><div class=\"line\">399</div><div class=\"line\">400</div><div class=\"line\">401</div><div class=\"line\">402</div><div class=\"line\">403</div><div class=\"line\">404</div><div class=\"line\">405</div><div class=\"line\">406</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// fdfs_storaged.c-&gt;main函数</span></div><div class=\"line\">int main(int argc, char *argv[])</div><div class=\"line\">&#123;</div><div class=\"line\">\tchar *conf_filename;</div><div class=\"line\">\tint result;</div><div class=\"line\">\tint sock;</div><div class=\"line\">\tint wait_count;</div><div class=\"line\">\tpthread_t schedule_tid;</div><div class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sigaction</span> <span class=\"title\">act</span>;</div><div class=\"line\">\t<span class=\"title\">ScheduleEntry</span> <span class=\"title\">scheduleEntries</span>[<span class=\"title\">SCHEDULE_ENTRIES_MAX_COUNT</span>];</div><div class=\"line\">\t<span class=\"title\">ScheduleArray</span> <span class=\"title\">scheduleArray</span>;</div><div class=\"line\">\t<span class=\"title\">char</span> <span class=\"title\">pidFilename</span>[<span class=\"title\">MAX_PATH_SIZE</span>];</div><div class=\"line\">\t<span class=\"title\">bool</span> <span class=\"title\">stop</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"title\">if</span> (<span class=\"title\">argc</span> &lt; 2)</div><div class=\"line\">\t</span>&#123;</div><div class=\"line\">\t\tusage(argv[<span class=\"number\">0</span>]);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tg_current_time = time(<span class=\"type\">NULL</span>);</div><div class=\"line\">\tg_up_time = g_current_time;</div><div class=\"line\"></div><div class=\"line\">\tlog_init2();  <span class=\"comment\">//init the log system</span></div><div class=\"line\">\ttrunk_shared_init(); <span class=\"comment\">// init the g_fdfs_base64_context global variable</span></div><div class=\"line\"></div><div class=\"line\">\tconf_filename = argv[<span class=\"number\">1</span>];</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=get_base_path_from_conf_file(conf_filename,</div><div class=\"line\">\t\tg_fdfs_base_path, <span class=\"built_in\">sizeof</span>(g_fdfs_base_path))) != <span class=\"number\">0</span>) <span class=\"comment\">// get base path from conf_filename</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlog_destroy();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tsnprintf(pidFilename, <span class=\"built_in\">sizeof</span>(pidFilename),</div><div class=\"line\">\t\t<span class=\"string\">\"%s/data/fdfs_storaged.pid\"</span>, g_fdfs_base_path);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=process_action(pidFilename, argv[<span class=\"number\">2</span>], &amp;stop)) != <span class=\"number\">0</span>)<span class=\"comment\">// process command: restart/stop/start</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (result == <span class=\"type\">EINVAL</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tusage(argv[<span class=\"number\">0</span>]);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tlog_destroy();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (stop)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlog_destroy();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">#<span class=\"keyword\">if</span> defined(<span class=\"type\">DEBUG_FLAG</span>) &amp;&amp; defined(<span class=\"type\">OS_LINUX</span>)</div><div class=\"line\">\t<span class=\"keyword\">if</span> (getExeAbsoluteFilename(argv[<span class=\"number\">0</span>], g_exe_name, \\</div><div class=\"line\">\t\t<span class=\"built_in\">sizeof</span>(g_exe_name)) == <span class=\"type\">NULL</span>) <span class=\"comment\">//get the absolute path of exe file saved to g_exe_name</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"exit abnormally!\\n\"</span>);</div><div class=\"line\">\t\tlog_destroy();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> errno != <span class=\"number\">0</span> ? errno : <span class=\"type\">ENOENT</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">#endif</div><div class=\"line\"></div><div class=\"line\">\tdaemon_init(<span class=\"literal\">false</span>); <span class=\"comment\">// set to daemon mode </span></div><div class=\"line\">\tumask(<span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">\tmemset(g_bind_addr, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(g_bind_addr));</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=storage_func_init(conf_filename, \\</div><div class=\"line\">\t\t\tg_bind_addr, <span class=\"built_in\">sizeof</span>(g_bind_addr))) != <span class=\"number\">0</span>) <span class=\"comment\">// parse the conf_filename and get some values saved to global variable</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"exit abnormally!\\n\"</span>);</div><div class=\"line\">\t\tlog_destroy();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//*g_bind_addr = '\\0', g_server_port=23000</span></div><div class=\"line\">\t<span class=\"comment\">// socketServer to finish socket, bind, listen</span></div><div class=\"line\">\tsock = socketServer(g_bind_addr, g_server_port, &amp;result);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (sock &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"exit abnormally!\\n\"</span>);</div><div class=\"line\">\t\tlog_destroy();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// tcpsetserveropt: set send/recv timeout and keepalive parameter</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=tcpsetserveropt(sock, g_fdfs_network_timeout)) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"exit abnormally!\\n\"</span>);</div><div class=\"line\">\t\tlog_destroy();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=write_to_pid_file(pidFilename)) != <span class=\"number\">0</span>) </div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlog_destroy();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// create base_path and the sync path, create file: binlog.000(default), init the sync_thread_lock </span></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=storage_sync_init()) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"storage_sync_init fail, program exit!\"</span>, <span class=\"keyword\">__LINE__</span>);</div><div class=\"line\">\t\tg_continue_flag = <span class=\"literal\">false</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// init the lock of reporter_thread_lock, clear g_storage_servers and g_sorted_storages</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=tracker_report_init()) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"tracker_report_init fail, program exit!\"</span>, <span class=\"keyword\">__LINE__</span>);</div><div class=\"line\">\t\tg_continue_flag = <span class=\"literal\">false</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"comment\">//create 4 work thread default, init some lock, build a task object(fast_task_info) pool(g_free_queue)</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=storage_service_init()) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"storage_service_init fail, program exit!\"</span>, <span class=\"keyword\">__LINE__</span>);</div><div class=\"line\">\t\tg_continue_flag = <span class=\"literal\">false</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// init the rand generator</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=set_rand_seed()) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"set_rand_seed fail, program exit!\"</span>, <span class=\"keyword\">__LINE__</span>);</div><div class=\"line\">\t\tg_continue_flag = <span class=\"literal\">false</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tmemset(&amp;act, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(act));</div><div class=\"line\">\tsigemptyset(&amp;act.sa_mask);</div><div class=\"line\"></div><div class=\"line\">\tact.sa_handler = sigUsrHandler; <span class=\"comment\">// sigUsrHandler do nothing</span></div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span>(sigaction(<span class=\"type\">SIGUSR1</span>, &amp;act, <span class=\"type\">NULL</span>) &lt; <span class=\"number\">0</span> || \\</div><div class=\"line\">\t\tsigaction(<span class=\"type\">SIGUSR2</span>, &amp;act, <span class=\"type\">NULL</span>) &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"call sigaction fail, errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t<span class=\"keyword\">__LINE__</span>, errno, <span class=\"type\">STRERROR</span>(errno));</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"exit abnormally!\\n\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> errno;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tact.sa_handler = sigHupHandler; <span class=\"comment\">// set g_log_context.rotate_immediately to true</span></div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span>(sigaction(<span class=\"type\">SIGHUP</span>, &amp;act, <span class=\"type\">NULL</span>) &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"call sigaction fail, errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t<span class=\"keyword\">__LINE__</span>, errno, <span class=\"type\">STRERROR</span>(errno));</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"exit abnormally!\\n\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> errno;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tact.sa_handler = <span class=\"type\">SIG_IGN</span>;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(sigaction(<span class=\"type\">SIGPIPE</span>, &amp;act, <span class=\"type\">NULL</span>) &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"call sigaction fail, errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t<span class=\"keyword\">__LINE__</span>, errno, <span class=\"type\">STRERROR</span>(errno));</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"exit abnormally!\\n\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> errno;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tact.sa_handler = sigQuitHandler;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(sigaction(<span class=\"type\">SIGINT</span>, &amp;act, <span class=\"type\">NULL</span>) &lt; <span class=\"number\">0</span> || \\</div><div class=\"line\">\t\tsigaction(<span class=\"type\">SIGTERM</span>, &amp;act, <span class=\"type\">NULL</span>) &lt; <span class=\"number\">0</span> || \\</div><div class=\"line\">\t\tsigaction(<span class=\"type\">SIGQUIT</span>, &amp;act, <span class=\"type\">NULL</span>) &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"call sigaction fail, errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t<span class=\"keyword\">__LINE__</span>, errno, <span class=\"type\">STRERROR</span>(errno));</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"exit abnormally!\\n\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> errno;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">#<span class=\"keyword\">if</span> defined(<span class=\"type\">DEBUG_FLAG</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\">#if defined(OS_LINUX)</div><div class=\"line\">\tmemset(&amp;act, 0, sizeof(act));</div><div class=\"line\">        act.sa_sigaction = sigSegvHandler;</div><div class=\"line\">        act.sa_flags = SA_SIGINFO;</div><div class=\"line\">        if (sigaction(SIGSEGV, &amp;act, NULL) &lt; 0 || \\</div><div class=\"line\">        \tsigaction(SIGABRT, &amp;act, NULL) &lt; 0)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(\"file: \"__FILE__\", line: %d, \" \\</div><div class=\"line\">\t\t\t\"call sigaction fail, errno: %d, error info: %s\", \\</div><div class=\"line\">\t\t\t__LINE__, errno, STRERROR(errno));</div><div class=\"line\">\t\tlogCrit(\"exit abnormally!\\n\");</div><div class=\"line\">\t\treturn errno;</div><div class=\"line\">\t&#125;</div><div class=\"line\">#endif</div><div class=\"line\">*/</span></div><div class=\"line\"></div><div class=\"line\">\tmemset(&amp;act, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(act));</div><div class=\"line\">\tsigemptyset(&amp;act.sa_mask);</div><div class=\"line\">\tact.sa_handler = sigDumpHandler;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(sigaction(<span class=\"type\">SIGUSR1</span>, &amp;act, <span class=\"type\">NULL</span>) &lt; <span class=\"number\">0</span> || \\</div><div class=\"line\">\t\tsigaction(<span class=\"type\">SIGUSR2</span>, &amp;act, <span class=\"type\">NULL</span>) &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"call sigaction fail, errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t<span class=\"keyword\">__LINE__</span>, errno, <span class=\"type\">STRERROR</span>(errno));</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"exit abnormally!\\n\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> errno;</div><div class=\"line\">\t&#125;</div><div class=\"line\">#endif</div><div class=\"line\"></div><div class=\"line\">#ifdef <span class=\"type\">WITH_HTTPD</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> (!g_http_params.disabled)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((result=storage_httpd_start(g_bind_addr)) != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tlogCrit(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t\t<span class=\"string\">\"storage_httpd_start fail, \"</span> \\</div><div class=\"line\">\t\t\t\t<span class=\"string\">\"program exit!\"</span>, <span class=\"keyword\">__LINE__</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">#endif</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\">// create some child thread, a thread conrresoponds to one tracker server</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=tracker_report_thread_start()) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"tracker_report_thread_start fail, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"program exit!\"</span>, <span class=\"keyword\">__LINE__</span>);</div><div class=\"line\">\t\tg_continue_flag = <span class=\"literal\">false</span>;</div><div class=\"line\">\t\tstorage_func_destroy();</div><div class=\"line\">\t\tlog_destroy();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tscheduleArray.entries = scheduleEntries;</div><div class=\"line\">\tscheduleArray.<span class=\"built_in\">count</span> = <span class=\"number\">0</span>;</div><div class=\"line\">\tmemset(scheduleEntries, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(scheduleEntries));</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"type\">INIT_SCHEDULE_ENTRY</span>(scheduleEntries[scheduleArray.<span class=\"built_in\">count</span>],</div><div class=\"line\">\t\tscheduleArray.<span class=\"built_in\">count</span> + <span class=\"number\">1</span>, <span class=\"type\">TIME_NONE</span>, <span class=\"type\">TIME_NONE</span>, <span class=\"type\">TIME_NONE</span>,</div><div class=\"line\">\t\tg_sync_log_buff_interval, log_sync_func, &amp;g_log_context);</div><div class=\"line\">\tscheduleArray.<span class=\"built_in\">count</span>++;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"type\">INIT_SCHEDULE_ENTRY</span>(scheduleEntries[scheduleArray.<span class=\"built_in\">count</span>],</div><div class=\"line\">\t\tscheduleArray.<span class=\"built_in\">count</span> + <span class=\"number\">1</span>, <span class=\"type\">TIME_NONE</span>, <span class=\"type\">TIME_NONE</span>, <span class=\"type\">TIME_NONE</span>,</div><div class=\"line\">\t\tg_sync_binlog_buff_interval, fdfs_binlog_sync_func, <span class=\"type\">NULL</span>);</div><div class=\"line\">\tscheduleArray.<span class=\"built_in\">count</span>++;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"type\">INIT_SCHEDULE_ENTRY</span>(scheduleEntries[scheduleArray.<span class=\"built_in\">count</span>],</div><div class=\"line\">\t\tscheduleArray.<span class=\"built_in\">count</span> + <span class=\"number\">1</span>, <span class=\"type\">TIME_NONE</span>, <span class=\"type\">TIME_NONE</span>, <span class=\"type\">TIME_NONE</span>,</div><div class=\"line\">\t\tg_sync_stat_file_interval, fdfs_stat_file_sync_func, <span class=\"type\">NULL</span>);</div><div class=\"line\">\tscheduleArray.<span class=\"built_in\">count</span>++;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (g_if_use_trunk_file)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"type\">INIT_SCHEDULE_ENTRY</span>(scheduleEntries[scheduleArray.<span class=\"built_in\">count</span>],</div><div class=\"line\">\t\t\tscheduleArray.<span class=\"built_in\">count</span> + <span class=\"number\">1</span>, <span class=\"type\">TIME_NONE</span>, <span class=\"type\">TIME_NONE</span>, <span class=\"type\">TIME_NONE</span>,</div><div class=\"line\">\t\t\t<span class=\"number\">1</span>, trunk_binlog_sync_func, <span class=\"type\">NULL</span>);</div><div class=\"line\">\t\tscheduleArray.<span class=\"built_in\">count</span>++;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (g_use_access_log)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"type\">INIT_SCHEDULE_ENTRY</span>(scheduleEntries[scheduleArray.<span class=\"built_in\">count</span>],</div><div class=\"line\">\t\t\tscheduleArray.<span class=\"built_in\">count</span> + <span class=\"number\">1</span>, <span class=\"type\">TIME_NONE</span>, <span class=\"type\">TIME_NONE</span>, <span class=\"type\">TIME_NONE</span>,</div><div class=\"line\">\t\t\tg_sync_log_buff_interval, log_sync_func, &amp;g_access_log_context);</div><div class=\"line\">\t\tscheduleArray.<span class=\"built_in\">count</span>++;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (g_rotate_access_log)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"type\">INIT_SCHEDULE_ENTRY_EX</span>(scheduleEntries[scheduleArray.<span class=\"built_in\">count</span>],</div><div class=\"line\">\t\t\t\tscheduleArray.<span class=\"built_in\">count</span> + <span class=\"number\">1</span>, g_access_log_rotate_time,</div><div class=\"line\">\t\t\t\t<span class=\"number\">24</span> * <span class=\"number\">3600</span>, log_notify_rotate, &amp;g_access_log_context);</div><div class=\"line\">\t\t\tscheduleArray.<span class=\"built_in\">count</span>++;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (g_log_file_keep_days &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tlog_set_keep_days(&amp;g_access_log_context,</div><div class=\"line\">\t\t\t\t\tg_log_file_keep_days);</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t<span class=\"type\">INIT_SCHEDULE_ENTRY</span>(scheduleEntries[scheduleArray.<span class=\"built_in\">count</span>],</div><div class=\"line\">\t\t\t\t\tscheduleArray.<span class=\"built_in\">count</span> + <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">24</span> * <span class=\"number\">3600</span>,</div><div class=\"line\">\t\t\t\t\tlog_delete_old_files, &amp;g_access_log_context);</div><div class=\"line\">\t\t\t\tscheduleArray.<span class=\"built_in\">count</span>++;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (g_rotate_error_log)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"type\">INIT_SCHEDULE_ENTRY_EX</span>(scheduleEntries[scheduleArray.<span class=\"built_in\">count</span>],</div><div class=\"line\">\t\t\tscheduleArray.<span class=\"built_in\">count</span> + <span class=\"number\">1</span>, g_error_log_rotate_time,</div><div class=\"line\">\t\t\t<span class=\"number\">24</span> * <span class=\"number\">3600</span>, log_notify_rotate, &amp;g_log_context);</div><div class=\"line\">\t\tscheduleArray.<span class=\"built_in\">count</span>++;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (g_log_file_keep_days &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tlog_set_keep_days(&amp;g_log_context, g_log_file_keep_days);</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"type\">INIT_SCHEDULE_ENTRY</span>(scheduleEntries[scheduleArray.<span class=\"built_in\">count</span>],</div><div class=\"line\">\t\t\t\tscheduleArray.<span class=\"built_in\">count</span> + <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">24</span> * <span class=\"number\">3600</span>,</div><div class=\"line\">\t\t\t\tlog_delete_old_files, &amp;g_log_context);</div><div class=\"line\">\t\t\tscheduleArray.<span class=\"built_in\">count</span>++;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\">// create a thread to schedule log_sync_func,fdfs_stat_file_sync_func and so on</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=sched_start(&amp;scheduleArray, &amp;schedule_tid, \\</div><div class=\"line\">\t\tg_thread_stack_size, (bool * volatile)&amp;g_continue_flag)) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"exit abnormally!\\n\"</span>);</div><div class=\"line\">\t\tlog_destroy();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\">// set current group and user of current process</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=set_run_by(g_run_by_group, g_run_by_user)) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"exit abnormally!\\n\"</span>);</div><div class=\"line\">\t\tlog_destroy();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"comment\">// create read and write thread: dio_thread_entrance for every store_path,</span></div><div class=\"line\">    <span class=\"comment\">// one path has a read thread and a write thread default</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=storage_dio_init()) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"exit abnormally!\\n\"</span>);</div><div class=\"line\">\t\tlog_destroy();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tlog_set_cache(<span class=\"literal\">true</span>); <span class=\"comment\">// set g_log_context.log_to_cache to true</span></div><div class=\"line\"></div><div class=\"line\">\tbTerminateFlag = <span class=\"literal\">false</span>;</div><div class=\"line\">\tbAcceptEndFlag = <span class=\"literal\">false</span>;</div><div class=\"line\">\t</div><div class=\"line\">\tstorage_accept_loop(sock); <span class=\"comment\">// enter main thread loop, accept to get fd, and wakeup child thread to process</span></div><div class=\"line\">\tbAcceptEndFlag = <span class=\"literal\">true</span>;</div><div class=\"line\"></div><div class=\"line\">\tfdfs_binlog_sync_func(<span class=\"type\">NULL</span>);  <span class=\"comment\">//binlog fsync</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (g_schedule_flag)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tpthread_kill(schedule_tid, <span class=\"type\">SIGINT</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tstorage_terminate_threads();  <span class=\"comment\">// wakeup work thread to quit</span></div><div class=\"line\">\tstorage_dio_terminate();      <span class=\"comment\">// terminate the io thread</span></div><div class=\"line\"></div><div class=\"line\">\tkill_tracker_report_threads(); <span class=\"comment\">// kill report thread</span></div><div class=\"line\">\tkill_storage_sync_threads();</div><div class=\"line\"></div><div class=\"line\">\twait_count = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (g_storage_thread_count != <span class=\"number\">0</span> || \\</div><div class=\"line\">\t\tg_dio_thread_count != <span class=\"number\">0</span> || \\</div><div class=\"line\">\t\tg_tracker_reporter_count &gt; <span class=\"number\">0</span> || \\</div><div class=\"line\">\t\tg_schedule_flag)</div><div class=\"line\">\t&#123;</div><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\">#if defined(DEBUG_FLAG) &amp;&amp; defined(OS_LINUX)</div><div class=\"line\">\t\tif (bSegmentFault)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tsleep(5);</div><div class=\"line\">\t\t\tbreak;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">#endif</div><div class=\"line\">*/</span></div><div class=\"line\"></div><div class=\"line\">\t\tusleep(<span class=\"number\">10000</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (++wait_count &gt; <span class=\"number\">6000</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tlogWarning(<span class=\"string\">\"waiting timeout, exit!\"</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\ttracker_report_destroy();</div><div class=\"line\">\tstorage_service_destroy();</div><div class=\"line\">\tstorage_sync_destroy();</div><div class=\"line\">\tstorage_func_destroy();</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (g_if_use_trunk_file)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\ttrunk_sync_destroy();</div><div class=\"line\">\t\tstorage_trunk_destroy();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tlogInfo(<span class=\"string\">\"exit normally.\\n\"</span>);</div><div class=\"line\">\tlog_destroy();</div><div class=\"line\">\t</div><div class=\"line\">\tdelete_pid_file(pidFilename);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 主线程函数</span></div><div class=\"line\"><span class=\"comment\">// storage server main thread, accept to get the fd, save some info, and write the address of (struct fast_task_info),</span></div><div class=\"line\"><span class=\"comment\">// it contains the fd</span></div><div class=\"line\"><span class=\"keyword\">static</span> void *accept_thread_entrance(void* arg)</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> server_sock;</div><div class=\"line\">\t<span class=\"keyword\">int</span> incomesock;</div><div class=\"line\">\tstruct sockaddr_in inaddr;</div><div class=\"line\">\tsocklen_t sockaddr_len;</div><div class=\"line\">\tin_addr_t client_addr;</div><div class=\"line\">\t<span class=\"keyword\">char</span> szClientIp[IP_ADDRESS_SIZE];</div><div class=\"line\">\t<span class=\"keyword\">long</span> task_addr;</div><div class=\"line\">\tstruct fast_task_info *pTask;</div><div class=\"line\">\tStorageClientInfo *pClientInfo;</div><div class=\"line\">\tstruct storage_nio_thread_data *pThreadData;</div><div class=\"line\"></div><div class=\"line\">\tserver_sock = (<span class=\"keyword\">long</span>)arg;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">while</span> (g_continue_flag)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tsockaddr_len = sizeof(inaddr);</div><div class=\"line\">\t\tincomesock = accept(server_sock, (struct sockaddr*)&amp;inaddr, \\</div><div class=\"line\">\t\t\t\t\t&amp;sockaddr_len);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (incomesock &lt; <span class=\"number\">0</span>) <span class=\"comment\">//error</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!(errno == EINTR || errno == EAGAIN))</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">\"accept failed, \"</span> \\</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">\"errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">__LINE__</span>, errno, STRERROR(errno));</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tclient_addr = getPeerIpaddr(incomesock, \\</div><div class=\"line\">\t\t\t\tszClientIp, IP_ADDRESS_SIZE);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (g_allow_ip_count &gt;= <span class=\"number\">0</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (bsearch(&amp;client_addr, g_allow_ip_addrs, \\</div><div class=\"line\">\t\t\t\t\tg_allow_ip_count, sizeof(in_addr_t), \\</div><div class=\"line\">\t\t\t\t\tcmp_by_ip_addr_t) == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">\"ip addr %s is not allowed to access\"</span>, \\</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">__LINE__</span>, szClientIp);</div><div class=\"line\"></div><div class=\"line\">\t\t\t\tclose(incomesock);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// set non block for fd</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (tcpsetnonblockopt(incomesock) != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tclose(incomesock);</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tpTask = free_queue_pop(); <span class=\"comment\">// get a free task object from free task object pool(g_free_queue)</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (pTask == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t\t<span class=\"string\">\"malloc task buff failed\"</span>, \\</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">__LINE__</span>);</div><div class=\"line\">\t\t\tclose(incomesock);</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tpClientInfo = (StorageClientInfo *)pTask-&gt;arg; <span class=\"comment\">// pTask-&gt;arg is pointer to (StorageClientInfo *), see storage_service_init-&gt;free_queue_init_ex func</span></div><div class=\"line\">\t\tpTask-&gt;event.fd = incomesock;</div><div class=\"line\">\t\tpClientInfo-&gt;stage = FDFS_STORAGE_STAGE_NIO_INIT; <span class=\"comment\">//will be used in storage_recv_notify_read function</span></div><div class=\"line\">\t\tpClientInfo-&gt;nio_thread_index = pTask-&gt;event.fd % g_work_threads;</div><div class=\"line\">\t\tpThreadData = g_nio_thread_data + pClientInfo-&gt;nio_thread_index;</div><div class=\"line\"></div><div class=\"line\">\t\tstrcpy(pTask-&gt;client_ip, szClientIp);</div><div class=\"line\"></div><div class=\"line\">\t\ttask_addr = (<span class=\"keyword\">long</span>)pTask; <span class=\"comment\">// convert address to long, and write the long</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (write(pThreadData-&gt;thread_data.pipe_fds[<span class=\"number\">1</span>], &amp;task_addr, \\</div><div class=\"line\">\t\t\tsizeof(task_addr)) != sizeof(task_addr))</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tclose(incomesock);</div><div class=\"line\">\t\t\tfree_queue_push(pTask);</div><div class=\"line\">\t\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t\t<span class=\"string\">\"call write failed, \"</span> \\</div><div class=\"line\">\t\t\t\t<span class=\"string\">\"errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">__LINE__</span>, errno, STRERROR(errno));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> current_connections;</div><div class=\"line\">            current_connections = __sync_add_and_fetch(&amp;g_storage_stat.connection.</div><div class=\"line\">                    current_count, <span class=\"number\">1</span>);</div><div class=\"line\">\t\t\t</div><div class=\"line\">            <span class=\"keyword\">if</span> (current_connections &gt; g_storage_stat.connection.max_count) </div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">                g_storage_stat.connection.max_count = current_connections;</div><div class=\"line\">            &#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">            ++g_stat_change_count;</div><div class=\"line\">        &#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">NULL</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//工作线程函数</span></div><div class=\"line\"><span class=\"comment\">// default is 4 threads to call work_thread_entrance</span></div><div class=\"line\"><span class=\"keyword\">static</span> void *work_thread_entrance(void* arg)</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> result;</div><div class=\"line\">\tstruct storage_nio_thread_data *pThreadData;</div><div class=\"line\"></div><div class=\"line\">\tpThreadData = (struct storage_nio_thread_data *)arg;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (g_check_file_duplicate) <span class=\"comment\">// check duplicate, here just leave it</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((result=fdht_copy_group_array(&amp;(pThreadData-&gt;group_array),\\</div><div class=\"line\">\t\t\t\t&amp;g_group_array)) != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tpthread_mutex_lock(&amp;g_storage_thread_lock);</div><div class=\"line\">\t\t\tg_storage_thread_count--;</div><div class=\"line\">\t\t\tpthread_mutex_unlock(&amp;g_storage_thread_lock);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">NULL</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tioevent_loop(&amp;pThreadData-&gt;thread_data, storage_recv_notify_read,</div><div class=\"line\">\t\ttask_finish_clean_up, &amp;g_continue_flag);  <span class=\"comment\">// epoll wait to listen</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// free free(ioevent-&gt;events) and close(ioevent-&gt;poll_fd) </span></div><div class=\"line\">\tioevent_destroy(&amp;pThreadData-&gt;thread_data.ev_puller);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (g_check_file_duplicate)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (g_keep_alive)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tfdht_disconnect_all_servers(&amp;(pThreadData-&gt;group_array));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tfdht_free_group_array(&amp;(pThreadData-&gt;group_array));</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=pthread_mutex_lock(&amp;g_storage_thread_lock)) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"call pthread_mutex_lock fail, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t<span class=\"keyword\">__LINE__</span>, result, STRERROR(result));</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tg_storage_thread_count--;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=pthread_mutex_unlock(&amp;g_storage_thread_lock)) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"call pthread_mutex_lock fail, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t<span class=\"keyword\">__LINE__</span>, result, STRERROR(result));</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tlogDebug(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t<span class=\"string\">\"nio thread exited, thread count: %d\"</span>, \\</div><div class=\"line\">\t\t<span class=\"keyword\">__LINE__</span>, g_storage_thread_count);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">NULL</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">void storage_recv_notify_read(<span class=\"keyword\">int</span> sock, short event, void *arg)</div><div class=\"line\">&#123;</div><div class=\"line\">\tstruct fast_task_info *pTask;</div><div class=\"line\">\tStorageClientInfo *pClientInfo;</div><div class=\"line\">\t<span class=\"keyword\">long</span> task_addr;</div><div class=\"line\">\tint64_t remain_bytes;</div><div class=\"line\">\t<span class=\"keyword\">int</span> bytes;</div><div class=\"line\">\t<span class=\"keyword\">int</span> result;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</div><div class=\"line\">\t&#123;         <span class=\"comment\">// read a address of buffer, it is the address of (struct fast_task_info), see accept_thread_entrance func</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((bytes=read(sock, &amp;task_addr, sizeof(task_addr))) &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!(errno == EAGAIN || errno == EWOULDBLOCK))</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">\"call read failed, \"</span> \\</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">\"errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">__LINE__</span>, errno, STRERROR(errno));</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (bytes == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t\t<span class=\"string\">\"call read failed, end of file\"</span>, <span class=\"keyword\">__LINE__</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tpTask = (struct fast_task_info *)task_addr; </div><div class=\"line\">\t\tpClientInfo = (StorageClientInfo *)pTask-&gt;arg;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (pTask-&gt;event.fd &lt; <span class=\"number\">0</span>)  <span class=\"comment\">//quit flag</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">/* //logInfo(\"=====thread index: %d, pTask-&gt;event.fd=%d\", \\</div><div class=\"line\">\t\t\tpClientInfo-&gt;nio_thread_index, pTask-&gt;event.fd);</div><div class=\"line\">\t\t*/</span></div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (pClientInfo-&gt;stage &amp; FDFS_STORAGE_STAGE_DIO_THREAD)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tpClientInfo-&gt;stage &amp;= ~FDFS_STORAGE_STAGE_DIO_THREAD;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">switch</span> (pClientInfo-&gt;stage)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">case</span> FDFS_STORAGE_STAGE_NIO_INIT:</div><div class=\"line\">\t\t\t\tresult = storage_nio_init(pTask);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">case</span> FDFS_STORAGE_STAGE_NIO_RECV:</div><div class=\"line\">\t\t\t\tpTask-&gt;offset = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\tremain_bytes = pClientInfo-&gt;total_length - \\</div><div class=\"line\">\t\t\t\t\t       pClientInfo-&gt;total_offset;</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (remain_bytes &gt; pTask-&gt;size)</div><div class=\"line\">\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\tpTask-&gt;length = pTask-&gt;size;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\tpTask-&gt;length = remain_bytes;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (set_recv_event(pTask) == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\tclient_sock_read(pTask-&gt;event.fd,</div><div class=\"line\">\t\t\t\t\t\tIOEVENT_READ, pTask);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\tresult = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">case</span> FDFS_STORAGE_STAGE_NIO_SEND:</div><div class=\"line\">\t\t\t\tresult = storage_send_add_event(pTask);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">case</span> FDFS_STORAGE_STAGE_NIO_CLOSE:</div><div class=\"line\">\t\t\t\tresult = EIO;   <span class=\"comment\">//close this socket</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">default</span>:</div><div class=\"line\">\t\t\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">\"invalid stage: %d\"</span>, <span class=\"keyword\">__LINE__</span>, \\</div><div class=\"line\">\t\t\t\t\tpClientInfo-&gt;stage);</div><div class=\"line\">\t\t\t\tresult = EINVAL;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (result != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tadd_to_deleted_list(pTask);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"fastdfs之tracker主流程","date":"2016-12-04T13:01:50.000Z","_content":"\n## 思想\n[相关文章1](http://blog.chinaunix.net/uid-20498361-id-3328763.html)\n[相关文章2](http://blog.csdn.net/makamus/article/details/13759545)\n主要思想是采用主线程监听并accept连接（代码中tracker_accept_loop函数可以依据全局变量g_accept_threads而开启多个子线程进行监听，默认只有一个主线程监听），得到fd,然后将该fd写入到某一个管道，而子线程（工作线程）（默认4个）监听到管道的另外一端，其处理函数为recv_notify_read，该函数读取管道得到该fd的值，再次将它加入到某个线程（不一定是当前线程）的监听事件中去，处理函数为client_sock_read，该函数当读完客户端完整的请求数据包时会调用tracker_deal_task函数进行处理，当需要进行写时会调用client_sock_write函数进行处理，这样主线程监听得到连接，交给子线程进行处理；\n<!--more-->\n\n## 源码\n```\n相关数据结构\nstruct nio_thread_data\n{\n\tstruct ioevent_puller ev_puller; //IO multiplexing function: poll, kqueue \n\tstruct fast_timer timer; // time wheel \n\tint pipe_fds[2]; //to wake up current thread who owns current nio_thread_data\n\tstruct fast_task_info *deleted_list;\n\tThreadLoopCallback thread_loop_callback;\n\tvoid *arg;   //extra argument pointer\n};\n每个工作线程对应一个该结构体，以实现one thread, one loop,\n```\n\n```\n//fdfs_trackerd.c->main函数\nint main(int argc, char *argv[])\n{\n\tchar *conf_filename;\n\tint result;\n\tint wait_count;\n\tint sock;\n\tpthread_t schedule_tid;\n\tstruct sigaction act;\n\tScheduleEntry scheduleEntries[SCHEDULE_ENTRIES_COUNT]; //保存需要定时执行的任务\n\tScheduleArray scheduleArray;\n\tchar pidFilename[MAX_PATH_SIZE];\n\tbool stop;\n\n\tif (argc < 2)\n\t{\n\t\tusage(argv[0]);\n\t\treturn 1;\n\t}\n\n\tg_current_time = time(NULL);\n\tg_up_time = g_current_time;\n\tsrand(g_up_time);\n\n\tlog_init2();\n\n\tconf_filename = argv[1];\n\t\n\tif ((result=get_base_path_from_conf_file(conf_filename,\n\t\tg_fdfs_base_path, sizeof(g_fdfs_base_path))) != 0)  //从配置文件中得到base path\n\t{\n\t\tlog_destroy();\n\t\treturn result;\n\t}\n\n\tsnprintf(pidFilename, sizeof(pidFilename),\n\t\t\"%s/data/fdfs_trackerd.pid\", g_fdfs_base_path);\n\t\n\tif ((result=process_action(pidFilename, argv[2], &stop)) != 0) //处理命令： fdfs_trackerd restart/stop/start\n\t{\n\t\tif (result == EINVAL)\n\t\t{\n\t\t\tusage(argv[0]);\n\t\t}\n\t\t\n\t\tlog_destroy();\n\t\treturn result;\n\t}\n\t\n\tif (stop)\n\t{\n\t\tlog_destroy();\n\t\treturn 0;\n\t}\n\n#if defined(DEBUG_FLAG) && defined(OS_LINUX)\n\tif (getExeAbsoluteFilename(argv[0], g_exe_name, \\\n\t\tsizeof(g_exe_name)) == NULL)   //得到可执行文件的绝对路径，保存到g_exe_name\n\t{\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\tlog_destroy();\n\t\treturn errno != 0 ? errno : ENOENT;\n\t}\n#endif\n\n\tmemset(bind_addr, 0, sizeof(bind_addr));\n\n\tif ((result=tracker_load_from_conf_file(conf_filename, \\\n\t\t\tbind_addr, sizeof(bind_addr))) != 0)       //得到监听的地址\n\t{\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\tlog_destroy();\n\t\treturn result;\n\t}\n\n    \n\t//\tload last status of tracker last time from file: base_path/data/.tracker_status\n\tif ((result=tracker_load_status_from_file(&g_tracker_last_status)) != 0)\n\t{\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\tlog_destroy();\n\t\treturn result;\n\t}\n\n    // init the global variable: g_base64_context\n\tbase64_init_ex(&g_base64_context, 0, '-', '_', '.');\n\n\t// set a rand num\n\tif ((result=set_rand_seed()) != 0)\n\t{\n\t\tlogCrit(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"set_rand_seed fail, program exit!\", __LINE__);\n\t\treturn result;\n\t}\n\n\tif ((result=tracker_mem_init()) != 0)\n\t{\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\tlog_destroy();\n\t\treturn result;\n\t}\n\n\tsock = socketServer(bind_addr, g_server_port, &result);\n\t\n\tif (sock < 0)\n\t{\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\tlog_destroy();\n\t\treturn result;\n\t}\n\n    // set send/recv timeout and keepalive parameter\n\tif ((result=tcpsetserveropt(sock, g_fdfs_network_timeout)) != 0)\n\t{\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\tlog_destroy();\n\t\treturn result;\n\t}\n\n\tdaemon_init(false); //后台进程\n\tumask(0);\n\t\n\tif ((result=write_to_pid_file(pidFilename)) != 0)\n\t{\n\t\tlog_destroy();\n\t\treturn result;\n\t}\n\n    // create work thread: work_thread_entrance func\n    // every thread has its event loop\n\tif ((result=tracker_service_init()) != 0)  //创建工作线程，每个工作线程对应一个nio_thread_data结构体\n\t{\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\tlog_destroy();\n\t\treturn result;\n\t}\n\n\t\n\tmemset(&act, 0, sizeof(act));\n\tsigemptyset(&act.sa_mask);\n   \n\tact.sa_handler = sigUsrHandler;\n\tif(sigaction(SIGUSR1, &act, NULL) < 0 || \\\n\t\tsigaction(SIGUSR2, &act, NULL) < 0)\n\t{\n\t\tlogCrit(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"call sigaction fail, errno: %d, error info: %s\", \\\n\t\t\t__LINE__, errno, STRERROR(errno));\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\treturn errno;\n\t}\n\n\tact.sa_handler = sigHupHandler;\n\tif(sigaction(SIGHUP, &act, NULL) < 0)\n\t{\n\t\tlogCrit(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"call sigaction fail, errno: %d, error info: %s\", \\\n\t\t\t__LINE__, errno, STRERROR(errno));\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\treturn errno;\n\t}\n\t\n\tact.sa_handler = SIG_IGN;\n\tif(sigaction(SIGPIPE, &act, NULL) < 0)\n\t{\n\t\tlogCrit(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"call sigaction fail, errno: %d, error info: %s\", \\\n\t\t\t__LINE__, errno, STRERROR(errno));\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\treturn errno;\n\t}\n\n\tact.sa_handler = sigQuitHandler;  // send FDFS_PROTO_CMD_QUIT command when caught SIGINT,SIGTERM,SIGQUIT\n\tif(sigaction(SIGINT, &act, NULL) < 0 || \\\n\t\tsigaction(SIGTERM, &act, NULL) < 0 || \\\n\t\tsigaction(SIGQUIT, &act, NULL) < 0)\n\t{\n\t\tlogCrit(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"call sigaction fail, errno: %d, error info: %s\", \\\n\t\t\t__LINE__, errno, STRERROR(errno));\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\treturn errno;\n\t}\n\n#if defined(DEBUG_FLAG)\n/*\n#if defined(OS_LINUX)\n\tmemset(&act, 0, sizeof(act));\n\tsigemptyset(&act.sa_mask);\n        act.sa_sigaction = sigSegvHandler;\n        act.sa_flags = SA_SIGINFO;\n        if (sigaction(SIGSEGV, &act, NULL) < 0 || \\\n        \tsigaction(SIGABRT, &act, NULL) < 0)\n\t{\n\t\tlogCrit(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"call sigaction fail, errno: %d, error info: %s\", \\\n\t\t\t__LINE__, errno, STRERROR(errno));\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\treturn errno;\n\t}\n#endif\n*/\n\n\tmemset(&act, 0, sizeof(act));\n\tsigemptyset(&act.sa_mask);\n\tact.sa_handler = sigDumpHandler; \n\tif(sigaction(SIGUSR1, &act, NULL) < 0 || \\\n\t\tsigaction(SIGUSR2, &act, NULL) < 0)\n\t{\n\t\tlogCrit(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"call sigaction fail, errno: %d, error info: %s\", \\\n\t\t\t__LINE__, errno, STRERROR(errno));\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\treturn errno;\n\t}\n#endif\n\n#ifdef WITH_HTTPD\n\tif (!g_http_params.disabled)\n\t{\n\t\tif ((result=tracker_httpd_start(bind_addr)) != 0)\n\t\t{\n\t\t\tlogCrit(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\t\"tracker_httpd_start fail, program exit!\", \\\n\t\t\t\t__LINE__);\n\t\t\treturn result;\n\t\t}\n\n\t}\n\n\tif ((result=tracker_http_check_start()) != 0)   \n\t{\n\t\tlogCrit(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"tracker_http_check_start fail, \" \\\n\t\t\t\"program exit!\", __LINE__);\n\t\treturn result;\n\t}\n#endif\n\n\tif ((result=set_run_by(g_run_by_group, g_run_by_user)) != 0)\n\t{\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\tlog_destroy();\n\t\treturn result;\n\t}\n\n\tscheduleArray.entries = scheduleEntries;\n\tscheduleArray.count = 0;\n\tmemset(scheduleEntries, 0, sizeof(scheduleEntries));\n\n\tINIT_SCHEDULE_ENTRY(scheduleEntries[scheduleArray.count],\n\t\tscheduleArray.count + 1, TIME_NONE, TIME_NONE, TIME_NONE,\n\t\tg_sync_log_buff_interval, log_sync_func, &g_log_context);\n\tscheduleArray.count++;\n\n\tINIT_SCHEDULE_ENTRY(scheduleEntries[scheduleArray.count],\n\t\tscheduleArray.count + 1, TIME_NONE, TIME_NONE, TIME_NONE,\n\t\tg_check_active_interval, tracker_mem_check_alive, NULL);\n\tscheduleArray.count++;\n\n\tINIT_SCHEDULE_ENTRY(scheduleEntries[scheduleArray.count],\n\t\tscheduleArray.count + 1, 0, 0, 0,\n\t\tTRACKER_SYNC_STATUS_FILE_INTERVAL,\n\t\ttracker_write_status_to_file, NULL);\n\tscheduleArray.count++;\n\n\tif (g_rotate_error_log)\n\t{\n\t\tINIT_SCHEDULE_ENTRY_EX(scheduleEntries[scheduleArray.count],\n\t\t\tscheduleArray.count + 1, g_error_log_rotate_time,\n\t\t\t24 * 3600, log_notify_rotate, &g_log_context);\n\t\tscheduleArray.count++;\n\n\t\tif (g_log_file_keep_days > 0)\n\t\t{\n\t\t\tlog_set_keep_days(&g_log_context, g_log_file_keep_days);\n\n\t\t\tINIT_SCHEDULE_ENTRY(scheduleEntries[scheduleArray.count],\n\t\t\t\tscheduleArray.count + 1, 1, 0, 0, 24 * 3600,\n\t\t\t\tlog_delete_old_files, &g_log_context);\n\t\t\tscheduleArray.count++;\n\t\t}\n\t}\n\n    // create a thread to execute some periodic task above, such as:log_sync_func,tracker_mem_check_alive\n    // tracker_write_status_to_file and so on\n\tif ((result=sched_start(&scheduleArray, &schedule_tid, \\\n\t\tg_thread_stack_size, (bool * volatile)&g_continue_flag)) != 0) //创建调度线程，以定时执行上面的任务：log_sync_func，tracker_mem_check_alive等\n\t{\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\tlog_destroy();\n\t\treturn result;\n\t}\n\n\tif ((result=tracker_relationship_init()) != 0) //初始化主lead\n\t{\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\tlog_destroy();\n\t\treturn result;\n\t}\n\n\tlog_set_cache(true); //set g_log_context.log_to_cache to true\n\n\tbTerminateFlag = false;\n\tbAcceptEndFlag = false;\n\n\ttracker_accept_loop(sock);  // the sock is tracker server socket，主线程循环，得到连接，dispatch子线程处理\n\tbAcceptEndFlag = true;\n\t\n\tif (g_schedule_flag)\n\t{\n\t\tpthread_kill(schedule_tid, SIGINT);\n\t}\n\t\n\ttracker_terminate_threads(); \n\n#ifdef WITH_HTTPD\n\tif (g_http_check_flag)\n\t{\n\t\ttracker_http_check_stop();\n\t}\n\n\twhile (g_http_check_flag)\n\t{\n\t\tusleep(50000);\n\t}\n#endif\n\n\twait_count = 0;\n\n    // g_schedule_flag is true means the schedule thread is not ended, see sched_thread_entrance\n\twhile ((g_tracker_thread_count != 0) || g_schedule_flag)\n\t{\n\n/*\n#if defined(DEBUG_FLAG) && defined(OS_LINUX)\n\t\tif (bSegmentFault)\n\t\t{\n\t\t\tsleep(5);\n\t\t\tbreak;\n\t\t}\n#endif\n*/\n\n\t\tusleep(10000);\n\n\t\tif (++wait_count > 3000)\n\t\t{\n\t\t\tlogWarning(\"waiting timeout, exit!\");\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\ttracker_mem_destroy(); // free the memory in g_groups and free lock allocated previously\n\ttracker_service_destroy(); // wait all child thread to exit\n\ttracker_relationship_destroy(); // do nothing\n\t\n\tlogInfo(\"exit normally.\\n\");\n\tlog_destroy(); // destory the log system\n\t\n\tdelete_pid_file(pidFilename);\n\treturn 0;\n}\n```\n\n```\n//初始化工作线程\n// create work thread: work_thread_entrance func\n// http://slucx.blog.chinaunix.net/uid-29504236-id-4556391.html\n// http://slucx.blog.chinaunix.net/uid-29504236-id-4556487.html\nint tracker_service_init()\n{\n#define ALLOC_CONNECTIONS_ONCE 1024\n\tint result;\n\tint bytes;\n    int init_connections;\n\tstruct nio_thread_data *pThreadData;\n\tstruct nio_thread_data *pDataEnd;\n\tpthread_t tid;\n\tpthread_attr_t thread_attr;\n\n\tif ((result=init_pthread_lock(&tracker_thread_lock)) != 0)\n\t{\n\t\treturn result;\n\t}\n\n\tif ((result=init_pthread_lock(&lb_thread_lock)) != 0)\n\t{\n\t\treturn result;\n\t}\n\n\tif ((result=init_pthread_attr(&thread_attr, g_thread_stack_size)) != 0)\n\t{\n\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"init_pthread_attr fail, program exit!\", __LINE__);\n\t\treturn result;\n\t}\n\n        init_connections = g_max_connections < ALLOC_CONNECTIONS_ONCE ?\n        g_max_connections : ALLOC_CONNECTIONS_ONCE;\n\t\n\tif ((result=free_queue_init_ex(g_max_connections, init_connections,\n                    ALLOC_CONNECTIONS_ONCE, TRACKER_MAX_PACKAGE_SIZE,\n                    TRACKER_MAX_PACKAGE_SIZE, sizeof(TrackerClientInfo))) != 0)\n\t{\n\t\treturn result;\n\t}\n\n\t// every thread has one nio_thread_data\n\tbytes = sizeof(struct nio_thread_data) * g_work_threads;\n\tg_thread_data = (struct nio_thread_data *)malloc(bytes );\n\t\n\tif (g_thread_data == NULL)\n\t{\n\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"malloc %d bytes fail, errno: %d, error info: %s\", \\\n\t\t\t__LINE__, bytes, errno, STRERROR(errno));\n\t\treturn errno != 0 ? errno : ENOMEM;\n\t}\n\t\n\tmemset(g_thread_data, 0, bytes);\n\n\tg_tracker_thread_count = 0;\n\tpDataEnd = g_thread_data + g_work_threads;   // 默认g_work_threads为4\n\t\n\tfor (pThreadData=g_thread_data; pThreadData<pDataEnd; pThreadData++)\n\t{\n\t\tif (ioevent_init(&pThreadData->ev_puller,\n\t\t\tg_max_connections + 2, 1000, 0) != 0) // g_max_connections=256，初始化IO复用函数，超时为1秒\n\t\t{\n\t\t\tresult  = errno != 0 ? errno : ENOMEM;\n\t\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\t\"ioevent_init fail, \" \\\n\t\t\t\t\"errno: %d, error info: %s\", \\\n\t\t\t\t__LINE__, result, STRERROR(result));\n\t\t\treturn result;\n\t\t}\n\n\t\tresult = fast_timer_init(&pThreadData->timer,\n\t\t\t\t2 * g_fdfs_network_timeout, g_current_time); //初始化超时事件time wheel\n\t\t\n\t\tif (result != 0)\n\t\t{\n\t\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\t\"fast_timer_init fail, \" \\\n\t\t\t\t\"errno: %d, error info: %s\", \\\n\t\t\t\t__LINE__, result, STRERROR(result));\n\t\t\treturn result;\n\t\t}\n\n\t\tif (pipe(pThreadData->pipe_fds) != 0)  //创建管道\n\t\t{\n\t\t\tresult = errno != 0 ? errno : EPERM;\n\t\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\t\"call pipe fail, \" \\\n\t\t\t\t\"errno: %d, error info: %s\", \\\n\t\t\t\t__LINE__, result, STRERROR(result));\n\t\t\tbreak;\n\t\t}\n\n#if defined(OS_LINUX)\n\t\tif ((result=fd_add_flags(pThreadData->pipe_fds[0], \\\n\t\t\t\tO_NONBLOCK | O_NOATIME)) != 0) // O_NOATIME: Do not update the file last access time \n\t\t{\n\t\t\tbreak;\n\t\t}\n#else\n\t\tif ((result=fd_add_flags(pThreadData->pipe_fds[0], \\\n\t\t\t\tO_NONBLOCK)) != 0)\n\t\t{\n\t\t\tbreak;\n\t\t}\n#endif\n\n\t\tif ((result=pthread_create(&tid, &thread_attr, \\\n\t\t\twork_thread_entrance, pThreadData)) != 0)  //创建工作线程\n\t\t{\n\t\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\t\"create thread failed, startup threads: %d, \" \\\n\t\t\t\t\"errno: %d, error info: %s\", \\\n\t\t\t\t__LINE__, g_tracker_thread_count, \\\n\t\t\t\tresult, STRERROR(result));\n\t\t\tbreak;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif ((result=pthread_mutex_lock(&tracker_thread_lock)) != 0)\n\t\t\t{\n\t\t\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\t\t\"call pthread_mutex_lock fail, \" \\\n\t\t\t\t\t\"errno: %d, error info: %s\", \\\n\t\t\t\t\t__LINE__, result, STRERROR(result));\n\t\t\t}\n\t\t\t\n\t\t\tg_tracker_thread_count++; //工作线程数量递增\n\t\t\t\n\t\t\tif ((result=pthread_mutex_unlock(&tracker_thread_lock)) != 0)\n\t\t\t{\n\t\t\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\t\t\"call pthread_mutex_lock fail, \" \\\n\t\t\t\t\t\"errno: %d, error info: %s\", \\\n\t\t\t\t\t__LINE__, result, STRERROR(result));\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\n\tpthread_attr_destroy(&thread_attr);\n\n\treturn 0;\n}\n\n//工作线程work_thread_entrance\n// tracker child thread\nstatic void *work_thread_entrance(void* arg)\n{\n\tint result;\n\tstruct nio_thread_data *pThreadData;\n\n\tpThreadData = (struct nio_thread_data *)arg;\n\t\n\tioevent_loop(pThreadData, recv_notify_read, task_finish_clean_up,\n\t\t&g_continue_flag);  // 循环等待事件的到来并处理\n\t\n\tioevent_destroy(&pThreadData->ev_puller);\n\n\tif ((result=pthread_mutex_lock(&tracker_thread_lock)) != 0)\n\t{\n\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"call pthread_mutex_lock fail, \" \\\n\t\t\t\"errno: %d, error info: %s\", \\\n\t\t\t__LINE__, result, STRERROR(result));\n\t}\n\t\n\tg_tracker_thread_count--;  //工作线程数量递减\n\t\n\tif ((result=pthread_mutex_unlock(&tracker_thread_lock)) != 0)\n\t{\n\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"call pthread_mutex_lock fail, \" \\\n\t\t\t\"errno: %d, error info: %s\", \\\n\t\t\t__LINE__, result, STRERROR(result));\n\t}\n\n\treturn NULL;\n}\n```\n\n```\n//主线程\n// accept a client request and dispatch request to child thread for processing\nstatic void *accept_thread_entrance(void* arg)\n{\n\tint server_sock;\n\tint incomesock;\n\tstruct sockaddr_in inaddr;\n\tsocklen_t sockaddr_len;\n\tstruct nio_thread_data *pThreadData;\n\tserver_sock = (long)arg;\n\t\n\twhile (g_continue_flag)\n\t{\n\t\tsockaddr_len = sizeof(inaddr);\n\t\tincomesock = accept(server_sock, (struct sockaddr*)&inaddr, &sockaddr_len);\n\t\t\n\t\tif (incomesock < 0) //error\n\t\t{\n\t\t\tif (!(errno == EINTR || errno == EAGAIN))\n\t\t\t{\n\t\t\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\t\t\"accept failed, \" \\\n\t\t\t\t\t\"errno: %d, error info: %s\", \\\n\t\t\t\t\t__LINE__, errno, STRERROR(errno));\n\t\t\t}\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tpThreadData = g_thread_data + incomesock % g_work_threads;\n\t\t\n\t\tif (write(pThreadData->pipe_fds[1], &incomesock, \\\n\t\t\tsizeof(incomesock)) != sizeof(incomesock)) // 将得到的client fd写入某个管道中，wakeup child thread\n\t\t{\n\t\t\tclose(incomesock);\n\t\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\t\"call write failed, \" \\\n\t\t\t\t\"errno: %d, error info: %s\", \\\n\t\t\t\t__LINE__, errno, STRERROR(errno));\n\t\t}\n        else\n        {\n            int current_connections;\n            current_connections = __sync_add_and_fetch(&g_connection_stat.\n                    current_count, 1);\n\t\t\t\n            if (current_connections > g_connection_stat.max_count) \n\t\t\t{\n                g_connection_stat.max_count = current_connections;\n            }\n\t\t\t\n        }\n\t}\n\n\treturn NULL;\n}\n```\n","source":"_posts/fastdfs之tracker主流程.md","raw":"---\ntitle: fastdfs之tracker主流程\ndate: 2016-12-04 13:01:50\ntags: [fastdfs]\n---\n\n## 思想\n[相关文章1](http://blog.chinaunix.net/uid-20498361-id-3328763.html)\n[相关文章2](http://blog.csdn.net/makamus/article/details/13759545)\n主要思想是采用主线程监听并accept连接（代码中tracker_accept_loop函数可以依据全局变量g_accept_threads而开启多个子线程进行监听，默认只有一个主线程监听），得到fd,然后将该fd写入到某一个管道，而子线程（工作线程）（默认4个）监听到管道的另外一端，其处理函数为recv_notify_read，该函数读取管道得到该fd的值，再次将它加入到某个线程（不一定是当前线程）的监听事件中去，处理函数为client_sock_read，该函数当读完客户端完整的请求数据包时会调用tracker_deal_task函数进行处理，当需要进行写时会调用client_sock_write函数进行处理，这样主线程监听得到连接，交给子线程进行处理；\n<!--more-->\n\n## 源码\n```\n相关数据结构\nstruct nio_thread_data\n{\n\tstruct ioevent_puller ev_puller; //IO multiplexing function: poll, kqueue \n\tstruct fast_timer timer; // time wheel \n\tint pipe_fds[2]; //to wake up current thread who owns current nio_thread_data\n\tstruct fast_task_info *deleted_list;\n\tThreadLoopCallback thread_loop_callback;\n\tvoid *arg;   //extra argument pointer\n};\n每个工作线程对应一个该结构体，以实现one thread, one loop,\n```\n\n```\n//fdfs_trackerd.c->main函数\nint main(int argc, char *argv[])\n{\n\tchar *conf_filename;\n\tint result;\n\tint wait_count;\n\tint sock;\n\tpthread_t schedule_tid;\n\tstruct sigaction act;\n\tScheduleEntry scheduleEntries[SCHEDULE_ENTRIES_COUNT]; //保存需要定时执行的任务\n\tScheduleArray scheduleArray;\n\tchar pidFilename[MAX_PATH_SIZE];\n\tbool stop;\n\n\tif (argc < 2)\n\t{\n\t\tusage(argv[0]);\n\t\treturn 1;\n\t}\n\n\tg_current_time = time(NULL);\n\tg_up_time = g_current_time;\n\tsrand(g_up_time);\n\n\tlog_init2();\n\n\tconf_filename = argv[1];\n\t\n\tif ((result=get_base_path_from_conf_file(conf_filename,\n\t\tg_fdfs_base_path, sizeof(g_fdfs_base_path))) != 0)  //从配置文件中得到base path\n\t{\n\t\tlog_destroy();\n\t\treturn result;\n\t}\n\n\tsnprintf(pidFilename, sizeof(pidFilename),\n\t\t\"%s/data/fdfs_trackerd.pid\", g_fdfs_base_path);\n\t\n\tif ((result=process_action(pidFilename, argv[2], &stop)) != 0) //处理命令： fdfs_trackerd restart/stop/start\n\t{\n\t\tif (result == EINVAL)\n\t\t{\n\t\t\tusage(argv[0]);\n\t\t}\n\t\t\n\t\tlog_destroy();\n\t\treturn result;\n\t}\n\t\n\tif (stop)\n\t{\n\t\tlog_destroy();\n\t\treturn 0;\n\t}\n\n#if defined(DEBUG_FLAG) && defined(OS_LINUX)\n\tif (getExeAbsoluteFilename(argv[0], g_exe_name, \\\n\t\tsizeof(g_exe_name)) == NULL)   //得到可执行文件的绝对路径，保存到g_exe_name\n\t{\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\tlog_destroy();\n\t\treturn errno != 0 ? errno : ENOENT;\n\t}\n#endif\n\n\tmemset(bind_addr, 0, sizeof(bind_addr));\n\n\tif ((result=tracker_load_from_conf_file(conf_filename, \\\n\t\t\tbind_addr, sizeof(bind_addr))) != 0)       //得到监听的地址\n\t{\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\tlog_destroy();\n\t\treturn result;\n\t}\n\n    \n\t//\tload last status of tracker last time from file: base_path/data/.tracker_status\n\tif ((result=tracker_load_status_from_file(&g_tracker_last_status)) != 0)\n\t{\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\tlog_destroy();\n\t\treturn result;\n\t}\n\n    // init the global variable: g_base64_context\n\tbase64_init_ex(&g_base64_context, 0, '-', '_', '.');\n\n\t// set a rand num\n\tif ((result=set_rand_seed()) != 0)\n\t{\n\t\tlogCrit(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"set_rand_seed fail, program exit!\", __LINE__);\n\t\treturn result;\n\t}\n\n\tif ((result=tracker_mem_init()) != 0)\n\t{\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\tlog_destroy();\n\t\treturn result;\n\t}\n\n\tsock = socketServer(bind_addr, g_server_port, &result);\n\t\n\tif (sock < 0)\n\t{\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\tlog_destroy();\n\t\treturn result;\n\t}\n\n    // set send/recv timeout and keepalive parameter\n\tif ((result=tcpsetserveropt(sock, g_fdfs_network_timeout)) != 0)\n\t{\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\tlog_destroy();\n\t\treturn result;\n\t}\n\n\tdaemon_init(false); //后台进程\n\tumask(0);\n\t\n\tif ((result=write_to_pid_file(pidFilename)) != 0)\n\t{\n\t\tlog_destroy();\n\t\treturn result;\n\t}\n\n    // create work thread: work_thread_entrance func\n    // every thread has its event loop\n\tif ((result=tracker_service_init()) != 0)  //创建工作线程，每个工作线程对应一个nio_thread_data结构体\n\t{\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\tlog_destroy();\n\t\treturn result;\n\t}\n\n\t\n\tmemset(&act, 0, sizeof(act));\n\tsigemptyset(&act.sa_mask);\n   \n\tact.sa_handler = sigUsrHandler;\n\tif(sigaction(SIGUSR1, &act, NULL) < 0 || \\\n\t\tsigaction(SIGUSR2, &act, NULL) < 0)\n\t{\n\t\tlogCrit(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"call sigaction fail, errno: %d, error info: %s\", \\\n\t\t\t__LINE__, errno, STRERROR(errno));\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\treturn errno;\n\t}\n\n\tact.sa_handler = sigHupHandler;\n\tif(sigaction(SIGHUP, &act, NULL) < 0)\n\t{\n\t\tlogCrit(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"call sigaction fail, errno: %d, error info: %s\", \\\n\t\t\t__LINE__, errno, STRERROR(errno));\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\treturn errno;\n\t}\n\t\n\tact.sa_handler = SIG_IGN;\n\tif(sigaction(SIGPIPE, &act, NULL) < 0)\n\t{\n\t\tlogCrit(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"call sigaction fail, errno: %d, error info: %s\", \\\n\t\t\t__LINE__, errno, STRERROR(errno));\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\treturn errno;\n\t}\n\n\tact.sa_handler = sigQuitHandler;  // send FDFS_PROTO_CMD_QUIT command when caught SIGINT,SIGTERM,SIGQUIT\n\tif(sigaction(SIGINT, &act, NULL) < 0 || \\\n\t\tsigaction(SIGTERM, &act, NULL) < 0 || \\\n\t\tsigaction(SIGQUIT, &act, NULL) < 0)\n\t{\n\t\tlogCrit(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"call sigaction fail, errno: %d, error info: %s\", \\\n\t\t\t__LINE__, errno, STRERROR(errno));\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\treturn errno;\n\t}\n\n#if defined(DEBUG_FLAG)\n/*\n#if defined(OS_LINUX)\n\tmemset(&act, 0, sizeof(act));\n\tsigemptyset(&act.sa_mask);\n        act.sa_sigaction = sigSegvHandler;\n        act.sa_flags = SA_SIGINFO;\n        if (sigaction(SIGSEGV, &act, NULL) < 0 || \\\n        \tsigaction(SIGABRT, &act, NULL) < 0)\n\t{\n\t\tlogCrit(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"call sigaction fail, errno: %d, error info: %s\", \\\n\t\t\t__LINE__, errno, STRERROR(errno));\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\treturn errno;\n\t}\n#endif\n*/\n\n\tmemset(&act, 0, sizeof(act));\n\tsigemptyset(&act.sa_mask);\n\tact.sa_handler = sigDumpHandler; \n\tif(sigaction(SIGUSR1, &act, NULL) < 0 || \\\n\t\tsigaction(SIGUSR2, &act, NULL) < 0)\n\t{\n\t\tlogCrit(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"call sigaction fail, errno: %d, error info: %s\", \\\n\t\t\t__LINE__, errno, STRERROR(errno));\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\treturn errno;\n\t}\n#endif\n\n#ifdef WITH_HTTPD\n\tif (!g_http_params.disabled)\n\t{\n\t\tif ((result=tracker_httpd_start(bind_addr)) != 0)\n\t\t{\n\t\t\tlogCrit(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\t\"tracker_httpd_start fail, program exit!\", \\\n\t\t\t\t__LINE__);\n\t\t\treturn result;\n\t\t}\n\n\t}\n\n\tif ((result=tracker_http_check_start()) != 0)   \n\t{\n\t\tlogCrit(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"tracker_http_check_start fail, \" \\\n\t\t\t\"program exit!\", __LINE__);\n\t\treturn result;\n\t}\n#endif\n\n\tif ((result=set_run_by(g_run_by_group, g_run_by_user)) != 0)\n\t{\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\tlog_destroy();\n\t\treturn result;\n\t}\n\n\tscheduleArray.entries = scheduleEntries;\n\tscheduleArray.count = 0;\n\tmemset(scheduleEntries, 0, sizeof(scheduleEntries));\n\n\tINIT_SCHEDULE_ENTRY(scheduleEntries[scheduleArray.count],\n\t\tscheduleArray.count + 1, TIME_NONE, TIME_NONE, TIME_NONE,\n\t\tg_sync_log_buff_interval, log_sync_func, &g_log_context);\n\tscheduleArray.count++;\n\n\tINIT_SCHEDULE_ENTRY(scheduleEntries[scheduleArray.count],\n\t\tscheduleArray.count + 1, TIME_NONE, TIME_NONE, TIME_NONE,\n\t\tg_check_active_interval, tracker_mem_check_alive, NULL);\n\tscheduleArray.count++;\n\n\tINIT_SCHEDULE_ENTRY(scheduleEntries[scheduleArray.count],\n\t\tscheduleArray.count + 1, 0, 0, 0,\n\t\tTRACKER_SYNC_STATUS_FILE_INTERVAL,\n\t\ttracker_write_status_to_file, NULL);\n\tscheduleArray.count++;\n\n\tif (g_rotate_error_log)\n\t{\n\t\tINIT_SCHEDULE_ENTRY_EX(scheduleEntries[scheduleArray.count],\n\t\t\tscheduleArray.count + 1, g_error_log_rotate_time,\n\t\t\t24 * 3600, log_notify_rotate, &g_log_context);\n\t\tscheduleArray.count++;\n\n\t\tif (g_log_file_keep_days > 0)\n\t\t{\n\t\t\tlog_set_keep_days(&g_log_context, g_log_file_keep_days);\n\n\t\t\tINIT_SCHEDULE_ENTRY(scheduleEntries[scheduleArray.count],\n\t\t\t\tscheduleArray.count + 1, 1, 0, 0, 24 * 3600,\n\t\t\t\tlog_delete_old_files, &g_log_context);\n\t\t\tscheduleArray.count++;\n\t\t}\n\t}\n\n    // create a thread to execute some periodic task above, such as:log_sync_func,tracker_mem_check_alive\n    // tracker_write_status_to_file and so on\n\tif ((result=sched_start(&scheduleArray, &schedule_tid, \\\n\t\tg_thread_stack_size, (bool * volatile)&g_continue_flag)) != 0) //创建调度线程，以定时执行上面的任务：log_sync_func，tracker_mem_check_alive等\n\t{\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\tlog_destroy();\n\t\treturn result;\n\t}\n\n\tif ((result=tracker_relationship_init()) != 0) //初始化主lead\n\t{\n\t\tlogCrit(\"exit abnormally!\\n\");\n\t\tlog_destroy();\n\t\treturn result;\n\t}\n\n\tlog_set_cache(true); //set g_log_context.log_to_cache to true\n\n\tbTerminateFlag = false;\n\tbAcceptEndFlag = false;\n\n\ttracker_accept_loop(sock);  // the sock is tracker server socket，主线程循环，得到连接，dispatch子线程处理\n\tbAcceptEndFlag = true;\n\t\n\tif (g_schedule_flag)\n\t{\n\t\tpthread_kill(schedule_tid, SIGINT);\n\t}\n\t\n\ttracker_terminate_threads(); \n\n#ifdef WITH_HTTPD\n\tif (g_http_check_flag)\n\t{\n\t\ttracker_http_check_stop();\n\t}\n\n\twhile (g_http_check_flag)\n\t{\n\t\tusleep(50000);\n\t}\n#endif\n\n\twait_count = 0;\n\n    // g_schedule_flag is true means the schedule thread is not ended, see sched_thread_entrance\n\twhile ((g_tracker_thread_count != 0) || g_schedule_flag)\n\t{\n\n/*\n#if defined(DEBUG_FLAG) && defined(OS_LINUX)\n\t\tif (bSegmentFault)\n\t\t{\n\t\t\tsleep(5);\n\t\t\tbreak;\n\t\t}\n#endif\n*/\n\n\t\tusleep(10000);\n\n\t\tif (++wait_count > 3000)\n\t\t{\n\t\t\tlogWarning(\"waiting timeout, exit!\");\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\ttracker_mem_destroy(); // free the memory in g_groups and free lock allocated previously\n\ttracker_service_destroy(); // wait all child thread to exit\n\ttracker_relationship_destroy(); // do nothing\n\t\n\tlogInfo(\"exit normally.\\n\");\n\tlog_destroy(); // destory the log system\n\t\n\tdelete_pid_file(pidFilename);\n\treturn 0;\n}\n```\n\n```\n//初始化工作线程\n// create work thread: work_thread_entrance func\n// http://slucx.blog.chinaunix.net/uid-29504236-id-4556391.html\n// http://slucx.blog.chinaunix.net/uid-29504236-id-4556487.html\nint tracker_service_init()\n{\n#define ALLOC_CONNECTIONS_ONCE 1024\n\tint result;\n\tint bytes;\n    int init_connections;\n\tstruct nio_thread_data *pThreadData;\n\tstruct nio_thread_data *pDataEnd;\n\tpthread_t tid;\n\tpthread_attr_t thread_attr;\n\n\tif ((result=init_pthread_lock(&tracker_thread_lock)) != 0)\n\t{\n\t\treturn result;\n\t}\n\n\tif ((result=init_pthread_lock(&lb_thread_lock)) != 0)\n\t{\n\t\treturn result;\n\t}\n\n\tif ((result=init_pthread_attr(&thread_attr, g_thread_stack_size)) != 0)\n\t{\n\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"init_pthread_attr fail, program exit!\", __LINE__);\n\t\treturn result;\n\t}\n\n        init_connections = g_max_connections < ALLOC_CONNECTIONS_ONCE ?\n        g_max_connections : ALLOC_CONNECTIONS_ONCE;\n\t\n\tif ((result=free_queue_init_ex(g_max_connections, init_connections,\n                    ALLOC_CONNECTIONS_ONCE, TRACKER_MAX_PACKAGE_SIZE,\n                    TRACKER_MAX_PACKAGE_SIZE, sizeof(TrackerClientInfo))) != 0)\n\t{\n\t\treturn result;\n\t}\n\n\t// every thread has one nio_thread_data\n\tbytes = sizeof(struct nio_thread_data) * g_work_threads;\n\tg_thread_data = (struct nio_thread_data *)malloc(bytes );\n\t\n\tif (g_thread_data == NULL)\n\t{\n\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"malloc %d bytes fail, errno: %d, error info: %s\", \\\n\t\t\t__LINE__, bytes, errno, STRERROR(errno));\n\t\treturn errno != 0 ? errno : ENOMEM;\n\t}\n\t\n\tmemset(g_thread_data, 0, bytes);\n\n\tg_tracker_thread_count = 0;\n\tpDataEnd = g_thread_data + g_work_threads;   // 默认g_work_threads为4\n\t\n\tfor (pThreadData=g_thread_data; pThreadData<pDataEnd; pThreadData++)\n\t{\n\t\tif (ioevent_init(&pThreadData->ev_puller,\n\t\t\tg_max_connections + 2, 1000, 0) != 0) // g_max_connections=256，初始化IO复用函数，超时为1秒\n\t\t{\n\t\t\tresult  = errno != 0 ? errno : ENOMEM;\n\t\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\t\"ioevent_init fail, \" \\\n\t\t\t\t\"errno: %d, error info: %s\", \\\n\t\t\t\t__LINE__, result, STRERROR(result));\n\t\t\treturn result;\n\t\t}\n\n\t\tresult = fast_timer_init(&pThreadData->timer,\n\t\t\t\t2 * g_fdfs_network_timeout, g_current_time); //初始化超时事件time wheel\n\t\t\n\t\tif (result != 0)\n\t\t{\n\t\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\t\"fast_timer_init fail, \" \\\n\t\t\t\t\"errno: %d, error info: %s\", \\\n\t\t\t\t__LINE__, result, STRERROR(result));\n\t\t\treturn result;\n\t\t}\n\n\t\tif (pipe(pThreadData->pipe_fds) != 0)  //创建管道\n\t\t{\n\t\t\tresult = errno != 0 ? errno : EPERM;\n\t\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\t\"call pipe fail, \" \\\n\t\t\t\t\"errno: %d, error info: %s\", \\\n\t\t\t\t__LINE__, result, STRERROR(result));\n\t\t\tbreak;\n\t\t}\n\n#if defined(OS_LINUX)\n\t\tif ((result=fd_add_flags(pThreadData->pipe_fds[0], \\\n\t\t\t\tO_NONBLOCK | O_NOATIME)) != 0) // O_NOATIME: Do not update the file last access time \n\t\t{\n\t\t\tbreak;\n\t\t}\n#else\n\t\tif ((result=fd_add_flags(pThreadData->pipe_fds[0], \\\n\t\t\t\tO_NONBLOCK)) != 0)\n\t\t{\n\t\t\tbreak;\n\t\t}\n#endif\n\n\t\tif ((result=pthread_create(&tid, &thread_attr, \\\n\t\t\twork_thread_entrance, pThreadData)) != 0)  //创建工作线程\n\t\t{\n\t\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\t\"create thread failed, startup threads: %d, \" \\\n\t\t\t\t\"errno: %d, error info: %s\", \\\n\t\t\t\t__LINE__, g_tracker_thread_count, \\\n\t\t\t\tresult, STRERROR(result));\n\t\t\tbreak;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif ((result=pthread_mutex_lock(&tracker_thread_lock)) != 0)\n\t\t\t{\n\t\t\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\t\t\"call pthread_mutex_lock fail, \" \\\n\t\t\t\t\t\"errno: %d, error info: %s\", \\\n\t\t\t\t\t__LINE__, result, STRERROR(result));\n\t\t\t}\n\t\t\t\n\t\t\tg_tracker_thread_count++; //工作线程数量递增\n\t\t\t\n\t\t\tif ((result=pthread_mutex_unlock(&tracker_thread_lock)) != 0)\n\t\t\t{\n\t\t\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\t\t\"call pthread_mutex_lock fail, \" \\\n\t\t\t\t\t\"errno: %d, error info: %s\", \\\n\t\t\t\t\t__LINE__, result, STRERROR(result));\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\n\tpthread_attr_destroy(&thread_attr);\n\n\treturn 0;\n}\n\n//工作线程work_thread_entrance\n// tracker child thread\nstatic void *work_thread_entrance(void* arg)\n{\n\tint result;\n\tstruct nio_thread_data *pThreadData;\n\n\tpThreadData = (struct nio_thread_data *)arg;\n\t\n\tioevent_loop(pThreadData, recv_notify_read, task_finish_clean_up,\n\t\t&g_continue_flag);  // 循环等待事件的到来并处理\n\t\n\tioevent_destroy(&pThreadData->ev_puller);\n\n\tif ((result=pthread_mutex_lock(&tracker_thread_lock)) != 0)\n\t{\n\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"call pthread_mutex_lock fail, \" \\\n\t\t\t\"errno: %d, error info: %s\", \\\n\t\t\t__LINE__, result, STRERROR(result));\n\t}\n\t\n\tg_tracker_thread_count--;  //工作线程数量递减\n\t\n\tif ((result=pthread_mutex_unlock(&tracker_thread_lock)) != 0)\n\t{\n\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"call pthread_mutex_lock fail, \" \\\n\t\t\t\"errno: %d, error info: %s\", \\\n\t\t\t__LINE__, result, STRERROR(result));\n\t}\n\n\treturn NULL;\n}\n```\n\n```\n//主线程\n// accept a client request and dispatch request to child thread for processing\nstatic void *accept_thread_entrance(void* arg)\n{\n\tint server_sock;\n\tint incomesock;\n\tstruct sockaddr_in inaddr;\n\tsocklen_t sockaddr_len;\n\tstruct nio_thread_data *pThreadData;\n\tserver_sock = (long)arg;\n\t\n\twhile (g_continue_flag)\n\t{\n\t\tsockaddr_len = sizeof(inaddr);\n\t\tincomesock = accept(server_sock, (struct sockaddr*)&inaddr, &sockaddr_len);\n\t\t\n\t\tif (incomesock < 0) //error\n\t\t{\n\t\t\tif (!(errno == EINTR || errno == EAGAIN))\n\t\t\t{\n\t\t\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\t\t\"accept failed, \" \\\n\t\t\t\t\t\"errno: %d, error info: %s\", \\\n\t\t\t\t\t__LINE__, errno, STRERROR(errno));\n\t\t\t}\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tpThreadData = g_thread_data + incomesock % g_work_threads;\n\t\t\n\t\tif (write(pThreadData->pipe_fds[1], &incomesock, \\\n\t\t\tsizeof(incomesock)) != sizeof(incomesock)) // 将得到的client fd写入某个管道中，wakeup child thread\n\t\t{\n\t\t\tclose(incomesock);\n\t\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\t\"call write failed, \" \\\n\t\t\t\t\"errno: %d, error info: %s\", \\\n\t\t\t\t__LINE__, errno, STRERROR(errno));\n\t\t}\n        else\n        {\n            int current_connections;\n            current_connections = __sync_add_and_fetch(&g_connection_stat.\n                    current_count, 1);\n\t\t\t\n            if (current_connections > g_connection_stat.max_count) \n\t\t\t{\n                g_connection_stat.max_count = current_connections;\n            }\n\t\t\t\n        }\n\t}\n\n\treturn NULL;\n}\n```\n","slug":"fastdfs之tracker主流程","published":1,"updated":"2016-12-04T06:01:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwg2v9il00026al8nubr1h39","content":"<h2 id=\"思想\"><a href=\"#思想\" class=\"headerlink\" title=\"思想\"></a>思想</h2><p><a href=\"http://blog.chinaunix.net/uid-20498361-id-3328763.html\" target=\"_blank\" rel=\"external\">相关文章1</a><br><a href=\"http://blog.csdn.net/makamus/article/details/13759545\" target=\"_blank\" rel=\"external\">相关文章2</a><br>主要思想是采用主线程监听并accept连接（代码中tracker_accept_loop函数可以依据全局变量g_accept_threads而开启多个子线程进行监听，默认只有一个主线程监听），得到fd,然后将该fd写入到某一个管道，而子线程（工作线程）（默认4个）监听到管道的另外一端，其处理函数为recv_notify_read，该函数读取管道得到该fd的值，再次将它加入到某个线程（不一定是当前线程）的监听事件中去，处理函数为client_sock_read，该函数当读完客户端完整的请求数据包时会调用tracker_deal_task函数进行处理，当需要进行写时会调用client_sock_write函数进行处理，这样主线程监听得到连接，交给子线程进行处理；<br><a id=\"more\"></a></p>\n<h2 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h2><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">相关数据结构</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nio_thread_data</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ioevent_puller</span></span> ev_puller; <span class=\"comment\">//IO multiplexing function: poll, kqueue </span></div><div class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">fast_timer</span></span> timer; <span class=\"comment\">// time wheel </span></div><div class=\"line\">\t<span class=\"keyword\">int</span> pipe_fds[<span class=\"number\">2</span>]; <span class=\"comment\">//to wake up current thread who owns current nio_thread_data</span></div><div class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">fast_task_info</span></span> *deleted_list;</div><div class=\"line\">\tThreadLoopCallback thread_loop_callback;</div><div class=\"line\">\tvoid *arg;   <span class=\"comment\">//extra argument pointer</span></div><div class=\"line\">&#125;;</div><div class=\"line\">每个工作线程对应一个该结构体，以实现one thread, one <span class=\"keyword\">loop</span>,</div></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div><div class=\"line\">338</div><div class=\"line\">339</div><div class=\"line\">340</div><div class=\"line\">341</div><div class=\"line\">342</div><div class=\"line\">343</div><div class=\"line\">344</div><div class=\"line\">345</div><div class=\"line\">346</div><div class=\"line\">347</div><div class=\"line\">348</div><div class=\"line\">349</div><div class=\"line\">350</div><div class=\"line\">351</div><div class=\"line\">352</div><div class=\"line\">353</div><div class=\"line\">354</div><div class=\"line\">355</div><div class=\"line\">356</div><div class=\"line\">357</div><div class=\"line\">358</div><div class=\"line\">359</div><div class=\"line\">360</div><div class=\"line\">361</div><div class=\"line\">362</div><div class=\"line\">363</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//fdfs_trackerd.c-&gt;main函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">char</span> *conf_filename;</div><div class=\"line\">\t<span class=\"keyword\">int</span> result;</div><div class=\"line\">\t<span class=\"keyword\">int</span> wait_count;</div><div class=\"line\">\t<span class=\"keyword\">int</span> sock;</div><div class=\"line\">\t<span class=\"keyword\">pthread_t</span> schedule_tid;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> sigaction act;</div><div class=\"line\">\tScheduleEntry scheduleEntries[SCHEDULE_ENTRIES_COUNT]; <span class=\"comment\">//保存需要定时执行的任务</span></div><div class=\"line\">\tScheduleArray scheduleArray;</div><div class=\"line\">\t<span class=\"keyword\">char</span> pidFilename[MAX_PATH_SIZE];</div><div class=\"line\">\t<span class=\"keyword\">bool</span> stop;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (argc &lt; <span class=\"number\">2</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tusage(argv[<span class=\"number\">0</span>]);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tg_current_time = time(<span class=\"literal\">NULL</span>);</div><div class=\"line\">\tg_up_time = g_current_time;</div><div class=\"line\">\tsrand(g_up_time);</div><div class=\"line\"></div><div class=\"line\">\tlog_init2();</div><div class=\"line\"></div><div class=\"line\">\tconf_filename = argv[<span class=\"number\">1</span>];</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=get_base_path_from_conf_file(conf_filename,</div><div class=\"line\">\t\tg_fdfs_base_path, <span class=\"keyword\">sizeof</span>(g_fdfs_base_path))) != <span class=\"number\">0</span>)  <span class=\"comment\">//从配置文件中得到base path</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlog_destroy();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"built_in\">snprintf</span>(pidFilename, <span class=\"keyword\">sizeof</span>(pidFilename),</div><div class=\"line\">\t\t<span class=\"string\">\"%s/data/fdfs_trackerd.pid\"</span>, g_fdfs_base_path);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=process_action(pidFilename, argv[<span class=\"number\">2</span>], &amp;stop)) != <span class=\"number\">0</span>) <span class=\"comment\">//处理命令： fdfs_trackerd restart/stop/start</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (result == EINVAL)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tusage(argv[<span class=\"number\">0</span>]);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tlog_destroy();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (stop)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlog_destroy();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined(DEBUG_FLAG) &amp;&amp; defined(OS_LINUX)</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> (getExeAbsoluteFilename(argv[<span class=\"number\">0</span>], g_exe_name, \\</div><div class=\"line\">\t\t<span class=\"keyword\">sizeof</span>(g_exe_name)) == <span class=\"literal\">NULL</span>)   <span class=\"comment\">//得到可执行文件的绝对路径，保存到g_exe_name</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"exit abnormally!\\n\"</span>);</div><div class=\"line\">\t\tlog_destroy();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> errno != <span class=\"number\">0</span> ? errno : ENOENT;</div><div class=\"line\">\t&#125;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"built_in\">memset</span>(bind_addr, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(bind_addr));</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=tracker_load_from_conf_file(conf_filename, \\</div><div class=\"line\">\t\t\tbind_addr, <span class=\"keyword\">sizeof</span>(bind_addr))) != <span class=\"number\">0</span>)       <span class=\"comment\">//得到监听的地址</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"exit abnormally!\\n\"</span>);</div><div class=\"line\">\t\tlog_destroy();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">    </div><div class=\"line\">\t<span class=\"comment\">//\tload last status of tracker last time from file: base_path/data/.tracker_status</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=tracker_load_status_from_file(&amp;g_tracker_last_status)) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"exit abnormally!\\n\"</span>);</div><div class=\"line\">\t\tlog_destroy();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// init the global variable: g_base64_context</span></div><div class=\"line\">\tbase64_init_ex(&amp;g_base64_context, <span class=\"number\">0</span>, <span class=\"string\">'-'</span>, <span class=\"string\">'_'</span>, <span class=\"string\">'.'</span>);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// set a rand num</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=set_rand_seed()) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"file: \"</span>__FILE__<span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"set_rand_seed fail, program exit!\"</span>, __LINE__);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=tracker_mem_init()) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"exit abnormally!\\n\"</span>);</div><div class=\"line\">\t\tlog_destroy();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tsock = socketServer(bind_addr, g_server_port, &amp;result);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (sock &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"exit abnormally!\\n\"</span>);</div><div class=\"line\">\t\tlog_destroy();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// set send/recv timeout and keepalive parameter</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=tcpsetserveropt(sock, g_fdfs_network_timeout)) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"exit abnormally!\\n\"</span>);</div><div class=\"line\">\t\tlog_destroy();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tdaemon_init(<span class=\"literal\">false</span>); <span class=\"comment\">//后台进程</span></div><div class=\"line\">\tumask(<span class=\"number\">0</span>);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=write_to_pid_file(pidFilename)) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlog_destroy();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// create work thread: work_thread_entrance func</span></div><div class=\"line\">    <span class=\"comment\">// every thread has its event loop</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=tracker_service_init()) != <span class=\"number\">0</span>)  <span class=\"comment\">//创建工作线程，每个工作线程对应一个nio_thread_data结构体</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"exit abnormally!\\n\"</span>);</div><div class=\"line\">\t\tlog_destroy();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"built_in\">memset</span>(&amp;act, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(act));</div><div class=\"line\">\tsigemptyset(&amp;act.sa_mask);</div><div class=\"line\">   </div><div class=\"line\">\tact.sa_handler = sigUsrHandler;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(sigaction(SIGUSR1, &amp;act, <span class=\"literal\">NULL</span>) &lt; <span class=\"number\">0</span> || \\</div><div class=\"line\">\t\tsigaction(SIGUSR2, &amp;act, <span class=\"literal\">NULL</span>) &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"file: \"</span>__FILE__<span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"call sigaction fail, errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t__LINE__, errno, STRERROR(errno));</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"exit abnormally!\\n\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> errno;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tact.sa_handler = sigHupHandler;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(sigaction(SIGHUP, &amp;act, <span class=\"literal\">NULL</span>) &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"file: \"</span>__FILE__<span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"call sigaction fail, errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t__LINE__, errno, STRERROR(errno));</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"exit abnormally!\\n\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> errno;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tact.sa_handler = SIG_IGN;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(sigaction(SIGPIPE, &amp;act, <span class=\"literal\">NULL</span>) &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"file: \"</span>__FILE__<span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"call sigaction fail, errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t__LINE__, errno, STRERROR(errno));</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"exit abnormally!\\n\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> errno;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tact.sa_handler = sigQuitHandler;  <span class=\"comment\">// send FDFS_PROTO_CMD_QUIT command when caught SIGINT,SIGTERM,SIGQUIT</span></div><div class=\"line\">\t<span class=\"keyword\">if</span>(sigaction(SIGINT, &amp;act, <span class=\"literal\">NULL</span>) &lt; <span class=\"number\">0</span> || \\</div><div class=\"line\">\t\tsigaction(SIGTERM, &amp;act, <span class=\"literal\">NULL</span>) &lt; <span class=\"number\">0</span> || \\</div><div class=\"line\">\t\tsigaction(SIGQUIT, &amp;act, <span class=\"literal\">NULL</span>) &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"file: \"</span>__FILE__<span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"call sigaction fail, errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t__LINE__, errno, STRERROR(errno));</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"exit abnormally!\\n\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> errno;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined(DEBUG_FLAG)</span></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">#if defined(OS_LINUX)</div><div class=\"line\">\tmemset(&amp;act, 0, sizeof(act));</div><div class=\"line\">\tsigemptyset(&amp;act.sa_mask);</div><div class=\"line\">        act.sa_sigaction = sigSegvHandler;</div><div class=\"line\">        act.sa_flags = SA_SIGINFO;</div><div class=\"line\">        if (sigaction(SIGSEGV, &amp;act, NULL) &lt; 0 || \\</div><div class=\"line\">        \tsigaction(SIGABRT, &amp;act, NULL) &lt; 0)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(\"file: \"__FILE__\", line: %d, \" \\</div><div class=\"line\">\t\t\t\"call sigaction fail, errno: %d, error info: %s\", \\</div><div class=\"line\">\t\t\t__LINE__, errno, STRERROR(errno));</div><div class=\"line\">\t\tlogCrit(\"exit abnormally!\\n\");</div><div class=\"line\">\t\treturn errno;</div><div class=\"line\">\t&#125;</div><div class=\"line\">#endif</div><div class=\"line\">*/</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"built_in\">memset</span>(&amp;act, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(act));</div><div class=\"line\">\tsigemptyset(&amp;act.sa_mask);</div><div class=\"line\">\tact.sa_handler = sigDumpHandler; </div><div class=\"line\">\t<span class=\"keyword\">if</span>(sigaction(SIGUSR1, &amp;act, <span class=\"literal\">NULL</span>) &lt; <span class=\"number\">0</span> || \\</div><div class=\"line\">\t\tsigaction(SIGUSR2, &amp;act, <span class=\"literal\">NULL</span>) &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"file: \"</span>__FILE__<span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"call sigaction fail, errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t__LINE__, errno, STRERROR(errno));</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"exit abnormally!\\n\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> errno;</div><div class=\"line\">\t&#125;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> WITH_HTTPD</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> (!g_http_params.disabled)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((result=tracker_httpd_start(bind_addr)) != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tlogCrit(<span class=\"string\">\"file: \"</span>__FILE__<span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t\t<span class=\"string\">\"tracker_httpd_start fail, program exit!\"</span>, \\</div><div class=\"line\">\t\t\t\t__LINE__);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=tracker_http_check_start()) != <span class=\"number\">0</span>)   </div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"file: \"</span>__FILE__<span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"tracker_http_check_start fail, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"program exit!\"</span>, __LINE__);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=set_run_by(g_run_by_group, g_run_by_user)) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"exit abnormally!\\n\"</span>);</div><div class=\"line\">\t\tlog_destroy();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tscheduleArray.entries = scheduleEntries;</div><div class=\"line\">\tscheduleArray.count = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"built_in\">memset</span>(scheduleEntries, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(scheduleEntries));</div><div class=\"line\"></div><div class=\"line\">\tINIT_SCHEDULE_ENTRY(scheduleEntries[scheduleArray.count],</div><div class=\"line\">\t\tscheduleArray.count + <span class=\"number\">1</span>, TIME_NONE, TIME_NONE, TIME_NONE,</div><div class=\"line\">\t\tg_sync_log_buff_interval, log_sync_func, &amp;g_log_context);</div><div class=\"line\">\tscheduleArray.count++;</div><div class=\"line\"></div><div class=\"line\">\tINIT_SCHEDULE_ENTRY(scheduleEntries[scheduleArray.count],</div><div class=\"line\">\t\tscheduleArray.count + <span class=\"number\">1</span>, TIME_NONE, TIME_NONE, TIME_NONE,</div><div class=\"line\">\t\tg_check_active_interval, tracker_mem_check_alive, <span class=\"literal\">NULL</span>);</div><div class=\"line\">\tscheduleArray.count++;</div><div class=\"line\"></div><div class=\"line\">\tINIT_SCHEDULE_ENTRY(scheduleEntries[scheduleArray.count],</div><div class=\"line\">\t\tscheduleArray.count + <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</div><div class=\"line\">\t\tTRACKER_SYNC_STATUS_FILE_INTERVAL,</div><div class=\"line\">\t\ttracker_write_status_to_file, <span class=\"literal\">NULL</span>);</div><div class=\"line\">\tscheduleArray.count++;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (g_rotate_error_log)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tINIT_SCHEDULE_ENTRY_EX(scheduleEntries[scheduleArray.count],</div><div class=\"line\">\t\t\tscheduleArray.count + <span class=\"number\">1</span>, g_error_log_rotate_time,</div><div class=\"line\">\t\t\t<span class=\"number\">24</span> * <span class=\"number\">3600</span>, log_notify_rotate, &amp;g_log_context);</div><div class=\"line\">\t\tscheduleArray.count++;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (g_log_file_keep_days &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tlog_set_keep_days(&amp;g_log_context, g_log_file_keep_days);</div><div class=\"line\"></div><div class=\"line\">\t\t\tINIT_SCHEDULE_ENTRY(scheduleEntries[scheduleArray.count],</div><div class=\"line\">\t\t\t\tscheduleArray.count + <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">24</span> * <span class=\"number\">3600</span>,</div><div class=\"line\">\t\t\t\tlog_delete_old_files, &amp;g_log_context);</div><div class=\"line\">\t\t\tscheduleArray.count++;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// create a thread to execute some periodic task above, such as:log_sync_func,tracker_mem_check_alive</span></div><div class=\"line\">    <span class=\"comment\">// tracker_write_status_to_file and so on</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=sched_start(&amp;scheduleArray, &amp;schedule_tid, \\</div><div class=\"line\">\t\tg_thread_stack_size, (<span class=\"keyword\">bool</span> * <span class=\"keyword\">volatile</span>)&amp;g_continue_flag)) != <span class=\"number\">0</span>) <span class=\"comment\">//创建调度线程，以定时执行上面的任务：log_sync_func，tracker_mem_check_alive等</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"exit abnormally!\\n\"</span>);</div><div class=\"line\">\t\tlog_destroy();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=tracker_relationship_init()) != <span class=\"number\">0</span>) <span class=\"comment\">//初始化主lead</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"exit abnormally!\\n\"</span>);</div><div class=\"line\">\t\tlog_destroy();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tlog_set_cache(<span class=\"literal\">true</span>); <span class=\"comment\">//set g_log_context.log_to_cache to true</span></div><div class=\"line\"></div><div class=\"line\">\tbTerminateFlag = <span class=\"literal\">false</span>;</div><div class=\"line\">\tbAcceptEndFlag = <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">\ttracker_accept_loop(sock);  <span class=\"comment\">// the sock is tracker server socket，主线程循环，得到连接，dispatch子线程处理</span></div><div class=\"line\">\tbAcceptEndFlag = <span class=\"literal\">true</span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (g_schedule_flag)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tpthread_kill(schedule_tid, SIGINT);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\ttracker_terminate_threads(); </div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> WITH_HTTPD</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> (g_http_check_flag)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\ttracker_http_check_stop();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">while</span> (g_http_check_flag)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tusleep(<span class=\"number\">50000</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\">\twait_count = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// g_schedule_flag is true means the schedule thread is not ended, see sched_thread_entrance</span></div><div class=\"line\">\t<span class=\"keyword\">while</span> ((g_tracker_thread_count != <span class=\"number\">0</span>) || g_schedule_flag)</div><div class=\"line\">\t&#123;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">#if defined(DEBUG_FLAG) &amp;&amp; defined(OS_LINUX)</div><div class=\"line\">\t\tif (bSegmentFault)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tsleep(5);</div><div class=\"line\">\t\t\tbreak;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">#endif</div><div class=\"line\">*/</div><div class=\"line\"></div><div class=\"line\">\t\tusleep(<span class=\"number\">10000</span>);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (++wait_count &gt; <span class=\"number\">3000</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tlogWarning(<span class=\"string\">\"waiting timeout, exit!\"</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\ttracker_mem_destroy(); <span class=\"comment\">// free the memory in g_groups and free lock allocated previously</span></div><div class=\"line\">\ttracker_service_destroy(); <span class=\"comment\">// wait all child thread to exit</span></div><div class=\"line\">\ttracker_relationship_destroy(); <span class=\"comment\">// do nothing</span></div><div class=\"line\">\t</div><div class=\"line\">\tlogInfo(<span class=\"string\">\"exit normally.\\n\"</span>);</div><div class=\"line\">\tlog_destroy(); <span class=\"comment\">// destory the log system</span></div><div class=\"line\">\t</div><div class=\"line\">\tdelete_pid_file(pidFilename);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//初始化工作线程</span></div><div class=\"line\"><span class=\"comment\">// create work thread: work_thread_entrance func</span></div><div class=\"line\"><span class=\"comment\">// http://slucx.blog.chinaunix.net/uid-29504236-id-4556391.html</span></div><div class=\"line\"><span class=\"comment\">// http://slucx.blog.chinaunix.net/uid-29504236-id-4556487.html</span></div><div class=\"line\"><span class=\"keyword\">int</span> tracker_service_init()</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"comment\">#define ALLOC_CONNECTIONS_ONCE 1024</span></div><div class=\"line\">\t<span class=\"keyword\">int</span> result;</div><div class=\"line\">\t<span class=\"keyword\">int</span> bytes;</div><div class=\"line\">    <span class=\"keyword\">int</span> init_connections;</div><div class=\"line\">\tstruct nio_thread_data *pThreadData;</div><div class=\"line\">\tstruct nio_thread_data *pDataEnd;</div><div class=\"line\">\tpthread_t tid;</div><div class=\"line\">\tpthread_attr_t thread_attr;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=init_pthread_lock(&amp;tracker_thread_lock)) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=init_pthread_lock(&amp;lb_thread_lock)) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=init_pthread_attr(&amp;thread_attr, g_thread_stack_size)) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"init_pthread_attr fail, program exit!\"</span>, <span class=\"keyword\">__LINE__</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">        init_connections = g_max_connections &lt; ALLOC_CONNECTIONS_ONCE ?</div><div class=\"line\">        g_max_connections : ALLOC_CONNECTIONS_ONCE;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=free_queue_init_ex(g_max_connections, init_connections,</div><div class=\"line\">                    ALLOC_CONNECTIONS_ONCE, TRACKER_MAX_PACKAGE_SIZE,</div><div class=\"line\">                    TRACKER_MAX_PACKAGE_SIZE, sizeof(TrackerClientInfo))) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// every thread has one nio_thread_data</span></div><div class=\"line\">\tbytes = sizeof(struct nio_thread_data) * g_work_threads;</div><div class=\"line\">\tg_thread_data = (struct nio_thread_data *)malloc(bytes );</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (g_thread_data == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"malloc %d bytes fail, errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t<span class=\"keyword\">__LINE__</span>, bytes, errno, STRERROR(errno));</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> errno != <span class=\"number\">0</span> ? errno : ENOMEM;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tmemset(g_thread_data, <span class=\"number\">0</span>, bytes);</div><div class=\"line\"></div><div class=\"line\">\tg_tracker_thread_count = <span class=\"number\">0</span>;</div><div class=\"line\">\tpDataEnd = g_thread_data + g_work_threads;   <span class=\"comment\">// 默认g_work_threads为4</span></div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">for</span> (pThreadData=g_thread_data; pThreadData&lt;pDataEnd; pThreadData++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (ioevent_init(&amp;pThreadData-&gt;ev_puller,</div><div class=\"line\">\t\t\tg_max_connections + <span class=\"number\">2</span>, <span class=\"number\">1000</span>, <span class=\"number\">0</span>) != <span class=\"number\">0</span>) <span class=\"comment\">// g_max_connections=256，初始化IO复用函数，超时为1秒</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tresult  = errno != <span class=\"number\">0</span> ? errno : ENOMEM;</div><div class=\"line\">\t\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t\t<span class=\"string\">\"ioevent_init fail, \"</span> \\</div><div class=\"line\">\t\t\t\t<span class=\"string\">\"errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">__LINE__</span>, result, STRERROR(result));</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tresult = fast_timer_init(&amp;pThreadData-&gt;timer,</div><div class=\"line\">\t\t\t\t<span class=\"number\">2</span> * g_fdfs_network_timeout, g_current_time); <span class=\"comment\">//初始化超时事件time wheel</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (result != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t\t<span class=\"string\">\"fast_timer_init fail, \"</span> \\</div><div class=\"line\">\t\t\t\t<span class=\"string\">\"errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">__LINE__</span>, result, STRERROR(result));</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (pipe(pThreadData-&gt;pipe_fds) != <span class=\"number\">0</span>)  <span class=\"comment\">//创建管道</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tresult = errno != <span class=\"number\">0</span> ? errno : EPERM;</div><div class=\"line\">\t\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t\t<span class=\"string\">\"call pipe fail, \"</span> \\</div><div class=\"line\">\t\t\t\t<span class=\"string\">\"errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">__LINE__</span>, result, STRERROR(result));</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#if defined(OS_LINUX)</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((result=fd_add_flags(pThreadData-&gt;pipe_fds[<span class=\"number\">0</span>], \\</div><div class=\"line\">\t\t\t\tO_NONBLOCK | O_NOATIME)) != <span class=\"number\">0</span>) <span class=\"comment\">// O_NOATIME: Do not update the file last access time </span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"><span class=\"comment\">#else</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((result=fd_add_flags(pThreadData-&gt;pipe_fds[<span class=\"number\">0</span>], \\</div><div class=\"line\">\t\t\t\tO_NONBLOCK)) != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"><span class=\"comment\">#endif</span></div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((result=pthread_create(&amp;tid, &amp;thread_attr, \\</div><div class=\"line\">\t\t\twork_thread_entrance, pThreadData)) != <span class=\"number\">0</span>)  <span class=\"comment\">//创建工作线程</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t\t<span class=\"string\">\"create thread failed, startup threads: %d, \"</span> \\</div><div class=\"line\">\t\t\t\t<span class=\"string\">\"errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">__LINE__</span>, g_tracker_thread_count, \\</div><div class=\"line\">\t\t\t\tresult, STRERROR(result));</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> ((result=pthread_mutex_lock(&amp;tracker_thread_lock)) != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">\"call pthread_mutex_lock fail, \"</span> \\</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">\"errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">__LINE__</span>, result, STRERROR(result));</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tg_tracker_thread_count++; <span class=\"comment\">//工作线程数量递增</span></div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> ((result=pthread_mutex_unlock(&amp;tracker_thread_lock)) != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">\"call pthread_mutex_lock fail, \"</span> \\</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">\"errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">__LINE__</span>, result, STRERROR(result));</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpthread_attr_destroy(&amp;thread_attr);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//工作线程work_thread_entrance</span></div><div class=\"line\"><span class=\"comment\">// tracker child thread</span></div><div class=\"line\"><span class=\"keyword\">static</span> void *work_thread_entrance(void* arg)</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> result;</div><div class=\"line\">\tstruct nio_thread_data *pThreadData;</div><div class=\"line\"></div><div class=\"line\">\tpThreadData = (struct nio_thread_data *)arg;</div><div class=\"line\">\t</div><div class=\"line\">\tioevent_loop(pThreadData, recv_notify_read, task_finish_clean_up,</div><div class=\"line\">\t\t&amp;g_continue_flag);  <span class=\"comment\">// 循环等待事件的到来并处理</span></div><div class=\"line\">\t</div><div class=\"line\">\tioevent_destroy(&amp;pThreadData-&gt;ev_puller);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=pthread_mutex_lock(&amp;tracker_thread_lock)) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"call pthread_mutex_lock fail, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t<span class=\"keyword\">__LINE__</span>, result, STRERROR(result));</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tg_tracker_thread_count--;  <span class=\"comment\">//工作线程数量递减</span></div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=pthread_mutex_unlock(&amp;tracker_thread_lock)) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"call pthread_mutex_lock fail, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t<span class=\"keyword\">__LINE__</span>, result, STRERROR(result));</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">NULL</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//主线程</span></div><div class=\"line\"><span class=\"comment\">// accept a client request and dispatch request to child thread for processing</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> *<span class=\"title\">accept_thread_entrance</span><span class=\"params\">(<span class=\"keyword\">void</span>* arg)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> server_sock;</div><div class=\"line\">\t<span class=\"keyword\">int</span> incomesock;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> sockaddr_in inaddr;</div><div class=\"line\">\t<span class=\"keyword\">socklen_t</span> sockaddr_len;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> nio_thread_data *pThreadData;</div><div class=\"line\">\tserver_sock = (<span class=\"keyword\">long</span>)arg;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">while</span> (g_continue_flag)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tsockaddr_len = <span class=\"keyword\">sizeof</span>(inaddr);</div><div class=\"line\">\t\tincomesock = accept(server_sock, (<span class=\"keyword\">struct</span> sockaddr*)&amp;inaddr, &amp;sockaddr_len);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (incomesock &lt; <span class=\"number\">0</span>) <span class=\"comment\">//error</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!(errno == EINTR || errno == EAGAIN))</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tlogError(<span class=\"string\">\"file: \"</span>__FILE__<span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">\"accept failed, \"</span> \\</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">\"errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t\t\t__LINE__, errno, STRERROR(errno));</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tpThreadData = g_thread_data + incomesock % g_work_threads;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (write(pThreadData-&gt;pipe_fds[<span class=\"number\">1</span>], &amp;incomesock, \\</div><div class=\"line\">\t\t\t<span class=\"keyword\">sizeof</span>(incomesock)) != <span class=\"keyword\">sizeof</span>(incomesock)) <span class=\"comment\">// 将得到的client fd写入某个管道中，wakeup child thread</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tclose(incomesock);</div><div class=\"line\">\t\t\tlogError(<span class=\"string\">\"file: \"</span>__FILE__<span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t\t<span class=\"string\">\"call write failed, \"</span> \\</div><div class=\"line\">\t\t\t\t<span class=\"string\">\"errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t\t__LINE__, errno, STRERROR(errno));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> current_connections;</div><div class=\"line\">            current_connections = __sync_add_and_fetch(&amp;g_connection_stat.</div><div class=\"line\">                    current_count, <span class=\"number\">1</span>);</div><div class=\"line\">\t\t\t</div><div class=\"line\">            <span class=\"keyword\">if</span> (current_connections &gt; g_connection_stat.max_count) </div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">                g_connection_stat.max_count = current_connections;</div><div class=\"line\">            &#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">        &#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"<h2 id=\"思想\"><a href=\"#思想\" class=\"headerlink\" title=\"思想\"></a>思想</h2><p><a href=\"http://blog.chinaunix.net/uid-20498361-id-3328763.html\">相关文章1</a><br><a href=\"http://blog.csdn.net/makamus/article/details/13759545\">相关文章2</a><br>主要思想是采用主线程监听并accept连接（代码中tracker_accept_loop函数可以依据全局变量g_accept_threads而开启多个子线程进行监听，默认只有一个主线程监听），得到fd,然后将该fd写入到某一个管道，而子线程（工作线程）（默认4个）监听到管道的另外一端，其处理函数为recv_notify_read，该函数读取管道得到该fd的值，再次将它加入到某个线程（不一定是当前线程）的监听事件中去，处理函数为client_sock_read，该函数当读完客户端完整的请求数据包时会调用tracker_deal_task函数进行处理，当需要进行写时会调用client_sock_write函数进行处理，这样主线程监听得到连接，交给子线程进行处理；<br>","more":"</p>\n<h2 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h2><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">相关数据结构</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nio_thread_data</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ioevent_puller</span></span> ev_puller; <span class=\"comment\">//IO multiplexing function: poll, kqueue </span></div><div class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">fast_timer</span></span> timer; <span class=\"comment\">// time wheel </span></div><div class=\"line\">\t<span class=\"keyword\">int</span> pipe_fds[<span class=\"number\">2</span>]; <span class=\"comment\">//to wake up current thread who owns current nio_thread_data</span></div><div class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">fast_task_info</span></span> *deleted_list;</div><div class=\"line\">\tThreadLoopCallback thread_loop_callback;</div><div class=\"line\">\tvoid *arg;   <span class=\"comment\">//extra argument pointer</span></div><div class=\"line\">&#125;;</div><div class=\"line\">每个工作线程对应一个该结构体，以实现one thread, one <span class=\"keyword\">loop</span>,</div></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div><div class=\"line\">338</div><div class=\"line\">339</div><div class=\"line\">340</div><div class=\"line\">341</div><div class=\"line\">342</div><div class=\"line\">343</div><div class=\"line\">344</div><div class=\"line\">345</div><div class=\"line\">346</div><div class=\"line\">347</div><div class=\"line\">348</div><div class=\"line\">349</div><div class=\"line\">350</div><div class=\"line\">351</div><div class=\"line\">352</div><div class=\"line\">353</div><div class=\"line\">354</div><div class=\"line\">355</div><div class=\"line\">356</div><div class=\"line\">357</div><div class=\"line\">358</div><div class=\"line\">359</div><div class=\"line\">360</div><div class=\"line\">361</div><div class=\"line\">362</div><div class=\"line\">363</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//fdfs_trackerd.c-&gt;main函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">char</span> *conf_filename;</div><div class=\"line\">\t<span class=\"keyword\">int</span> result;</div><div class=\"line\">\t<span class=\"keyword\">int</span> wait_count;</div><div class=\"line\">\t<span class=\"keyword\">int</span> sock;</div><div class=\"line\">\t<span class=\"keyword\">pthread_t</span> schedule_tid;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> sigaction act;</div><div class=\"line\">\tScheduleEntry scheduleEntries[SCHEDULE_ENTRIES_COUNT]; <span class=\"comment\">//保存需要定时执行的任务</span></div><div class=\"line\">\tScheduleArray scheduleArray;</div><div class=\"line\">\t<span class=\"keyword\">char</span> pidFilename[MAX_PATH_SIZE];</div><div class=\"line\">\t<span class=\"keyword\">bool</span> stop;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (argc &lt; <span class=\"number\">2</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tusage(argv[<span class=\"number\">0</span>]);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tg_current_time = time(<span class=\"literal\">NULL</span>);</div><div class=\"line\">\tg_up_time = g_current_time;</div><div class=\"line\">\tsrand(g_up_time);</div><div class=\"line\"></div><div class=\"line\">\tlog_init2();</div><div class=\"line\"></div><div class=\"line\">\tconf_filename = argv[<span class=\"number\">1</span>];</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=get_base_path_from_conf_file(conf_filename,</div><div class=\"line\">\t\tg_fdfs_base_path, <span class=\"keyword\">sizeof</span>(g_fdfs_base_path))) != <span class=\"number\">0</span>)  <span class=\"comment\">//从配置文件中得到base path</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlog_destroy();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"built_in\">snprintf</span>(pidFilename, <span class=\"keyword\">sizeof</span>(pidFilename),</div><div class=\"line\">\t\t<span class=\"string\">\"%s/data/fdfs_trackerd.pid\"</span>, g_fdfs_base_path);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=process_action(pidFilename, argv[<span class=\"number\">2</span>], &amp;stop)) != <span class=\"number\">0</span>) <span class=\"comment\">//处理命令： fdfs_trackerd restart/stop/start</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (result == EINVAL)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tusage(argv[<span class=\"number\">0</span>]);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tlog_destroy();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (stop)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlog_destroy();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined(DEBUG_FLAG) &amp;&amp; defined(OS_LINUX)</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> (getExeAbsoluteFilename(argv[<span class=\"number\">0</span>], g_exe_name, \\</div><div class=\"line\">\t\t<span class=\"keyword\">sizeof</span>(g_exe_name)) == <span class=\"literal\">NULL</span>)   <span class=\"comment\">//得到可执行文件的绝对路径，保存到g_exe_name</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"exit abnormally!\\n\"</span>);</div><div class=\"line\">\t\tlog_destroy();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> errno != <span class=\"number\">0</span> ? errno : ENOENT;</div><div class=\"line\">\t&#125;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"built_in\">memset</span>(bind_addr, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(bind_addr));</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=tracker_load_from_conf_file(conf_filename, \\</div><div class=\"line\">\t\t\tbind_addr, <span class=\"keyword\">sizeof</span>(bind_addr))) != <span class=\"number\">0</span>)       <span class=\"comment\">//得到监听的地址</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"exit abnormally!\\n\"</span>);</div><div class=\"line\">\t\tlog_destroy();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">    </div><div class=\"line\">\t<span class=\"comment\">//\tload last status of tracker last time from file: base_path/data/.tracker_status</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=tracker_load_status_from_file(&amp;g_tracker_last_status)) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"exit abnormally!\\n\"</span>);</div><div class=\"line\">\t\tlog_destroy();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// init the global variable: g_base64_context</span></div><div class=\"line\">\tbase64_init_ex(&amp;g_base64_context, <span class=\"number\">0</span>, <span class=\"string\">'-'</span>, <span class=\"string\">'_'</span>, <span class=\"string\">'.'</span>);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// set a rand num</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=set_rand_seed()) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"file: \"</span>__FILE__<span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"set_rand_seed fail, program exit!\"</span>, __LINE__);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=tracker_mem_init()) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"exit abnormally!\\n\"</span>);</div><div class=\"line\">\t\tlog_destroy();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tsock = socketServer(bind_addr, g_server_port, &amp;result);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (sock &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"exit abnormally!\\n\"</span>);</div><div class=\"line\">\t\tlog_destroy();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// set send/recv timeout and keepalive parameter</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=tcpsetserveropt(sock, g_fdfs_network_timeout)) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"exit abnormally!\\n\"</span>);</div><div class=\"line\">\t\tlog_destroy();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tdaemon_init(<span class=\"literal\">false</span>); <span class=\"comment\">//后台进程</span></div><div class=\"line\">\tumask(<span class=\"number\">0</span>);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=write_to_pid_file(pidFilename)) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlog_destroy();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// create work thread: work_thread_entrance func</span></div><div class=\"line\">    <span class=\"comment\">// every thread has its event loop</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=tracker_service_init()) != <span class=\"number\">0</span>)  <span class=\"comment\">//创建工作线程，每个工作线程对应一个nio_thread_data结构体</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"exit abnormally!\\n\"</span>);</div><div class=\"line\">\t\tlog_destroy();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"built_in\">memset</span>(&amp;act, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(act));</div><div class=\"line\">\tsigemptyset(&amp;act.sa_mask);</div><div class=\"line\">   </div><div class=\"line\">\tact.sa_handler = sigUsrHandler;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(sigaction(SIGUSR1, &amp;act, <span class=\"literal\">NULL</span>) &lt; <span class=\"number\">0</span> || \\</div><div class=\"line\">\t\tsigaction(SIGUSR2, &amp;act, <span class=\"literal\">NULL</span>) &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"file: \"</span>__FILE__<span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"call sigaction fail, errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t__LINE__, errno, STRERROR(errno));</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"exit abnormally!\\n\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> errno;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tact.sa_handler = sigHupHandler;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(sigaction(SIGHUP, &amp;act, <span class=\"literal\">NULL</span>) &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"file: \"</span>__FILE__<span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"call sigaction fail, errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t__LINE__, errno, STRERROR(errno));</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"exit abnormally!\\n\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> errno;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tact.sa_handler = SIG_IGN;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(sigaction(SIGPIPE, &amp;act, <span class=\"literal\">NULL</span>) &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"file: \"</span>__FILE__<span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"call sigaction fail, errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t__LINE__, errno, STRERROR(errno));</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"exit abnormally!\\n\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> errno;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tact.sa_handler = sigQuitHandler;  <span class=\"comment\">// send FDFS_PROTO_CMD_QUIT command when caught SIGINT,SIGTERM,SIGQUIT</span></div><div class=\"line\">\t<span class=\"keyword\">if</span>(sigaction(SIGINT, &amp;act, <span class=\"literal\">NULL</span>) &lt; <span class=\"number\">0</span> || \\</div><div class=\"line\">\t\tsigaction(SIGTERM, &amp;act, <span class=\"literal\">NULL</span>) &lt; <span class=\"number\">0</span> || \\</div><div class=\"line\">\t\tsigaction(SIGQUIT, &amp;act, <span class=\"literal\">NULL</span>) &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"file: \"</span>__FILE__<span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"call sigaction fail, errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t__LINE__, errno, STRERROR(errno));</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"exit abnormally!\\n\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> errno;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined(DEBUG_FLAG)</span></div><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\">#if defined(OS_LINUX)</div><div class=\"line\">\tmemset(&amp;act, 0, sizeof(act));</div><div class=\"line\">\tsigemptyset(&amp;act.sa_mask);</div><div class=\"line\">        act.sa_sigaction = sigSegvHandler;</div><div class=\"line\">        act.sa_flags = SA_SIGINFO;</div><div class=\"line\">        if (sigaction(SIGSEGV, &amp;act, NULL) &lt; 0 || \\</div><div class=\"line\">        \tsigaction(SIGABRT, &amp;act, NULL) &lt; 0)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(\"file: \"__FILE__\", line: %d, \" \\</div><div class=\"line\">\t\t\t\"call sigaction fail, errno: %d, error info: %s\", \\</div><div class=\"line\">\t\t\t__LINE__, errno, STRERROR(errno));</div><div class=\"line\">\t\tlogCrit(\"exit abnormally!\\n\");</div><div class=\"line\">\t\treturn errno;</div><div class=\"line\">\t&#125;</div><div class=\"line\">#endif</div><div class=\"line\">*/</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"built_in\">memset</span>(&amp;act, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(act));</div><div class=\"line\">\tsigemptyset(&amp;act.sa_mask);</div><div class=\"line\">\tact.sa_handler = sigDumpHandler; </div><div class=\"line\">\t<span class=\"keyword\">if</span>(sigaction(SIGUSR1, &amp;act, <span class=\"literal\">NULL</span>) &lt; <span class=\"number\">0</span> || \\</div><div class=\"line\">\t\tsigaction(SIGUSR2, &amp;act, <span class=\"literal\">NULL</span>) &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"file: \"</span>__FILE__<span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"call sigaction fail, errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t__LINE__, errno, STRERROR(errno));</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"exit abnormally!\\n\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> errno;</div><div class=\"line\">\t&#125;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> WITH_HTTPD</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> (!g_http_params.disabled)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((result=tracker_httpd_start(bind_addr)) != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tlogCrit(<span class=\"string\">\"file: \"</span>__FILE__<span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t\t<span class=\"string\">\"tracker_httpd_start fail, program exit!\"</span>, \\</div><div class=\"line\">\t\t\t\t__LINE__);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=tracker_http_check_start()) != <span class=\"number\">0</span>)   </div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"file: \"</span>__FILE__<span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"tracker_http_check_start fail, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"program exit!\"</span>, __LINE__);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=set_run_by(g_run_by_group, g_run_by_user)) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"exit abnormally!\\n\"</span>);</div><div class=\"line\">\t\tlog_destroy();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tscheduleArray.entries = scheduleEntries;</div><div class=\"line\">\tscheduleArray.count = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"built_in\">memset</span>(scheduleEntries, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(scheduleEntries));</div><div class=\"line\"></div><div class=\"line\">\tINIT_SCHEDULE_ENTRY(scheduleEntries[scheduleArray.count],</div><div class=\"line\">\t\tscheduleArray.count + <span class=\"number\">1</span>, TIME_NONE, TIME_NONE, TIME_NONE,</div><div class=\"line\">\t\tg_sync_log_buff_interval, log_sync_func, &amp;g_log_context);</div><div class=\"line\">\tscheduleArray.count++;</div><div class=\"line\"></div><div class=\"line\">\tINIT_SCHEDULE_ENTRY(scheduleEntries[scheduleArray.count],</div><div class=\"line\">\t\tscheduleArray.count + <span class=\"number\">1</span>, TIME_NONE, TIME_NONE, TIME_NONE,</div><div class=\"line\">\t\tg_check_active_interval, tracker_mem_check_alive, <span class=\"literal\">NULL</span>);</div><div class=\"line\">\tscheduleArray.count++;</div><div class=\"line\"></div><div class=\"line\">\tINIT_SCHEDULE_ENTRY(scheduleEntries[scheduleArray.count],</div><div class=\"line\">\t\tscheduleArray.count + <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</div><div class=\"line\">\t\tTRACKER_SYNC_STATUS_FILE_INTERVAL,</div><div class=\"line\">\t\ttracker_write_status_to_file, <span class=\"literal\">NULL</span>);</div><div class=\"line\">\tscheduleArray.count++;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (g_rotate_error_log)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tINIT_SCHEDULE_ENTRY_EX(scheduleEntries[scheduleArray.count],</div><div class=\"line\">\t\t\tscheduleArray.count + <span class=\"number\">1</span>, g_error_log_rotate_time,</div><div class=\"line\">\t\t\t<span class=\"number\">24</span> * <span class=\"number\">3600</span>, log_notify_rotate, &amp;g_log_context);</div><div class=\"line\">\t\tscheduleArray.count++;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (g_log_file_keep_days &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tlog_set_keep_days(&amp;g_log_context, g_log_file_keep_days);</div><div class=\"line\"></div><div class=\"line\">\t\t\tINIT_SCHEDULE_ENTRY(scheduleEntries[scheduleArray.count],</div><div class=\"line\">\t\t\t\tscheduleArray.count + <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">24</span> * <span class=\"number\">3600</span>,</div><div class=\"line\">\t\t\t\tlog_delete_old_files, &amp;g_log_context);</div><div class=\"line\">\t\t\tscheduleArray.count++;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// create a thread to execute some periodic task above, such as:log_sync_func,tracker_mem_check_alive</span></div><div class=\"line\">    <span class=\"comment\">// tracker_write_status_to_file and so on</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=sched_start(&amp;scheduleArray, &amp;schedule_tid, \\</div><div class=\"line\">\t\tg_thread_stack_size, (<span class=\"keyword\">bool</span> * <span class=\"keyword\">volatile</span>)&amp;g_continue_flag)) != <span class=\"number\">0</span>) <span class=\"comment\">//创建调度线程，以定时执行上面的任务：log_sync_func，tracker_mem_check_alive等</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"exit abnormally!\\n\"</span>);</div><div class=\"line\">\t\tlog_destroy();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=tracker_relationship_init()) != <span class=\"number\">0</span>) <span class=\"comment\">//初始化主lead</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"exit abnormally!\\n\"</span>);</div><div class=\"line\">\t\tlog_destroy();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tlog_set_cache(<span class=\"literal\">true</span>); <span class=\"comment\">//set g_log_context.log_to_cache to true</span></div><div class=\"line\"></div><div class=\"line\">\tbTerminateFlag = <span class=\"literal\">false</span>;</div><div class=\"line\">\tbAcceptEndFlag = <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">\ttracker_accept_loop(sock);  <span class=\"comment\">// the sock is tracker server socket，主线程循环，得到连接，dispatch子线程处理</span></div><div class=\"line\">\tbAcceptEndFlag = <span class=\"literal\">true</span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (g_schedule_flag)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tpthread_kill(schedule_tid, SIGINT);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\ttracker_terminate_threads(); </div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> WITH_HTTPD</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> (g_http_check_flag)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\ttracker_http_check_stop();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">while</span> (g_http_check_flag)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tusleep(<span class=\"number\">50000</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\">\twait_count = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// g_schedule_flag is true means the schedule thread is not ended, see sched_thread_entrance</span></div><div class=\"line\">\t<span class=\"keyword\">while</span> ((g_tracker_thread_count != <span class=\"number\">0</span>) || g_schedule_flag)</div><div class=\"line\">\t&#123;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\">#if defined(DEBUG_FLAG) &amp;&amp; defined(OS_LINUX)</div><div class=\"line\">\t\tif (bSegmentFault)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tsleep(5);</div><div class=\"line\">\t\t\tbreak;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">#endif</div><div class=\"line\">*/</span></div><div class=\"line\"></div><div class=\"line\">\t\tusleep(<span class=\"number\">10000</span>);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (++wait_count &gt; <span class=\"number\">3000</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tlogWarning(<span class=\"string\">\"waiting timeout, exit!\"</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\ttracker_mem_destroy(); <span class=\"comment\">// free the memory in g_groups and free lock allocated previously</span></div><div class=\"line\">\ttracker_service_destroy(); <span class=\"comment\">// wait all child thread to exit</span></div><div class=\"line\">\ttracker_relationship_destroy(); <span class=\"comment\">// do nothing</span></div><div class=\"line\">\t</div><div class=\"line\">\tlogInfo(<span class=\"string\">\"exit normally.\\n\"</span>);</div><div class=\"line\">\tlog_destroy(); <span class=\"comment\">// destory the log system</span></div><div class=\"line\">\t</div><div class=\"line\">\tdelete_pid_file(pidFilename);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//初始化工作线程</span></div><div class=\"line\"><span class=\"comment\">// create work thread: work_thread_entrance func</span></div><div class=\"line\"><span class=\"comment\">// http://slucx.blog.chinaunix.net/uid-29504236-id-4556391.html</span></div><div class=\"line\"><span class=\"comment\">// http://slucx.blog.chinaunix.net/uid-29504236-id-4556487.html</span></div><div class=\"line\"><span class=\"keyword\">int</span> tracker_service_init()</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"comment\">#define ALLOC_CONNECTIONS_ONCE 1024</span></div><div class=\"line\">\t<span class=\"keyword\">int</span> result;</div><div class=\"line\">\t<span class=\"keyword\">int</span> bytes;</div><div class=\"line\">    <span class=\"keyword\">int</span> init_connections;</div><div class=\"line\">\tstruct nio_thread_data *pThreadData;</div><div class=\"line\">\tstruct nio_thread_data *pDataEnd;</div><div class=\"line\">\tpthread_t tid;</div><div class=\"line\">\tpthread_attr_t thread_attr;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=init_pthread_lock(&amp;tracker_thread_lock)) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=init_pthread_lock(&amp;lb_thread_lock)) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=init_pthread_attr(&amp;thread_attr, g_thread_stack_size)) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"init_pthread_attr fail, program exit!\"</span>, <span class=\"keyword\">__LINE__</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">        init_connections = g_max_connections &lt; ALLOC_CONNECTIONS_ONCE ?</div><div class=\"line\">        g_max_connections : ALLOC_CONNECTIONS_ONCE;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=free_queue_init_ex(g_max_connections, init_connections,</div><div class=\"line\">                    ALLOC_CONNECTIONS_ONCE, TRACKER_MAX_PACKAGE_SIZE,</div><div class=\"line\">                    TRACKER_MAX_PACKAGE_SIZE, sizeof(TrackerClientInfo))) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// every thread has one nio_thread_data</span></div><div class=\"line\">\tbytes = sizeof(struct nio_thread_data) * g_work_threads;</div><div class=\"line\">\tg_thread_data = (struct nio_thread_data *)malloc(bytes );</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (g_thread_data == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"malloc %d bytes fail, errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t<span class=\"keyword\">__LINE__</span>, bytes, errno, STRERROR(errno));</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> errno != <span class=\"number\">0</span> ? errno : ENOMEM;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tmemset(g_thread_data, <span class=\"number\">0</span>, bytes);</div><div class=\"line\"></div><div class=\"line\">\tg_tracker_thread_count = <span class=\"number\">0</span>;</div><div class=\"line\">\tpDataEnd = g_thread_data + g_work_threads;   <span class=\"comment\">// 默认g_work_threads为4</span></div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">for</span> (pThreadData=g_thread_data; pThreadData&lt;pDataEnd; pThreadData++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (ioevent_init(&amp;pThreadData-&gt;ev_puller,</div><div class=\"line\">\t\t\tg_max_connections + <span class=\"number\">2</span>, <span class=\"number\">1000</span>, <span class=\"number\">0</span>) != <span class=\"number\">0</span>) <span class=\"comment\">// g_max_connections=256，初始化IO复用函数，超时为1秒</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tresult  = errno != <span class=\"number\">0</span> ? errno : ENOMEM;</div><div class=\"line\">\t\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t\t<span class=\"string\">\"ioevent_init fail, \"</span> \\</div><div class=\"line\">\t\t\t\t<span class=\"string\">\"errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">__LINE__</span>, result, STRERROR(result));</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tresult = fast_timer_init(&amp;pThreadData-&gt;timer,</div><div class=\"line\">\t\t\t\t<span class=\"number\">2</span> * g_fdfs_network_timeout, g_current_time); <span class=\"comment\">//初始化超时事件time wheel</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (result != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t\t<span class=\"string\">\"fast_timer_init fail, \"</span> \\</div><div class=\"line\">\t\t\t\t<span class=\"string\">\"errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">__LINE__</span>, result, STRERROR(result));</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (pipe(pThreadData-&gt;pipe_fds) != <span class=\"number\">0</span>)  <span class=\"comment\">//创建管道</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tresult = errno != <span class=\"number\">0</span> ? errno : EPERM;</div><div class=\"line\">\t\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t\t<span class=\"string\">\"call pipe fail, \"</span> \\</div><div class=\"line\">\t\t\t\t<span class=\"string\">\"errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">__LINE__</span>, result, STRERROR(result));</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#if defined(OS_LINUX)</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((result=fd_add_flags(pThreadData-&gt;pipe_fds[<span class=\"number\">0</span>], \\</div><div class=\"line\">\t\t\t\tO_NONBLOCK | O_NOATIME)) != <span class=\"number\">0</span>) <span class=\"comment\">// O_NOATIME: Do not update the file last access time </span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"><span class=\"comment\">#else</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((result=fd_add_flags(pThreadData-&gt;pipe_fds[<span class=\"number\">0</span>], \\</div><div class=\"line\">\t\t\t\tO_NONBLOCK)) != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"><span class=\"comment\">#endif</span></div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((result=pthread_create(&amp;tid, &amp;thread_attr, \\</div><div class=\"line\">\t\t\twork_thread_entrance, pThreadData)) != <span class=\"number\">0</span>)  <span class=\"comment\">//创建工作线程</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t\t<span class=\"string\">\"create thread failed, startup threads: %d, \"</span> \\</div><div class=\"line\">\t\t\t\t<span class=\"string\">\"errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">__LINE__</span>, g_tracker_thread_count, \\</div><div class=\"line\">\t\t\t\tresult, STRERROR(result));</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> ((result=pthread_mutex_lock(&amp;tracker_thread_lock)) != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">\"call pthread_mutex_lock fail, \"</span> \\</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">\"errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">__LINE__</span>, result, STRERROR(result));</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tg_tracker_thread_count++; <span class=\"comment\">//工作线程数量递增</span></div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> ((result=pthread_mutex_unlock(&amp;tracker_thread_lock)) != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">\"call pthread_mutex_lock fail, \"</span> \\</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">\"errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">__LINE__</span>, result, STRERROR(result));</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpthread_attr_destroy(&amp;thread_attr);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//工作线程work_thread_entrance</span></div><div class=\"line\"><span class=\"comment\">// tracker child thread</span></div><div class=\"line\"><span class=\"keyword\">static</span> void *work_thread_entrance(void* arg)</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> result;</div><div class=\"line\">\tstruct nio_thread_data *pThreadData;</div><div class=\"line\"></div><div class=\"line\">\tpThreadData = (struct nio_thread_data *)arg;</div><div class=\"line\">\t</div><div class=\"line\">\tioevent_loop(pThreadData, recv_notify_read, task_finish_clean_up,</div><div class=\"line\">\t\t&amp;g_continue_flag);  <span class=\"comment\">// 循环等待事件的到来并处理</span></div><div class=\"line\">\t</div><div class=\"line\">\tioevent_destroy(&amp;pThreadData-&gt;ev_puller);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=pthread_mutex_lock(&amp;tracker_thread_lock)) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"call pthread_mutex_lock fail, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t<span class=\"keyword\">__LINE__</span>, result, STRERROR(result));</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tg_tracker_thread_count--;  <span class=\"comment\">//工作线程数量递减</span></div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=pthread_mutex_unlock(&amp;tracker_thread_lock)) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"call pthread_mutex_lock fail, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t<span class=\"keyword\">__LINE__</span>, result, STRERROR(result));</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">NULL</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//主线程</span></div><div class=\"line\"><span class=\"comment\">// accept a client request and dispatch request to child thread for processing</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> *<span class=\"title\">accept_thread_entrance</span><span class=\"params\">(<span class=\"keyword\">void</span>* arg)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> server_sock;</div><div class=\"line\">\t<span class=\"keyword\">int</span> incomesock;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> sockaddr_in inaddr;</div><div class=\"line\">\t<span class=\"keyword\">socklen_t</span> sockaddr_len;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> nio_thread_data *pThreadData;</div><div class=\"line\">\tserver_sock = (<span class=\"keyword\">long</span>)arg;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">while</span> (g_continue_flag)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tsockaddr_len = <span class=\"keyword\">sizeof</span>(inaddr);</div><div class=\"line\">\t\tincomesock = accept(server_sock, (<span class=\"keyword\">struct</span> sockaddr*)&amp;inaddr, &amp;sockaddr_len);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (incomesock &lt; <span class=\"number\">0</span>) <span class=\"comment\">//error</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!(errno == EINTR || errno == EAGAIN))</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tlogError(<span class=\"string\">\"file: \"</span>__FILE__<span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">\"accept failed, \"</span> \\</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">\"errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t\t\t__LINE__, errno, STRERROR(errno));</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tpThreadData = g_thread_data + incomesock % g_work_threads;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (write(pThreadData-&gt;pipe_fds[<span class=\"number\">1</span>], &amp;incomesock, \\</div><div class=\"line\">\t\t\t<span class=\"keyword\">sizeof</span>(incomesock)) != <span class=\"keyword\">sizeof</span>(incomesock)) <span class=\"comment\">// 将得到的client fd写入某个管道中，wakeup child thread</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tclose(incomesock);</div><div class=\"line\">\t\t\tlogError(<span class=\"string\">\"file: \"</span>__FILE__<span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t\t<span class=\"string\">\"call write failed, \"</span> \\</div><div class=\"line\">\t\t\t\t<span class=\"string\">\"errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t\t__LINE__, errno, STRERROR(errno));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> current_connections;</div><div class=\"line\">            current_connections = __sync_add_and_fetch(&amp;g_connection_stat.</div><div class=\"line\">                    current_count, <span class=\"number\">1</span>);</div><div class=\"line\">\t\t\t</div><div class=\"line\">            <span class=\"keyword\">if</span> (current_connections &gt; g_connection_stat.max_count) </div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">                g_connection_stat.max_count = current_connections;</div><div class=\"line\">            &#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">        &#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"fastdfs之事件监听","date":"2016-12-04T14:25:51.000Z","_content":"\n## 思想\nfastdfs需要监听某个fd的事件，当fd就绪时自动调用某个函数进行处理，其思想是将该事件的回调函数，fd保存到epoll_event结构体中，当该fd就绪时就可得到该结构体，从而调用该回调函数；\n[epoll机制](http://blog.csdn.net/yusiguyuan/article/details/15027821)\n<!--more-->\n\n## 相关数据结构\n```\ntypedef struct ioevent_puller {\n    int size;  //set to g_max_connections + 2,default is 256+2, max events (fd) , equal as the parameter of epoll_create\n    int extra_events;\n    int poll_fd; // poll_fd = epoll_create(ioevent->size)\n\n/*\nWhen  successful,  epoll_wait()  returns the number of file descriptors\n       ready for the requested I/O, or zero if no file descriptor became ready\n       during  the  requested  timeout  milliseconds.   When  an error occurs,\n       epoll_wait() returns -1 and errno is set appropriately.\n*/\n    struct \n\t{\n        int index;\n        int count;  // count=epoll_wait(...)\n    } iterator;  //for deal event loop\n\n#if IOEVENT_USE_EPOLL\n    struct epoll_event *events; // the size is ( size * sizeof(struct epoll_event) )\n    int timeout;                  // default is 1000\n#elif IOEVENT_USE_KQUEUE\n    struct kevent *events;\n    struct timespec timeout;\n    int care_events;\n#elif IOEVENT_USE_PORT\n    port_event_t *events;\n    timespec_t timeout;\n#endif\n} IOEventPoller;\n\ntypedef void (*IOEventCallback) (int sock, short event, void *arg);\n\n\ntypedef struct ioevent_entry\n{\n\tint fd;                // it will be added to nio_thread_data->ev_puller\n\tFastTimerEntry timer; // for event timeout, it will be added to nio_thread_data->timer\n\tIOEventCallback callback;\n} IOEventEntry;\n\n#if IOEVENT_USE_EPOLL\n  #define IOEVENT_GET_EVENTS(ioevent, index) \\\n      ioevent->events[index].events\n\n#if IOEVENT_USE_EPOLL\n  #define IOEVENT_GET_DATA(ioevent, index)  \\\n      ioevent->events[index].data.ptr\n\n```\n\n```\n//初始化\n//ioevent_init(&pThreadData->ev_puller,g_max_connections + 2, 1000, 0) // 1000毫秒\n\n// size=256+2, timeout_ms=1000, extra_events=0\n// ioevent_init(&pThreadData->ev_puller, g_max_connections + 2, 1000, 0)\nint ioevent_init(IOEventPoller *ioevent, const int size,\n    const int timeout_ms, const int extra_events)\n{\n  int bytes;\n\n  ioevent->size = size;\n  ioevent->extra_events = extra_events;\n  ioevent->iterator.index = 0;\n  ioevent->iterator.count = 0;\n\n#if IOEVENT_USE_EPOLL\n  ioevent->poll_fd = epoll_create(ioevent->size);\n  bytes = sizeof(struct epoll_event) * size;\n  ioevent->events = (struct epoll_event *)malloc(bytes);\n#elif IOEVENT_USE_KQUEUE\n  ioevent->poll_fd = kqueue();\n  bytes = sizeof(struct kevent) * size;\n  ioevent->events = (struct kevent *)malloc(bytes);\n  ioevent->care_events = 0;\n#elif IOEVENT_USE_PORT\n  ioevent->poll_fd = port_create();\n  bytes = sizeof(port_event_t) * size;\n  ioevent->events = (port_event_t *)malloc(bytes);\n#endif\n\n  if (ioevent->events == NULL) \n  {\n    return errno != 0 ? errno : ENOMEM;\n  }\n\n  // set the ioevent->timeout to timeout_ms\n  ioevent_set_timeout(ioevent, timeout_ms); // 设置超时时间为1秒\n\n  return 0;\n}\n\n\n//事件监听处理循环\n//ioevent_loop(pThreadData, recv_notify_read, task_finish_clean_up, &g_continue_flag);\n/*\nioevent_loop(pThreadData, recv_notify_read, task_finish_clean_up,\n\t\t&g_continue_flag);\n\t\t// g_continue_flag is true default\n*/\nint ioevent_loop(struct nio_thread_data *pThreadData,\n\tIOEventCallback recv_notify_callback, TaskCleanUpCallback\n\tclean_up_callback, volatile bool *continue_flag)\n{\n\tint result;\n\tIOEventEntry ev_notify;\n\tFastTimerEntry head;\n\tstruct fast_task_info *pTask;\n\ttime_t last_check_time;\n\tint count;\n\n\tmemset(&ev_notify, 0, sizeof(ev_notify));\n\tev_notify.fd = pThreadData->pipe_fds[0];\n\tev_notify.callback = recv_notify_callback;\n\t\n\tif (ioevent_attach(&pThreadData->ev_puller,\n\t\tpThreadData->pipe_fds[0], IOEVENT_READ,\n\t\t&ev_notify) != 0)\n\t{\n\t\tresult = errno != 0 ? errno : ENOMEM;\n\t\tlogCrit(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"ioevent_attach fail, \" \\\n\t\t\t\"errno: %d, error info: %s\", \\\n\t\t\t__LINE__, result, STRERROR(result));\n\t\treturn result;\n\t}\n\n    pThreadData->deleted_list = NULL;\n\tlast_check_time = g_current_time;\n\t\n\twhile (*continue_flag)\n\t{\n\t\t// one seconds later, ioevent_poll will return\n\t\tpThreadData->ev_puller.iterator.count = ioevent_poll(&pThreadData->ev_puller);\n\t\t\n\t\tif (pThreadData->ev_puller.iterator.count > 0)\n\t\t{\n\t\t\tdeal_ioevents(&pThreadData->ev_puller);\n\t\t}\n\t\telse if (pThreadData->ev_puller.iterator.count < 0) // error occured\n\t\t{\n\t\t\tresult = errno != 0 ? errno : EINVAL;\n\t\t\t\n\t\t\tif (result != EINTR)\n\t\t\t{\n\t\t\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\t\t\"ioevent_poll fail, \" \\\n\t\t\t\t\t\"errno: %d, error info: %s\", \\\n\t\t\t\t\t__LINE__, result, STRERROR(result));\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\n        // timeout, 1 second later \n\t\tif (pThreadData->deleted_list != NULL) // cleanup task callback is not null\n\t\t{\n\t\t\tcount = 0;\n\t\t\t\n\t\t\twhile (pThreadData->deleted_list != NULL)\n\t\t\t{\n\t\t\t\tpTask = pThreadData->deleted_list;\n\t\t\t\tpThreadData->deleted_list = pTask->next;\n\n\t\t\t\tclean_up_callback(pTask);\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\t\n\t\t\tlogDebug(\"cleanup task count: %d\", count);\n\t\t}\n\n\t\tif (g_current_time - last_check_time > 0)\n\t\t{\n\t\t\tlast_check_time = g_current_time;  // the unit of g_current_time is seconds \n\t\t\tcount = fast_timer_timeouts_get(\n\t\t\t\t&pThreadData->timer, g_current_time, &head); // get the expire event count\n\t\t\t\t\n\t\t\tif (count > 0)  // timeout event has been saved to head\n\t\t\t{\n\t\t\t\tdeal_timeouts(&head); // process the timeout event\n\t\t\t}\n\t\t}\n\n        if (pThreadData->thread_loop_callback != NULL) \n\t\t{\n            pThreadData->thread_loop_callback(pThreadData);  // call this function every one loop \n        }\n\t\t\n\t}\n\n\treturn 0;\n}\n\n\nint ioevent_poll(IOEventPoller *ioevent)\n{\n#if IOEVENT_USE_EPOLL\n  return epoll_wait(ioevent->poll_fd, ioevent->events, ioevent->size, ioevent->timeout);\n#elif IOEVENT_USE_KQUEUE\n  return kevent(ioevent->poll_fd, NULL, 0, ioevent->events, ioevent->size, &ioevent->timeout);\n#elif IOEVENT_USE_PORT\n  int result;\n  int retval;\n  unsigned int nget = 1;\n  if((retval = port_getn(ioevent->poll_fd, ioevent->events,\n          ioevent->size, &nget, &ioevent->timeout)) == 0)\n  {\n    result = (int)nget;\n  } else {\n    switch(errno) {\n      case EINTR:\n      case EAGAIN:\n      case ETIME:\n        if (nget > 0) {\n          result = (int)nget;\n        }\n        else {\n          result = 0;\n        }\n        break;\n      default:\n        result = -1;\n        break;\n    }\n  }\n  return result;\n#else\n#error port me\n#endif\n}\n\n//add a fd event to ioevent to listen\n// ioevent_attach(&pThread->ev_puller,sock, event, pTask)\nint ioevent_attach(IOEventPoller *ioevent, const int fd, const int e,\n    void *data)\n{\n#if IOEVENT_USE_EPOLL\n  struct epoll_event ev;\n  memset(&ev, 0, sizeof(ev));\n  ev.events = e | ioevent->extra_events;\n  ev.data.ptr = data;// 将参数保存到data.ptr中去，依据上面的调用data为IOEventEntry结构类型\n  return epoll_ctl(ioevent->poll_fd, EPOLL_CTL_ADD, fd, &ev);\n#elif IOEVENT_USE_KQUEUE\n  struct kevent ev[2];\n  int n = 0;\n  if (e & IOEVENT_READ) {\n    EV_SET(&ev[n++], fd, EVFILT_READ, EV_ADD | ioevent->extra_events, 0, 0, data);\n  }\n  if (e & IOEVENT_WRITE) {\n    EV_SET(&ev[n++], fd, EVFILT_WRITE, EV_ADD | ioevent->extra_events, 0, 0, data);\n  }\n  ioevent->care_events = e;\n  return kevent(ioevent->poll_fd, ev, n, NULL, 0, NULL);\n#elif IOEVENT_USE_PORT\n  return port_associate(ioevent->poll_fd, PORT_SOURCE_FD, fd, e, data);\n#endif\n}\n\n// 事件处理\n// process the io events by callback function \n// struct epoll_event: http://blog.csdn.net/wangrice2004/article/details/6651320 \nstatic void deal_ioevents(IOEventPoller *ioevent)\n{\n\tint event;\n\tIOEventEntry *pEntry;\n\n\tfor (ioevent->iterator.index=0; ioevent->iterator.index < ioevent->iterator.\n            count; ioevent->iterator.index++)\n\t{\n\t\tevent = IOEVENT_GET_EVENTS(ioevent, ioevent->iterator.index);\n\t\tpEntry = (IOEventEntry *)IOEVENT_GET_DATA(ioevent, ioevent->iterator.index);  // 得到ioevent_attach设置的data，为IOEventEntry类型\n\t\t// pEntry is either IOEventEntry(ioevent_loop -> ioevent_attach)or fast_task_info(ioevent_set->ioevent_attach)\n\t\t// but the first elem of fast_task_info is also IOEventEntry\n\t\t\n        if (pEntry != NULL)  // call the callback function, we set data in ioevent_attach func\n\t{\n            pEntry->callback(pEntry->fd, event, pEntry->timer.data); // pEntry->timer.data is fast_task_info(see ioevent_set func)\n        }\n        else \n\t\t{\n            logDebug(\"file: \"__FILE__\", line: %d, \"\n                    \"ignore iovent : %d, index: %d\", __LINE__, event, ioevent->iterator.index);\n        }\n\t\t\n\t}\n}\n\n```\n","source":"_posts/fastdfs之事件监听.md","raw":"---\ntitle: fastdfs之事件监听\ndate: 2016-12-04 14:25:51\ntags: [fastdfs,epoll]\n---\n\n## 思想\nfastdfs需要监听某个fd的事件，当fd就绪时自动调用某个函数进行处理，其思想是将该事件的回调函数，fd保存到epoll_event结构体中，当该fd就绪时就可得到该结构体，从而调用该回调函数；\n[epoll机制](http://blog.csdn.net/yusiguyuan/article/details/15027821)\n<!--more-->\n\n## 相关数据结构\n```\ntypedef struct ioevent_puller {\n    int size;  //set to g_max_connections + 2,default is 256+2, max events (fd) , equal as the parameter of epoll_create\n    int extra_events;\n    int poll_fd; // poll_fd = epoll_create(ioevent->size)\n\n/*\nWhen  successful,  epoll_wait()  returns the number of file descriptors\n       ready for the requested I/O, or zero if no file descriptor became ready\n       during  the  requested  timeout  milliseconds.   When  an error occurs,\n       epoll_wait() returns -1 and errno is set appropriately.\n*/\n    struct \n\t{\n        int index;\n        int count;  // count=epoll_wait(...)\n    } iterator;  //for deal event loop\n\n#if IOEVENT_USE_EPOLL\n    struct epoll_event *events; // the size is ( size * sizeof(struct epoll_event) )\n    int timeout;                  // default is 1000\n#elif IOEVENT_USE_KQUEUE\n    struct kevent *events;\n    struct timespec timeout;\n    int care_events;\n#elif IOEVENT_USE_PORT\n    port_event_t *events;\n    timespec_t timeout;\n#endif\n} IOEventPoller;\n\ntypedef void (*IOEventCallback) (int sock, short event, void *arg);\n\n\ntypedef struct ioevent_entry\n{\n\tint fd;                // it will be added to nio_thread_data->ev_puller\n\tFastTimerEntry timer; // for event timeout, it will be added to nio_thread_data->timer\n\tIOEventCallback callback;\n} IOEventEntry;\n\n#if IOEVENT_USE_EPOLL\n  #define IOEVENT_GET_EVENTS(ioevent, index) \\\n      ioevent->events[index].events\n\n#if IOEVENT_USE_EPOLL\n  #define IOEVENT_GET_DATA(ioevent, index)  \\\n      ioevent->events[index].data.ptr\n\n```\n\n```\n//初始化\n//ioevent_init(&pThreadData->ev_puller,g_max_connections + 2, 1000, 0) // 1000毫秒\n\n// size=256+2, timeout_ms=1000, extra_events=0\n// ioevent_init(&pThreadData->ev_puller, g_max_connections + 2, 1000, 0)\nint ioevent_init(IOEventPoller *ioevent, const int size,\n    const int timeout_ms, const int extra_events)\n{\n  int bytes;\n\n  ioevent->size = size;\n  ioevent->extra_events = extra_events;\n  ioevent->iterator.index = 0;\n  ioevent->iterator.count = 0;\n\n#if IOEVENT_USE_EPOLL\n  ioevent->poll_fd = epoll_create(ioevent->size);\n  bytes = sizeof(struct epoll_event) * size;\n  ioevent->events = (struct epoll_event *)malloc(bytes);\n#elif IOEVENT_USE_KQUEUE\n  ioevent->poll_fd = kqueue();\n  bytes = sizeof(struct kevent) * size;\n  ioevent->events = (struct kevent *)malloc(bytes);\n  ioevent->care_events = 0;\n#elif IOEVENT_USE_PORT\n  ioevent->poll_fd = port_create();\n  bytes = sizeof(port_event_t) * size;\n  ioevent->events = (port_event_t *)malloc(bytes);\n#endif\n\n  if (ioevent->events == NULL) \n  {\n    return errno != 0 ? errno : ENOMEM;\n  }\n\n  // set the ioevent->timeout to timeout_ms\n  ioevent_set_timeout(ioevent, timeout_ms); // 设置超时时间为1秒\n\n  return 0;\n}\n\n\n//事件监听处理循环\n//ioevent_loop(pThreadData, recv_notify_read, task_finish_clean_up, &g_continue_flag);\n/*\nioevent_loop(pThreadData, recv_notify_read, task_finish_clean_up,\n\t\t&g_continue_flag);\n\t\t// g_continue_flag is true default\n*/\nint ioevent_loop(struct nio_thread_data *pThreadData,\n\tIOEventCallback recv_notify_callback, TaskCleanUpCallback\n\tclean_up_callback, volatile bool *continue_flag)\n{\n\tint result;\n\tIOEventEntry ev_notify;\n\tFastTimerEntry head;\n\tstruct fast_task_info *pTask;\n\ttime_t last_check_time;\n\tint count;\n\n\tmemset(&ev_notify, 0, sizeof(ev_notify));\n\tev_notify.fd = pThreadData->pipe_fds[0];\n\tev_notify.callback = recv_notify_callback;\n\t\n\tif (ioevent_attach(&pThreadData->ev_puller,\n\t\tpThreadData->pipe_fds[0], IOEVENT_READ,\n\t\t&ev_notify) != 0)\n\t{\n\t\tresult = errno != 0 ? errno : ENOMEM;\n\t\tlogCrit(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"ioevent_attach fail, \" \\\n\t\t\t\"errno: %d, error info: %s\", \\\n\t\t\t__LINE__, result, STRERROR(result));\n\t\treturn result;\n\t}\n\n    pThreadData->deleted_list = NULL;\n\tlast_check_time = g_current_time;\n\t\n\twhile (*continue_flag)\n\t{\n\t\t// one seconds later, ioevent_poll will return\n\t\tpThreadData->ev_puller.iterator.count = ioevent_poll(&pThreadData->ev_puller);\n\t\t\n\t\tif (pThreadData->ev_puller.iterator.count > 0)\n\t\t{\n\t\t\tdeal_ioevents(&pThreadData->ev_puller);\n\t\t}\n\t\telse if (pThreadData->ev_puller.iterator.count < 0) // error occured\n\t\t{\n\t\t\tresult = errno != 0 ? errno : EINVAL;\n\t\t\t\n\t\t\tif (result != EINTR)\n\t\t\t{\n\t\t\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\t\t\"ioevent_poll fail, \" \\\n\t\t\t\t\t\"errno: %d, error info: %s\", \\\n\t\t\t\t\t__LINE__, result, STRERROR(result));\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\n        // timeout, 1 second later \n\t\tif (pThreadData->deleted_list != NULL) // cleanup task callback is not null\n\t\t{\n\t\t\tcount = 0;\n\t\t\t\n\t\t\twhile (pThreadData->deleted_list != NULL)\n\t\t\t{\n\t\t\t\tpTask = pThreadData->deleted_list;\n\t\t\t\tpThreadData->deleted_list = pTask->next;\n\n\t\t\t\tclean_up_callback(pTask);\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\t\n\t\t\tlogDebug(\"cleanup task count: %d\", count);\n\t\t}\n\n\t\tif (g_current_time - last_check_time > 0)\n\t\t{\n\t\t\tlast_check_time = g_current_time;  // the unit of g_current_time is seconds \n\t\t\tcount = fast_timer_timeouts_get(\n\t\t\t\t&pThreadData->timer, g_current_time, &head); // get the expire event count\n\t\t\t\t\n\t\t\tif (count > 0)  // timeout event has been saved to head\n\t\t\t{\n\t\t\t\tdeal_timeouts(&head); // process the timeout event\n\t\t\t}\n\t\t}\n\n        if (pThreadData->thread_loop_callback != NULL) \n\t\t{\n            pThreadData->thread_loop_callback(pThreadData);  // call this function every one loop \n        }\n\t\t\n\t}\n\n\treturn 0;\n}\n\n\nint ioevent_poll(IOEventPoller *ioevent)\n{\n#if IOEVENT_USE_EPOLL\n  return epoll_wait(ioevent->poll_fd, ioevent->events, ioevent->size, ioevent->timeout);\n#elif IOEVENT_USE_KQUEUE\n  return kevent(ioevent->poll_fd, NULL, 0, ioevent->events, ioevent->size, &ioevent->timeout);\n#elif IOEVENT_USE_PORT\n  int result;\n  int retval;\n  unsigned int nget = 1;\n  if((retval = port_getn(ioevent->poll_fd, ioevent->events,\n          ioevent->size, &nget, &ioevent->timeout)) == 0)\n  {\n    result = (int)nget;\n  } else {\n    switch(errno) {\n      case EINTR:\n      case EAGAIN:\n      case ETIME:\n        if (nget > 0) {\n          result = (int)nget;\n        }\n        else {\n          result = 0;\n        }\n        break;\n      default:\n        result = -1;\n        break;\n    }\n  }\n  return result;\n#else\n#error port me\n#endif\n}\n\n//add a fd event to ioevent to listen\n// ioevent_attach(&pThread->ev_puller,sock, event, pTask)\nint ioevent_attach(IOEventPoller *ioevent, const int fd, const int e,\n    void *data)\n{\n#if IOEVENT_USE_EPOLL\n  struct epoll_event ev;\n  memset(&ev, 0, sizeof(ev));\n  ev.events = e | ioevent->extra_events;\n  ev.data.ptr = data;// 将参数保存到data.ptr中去，依据上面的调用data为IOEventEntry结构类型\n  return epoll_ctl(ioevent->poll_fd, EPOLL_CTL_ADD, fd, &ev);\n#elif IOEVENT_USE_KQUEUE\n  struct kevent ev[2];\n  int n = 0;\n  if (e & IOEVENT_READ) {\n    EV_SET(&ev[n++], fd, EVFILT_READ, EV_ADD | ioevent->extra_events, 0, 0, data);\n  }\n  if (e & IOEVENT_WRITE) {\n    EV_SET(&ev[n++], fd, EVFILT_WRITE, EV_ADD | ioevent->extra_events, 0, 0, data);\n  }\n  ioevent->care_events = e;\n  return kevent(ioevent->poll_fd, ev, n, NULL, 0, NULL);\n#elif IOEVENT_USE_PORT\n  return port_associate(ioevent->poll_fd, PORT_SOURCE_FD, fd, e, data);\n#endif\n}\n\n// 事件处理\n// process the io events by callback function \n// struct epoll_event: http://blog.csdn.net/wangrice2004/article/details/6651320 \nstatic void deal_ioevents(IOEventPoller *ioevent)\n{\n\tint event;\n\tIOEventEntry *pEntry;\n\n\tfor (ioevent->iterator.index=0; ioevent->iterator.index < ioevent->iterator.\n            count; ioevent->iterator.index++)\n\t{\n\t\tevent = IOEVENT_GET_EVENTS(ioevent, ioevent->iterator.index);\n\t\tpEntry = (IOEventEntry *)IOEVENT_GET_DATA(ioevent, ioevent->iterator.index);  // 得到ioevent_attach设置的data，为IOEventEntry类型\n\t\t// pEntry is either IOEventEntry(ioevent_loop -> ioevent_attach)or fast_task_info(ioevent_set->ioevent_attach)\n\t\t// but the first elem of fast_task_info is also IOEventEntry\n\t\t\n        if (pEntry != NULL)  // call the callback function, we set data in ioevent_attach func\n\t{\n            pEntry->callback(pEntry->fd, event, pEntry->timer.data); // pEntry->timer.data is fast_task_info(see ioevent_set func)\n        }\n        else \n\t\t{\n            logDebug(\"file: \"__FILE__\", line: %d, \"\n                    \"ignore iovent : %d, index: %d\", __LINE__, event, ioevent->iterator.index);\n        }\n\t\t\n\t}\n}\n\n```\n","slug":"fastdfs之事件监听","published":1,"updated":"2016-12-04T07:15:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwg2v9iz00046al83hurv4i5","content":"<h2 id=\"思想\"><a href=\"#思想\" class=\"headerlink\" title=\"思想\"></a>思想</h2><p>fastdfs需要监听某个fd的事件，当fd就绪时自动调用某个函数进行处理，其思想是将该事件的回调函数，fd保存到epoll_event结构体中，当该fd就绪时就可得到该结构体，从而调用该回调函数；<br><a href=\"http://blog.csdn.net/yusiguyuan/article/details/15027821\" target=\"_blank\" rel=\"external\">epoll机制</a><br><a id=\"more\"></a></p>\n<h2 id=\"相关数据结构\"><a href=\"#相关数据结构\" class=\"headerlink\" title=\"相关数据结构\"></a>相关数据结构</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> ioevent_puller &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> size;  <span class=\"comment\">//set to g_max_connections + 2,default is 256+2, max events (fd) , equal as the parameter of epoll_create</span></div><div class=\"line\">    <span class=\"keyword\">int</span> extra_events;</div><div class=\"line\">    <span class=\"keyword\">int</span> poll_fd; <span class=\"comment\">// poll_fd = epoll_create(ioevent-&gt;size)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">When  successful,  epoll_wait()  returns the number of file descriptors</div><div class=\"line\">       ready for the requested I/O, or zero if no file descriptor became ready</div><div class=\"line\">       during  the  requested  timeout  milliseconds.   When  an error occurs,</div><div class=\"line\">       epoll_wait() returns -1 and errno is set appropriately.</div><div class=\"line\">*/</div><div class=\"line\">    <span class=\"keyword\">struct</span> </div><div class=\"line\">\t&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> index;</div><div class=\"line\">        <span class=\"keyword\">int</span> count;  <span class=\"comment\">// count=epoll_wait(...)</span></div><div class=\"line\">    &#125; iterator;  <span class=\"comment\">//for deal event loop</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> IOEVENT_USE_EPOLL</span></div><div class=\"line\">    <span class=\"keyword\">struct</span> epoll_event *events; <span class=\"comment\">// the size is ( size * sizeof(struct epoll_event) )</span></div><div class=\"line\">    <span class=\"keyword\">int</span> timeout;                  <span class=\"comment\">// default is 1000</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">elif</span> IOEVENT_USE_KQUEUE</span></div><div class=\"line\">    <span class=\"keyword\">struct</span> kevent *events;</div><div class=\"line\">    <span class=\"keyword\">struct</span> timespec timeout;</div><div class=\"line\">    <span class=\"keyword\">int</span> care_events;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">elif</span> IOEVENT_USE_PORT</span></div><div class=\"line\">    <span class=\"keyword\">port_event_t</span> *events;</div><div class=\"line\">    <span class=\"keyword\">timespec_t</span> timeout;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\">&#125; IOEventPoller;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">void</span> <span class=\"params\">(*IOEventCallback)</span> <span class=\"params\">(<span class=\"keyword\">int</span> sock, <span class=\"keyword\">short</span> event, <span class=\"keyword\">void</span> *arg)</span></span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> ioevent_entry</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> fd;                <span class=\"comment\">// it will be added to nio_thread_data-&gt;ev_puller</span></div><div class=\"line\">\tFastTimerEntry timer; <span class=\"comment\">// for event timeout, it will be added to nio_thread_data-&gt;timer</span></div><div class=\"line\">\tIOEventCallback callback;</div><div class=\"line\">&#125; IOEventEntry;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> IOEVENT_USE_EPOLL</span></div><div class=\"line\">  <span class=\"meta\">#<span class=\"meta-keyword\">define</span> IOEVENT_GET_EVENTS(ioevent, index) \\</span></div><div class=\"line\">      ioevent-&gt;events[index].events</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> IOEVENT_USE_EPOLL</span></div><div class=\"line\">  <span class=\"meta\">#<span class=\"meta-keyword\">define</span> IOEVENT_GET_DATA(ioevent, index)  \\</span></div><div class=\"line\">      ioevent-&gt;events[index].data.ptr</div></pre></td></tr></table></figure>\n<figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//初始化</span></div><div class=\"line\"><span class=\"comment\">//ioevent_init(&amp;pThreadData-&gt;ev_puller,g_max_connections + 2, 1000, 0) // 1000毫秒</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// size=256+2, timeout_ms=1000, extra_events=0</span></div><div class=\"line\"><span class=\"comment\">// ioevent_init(&amp;pThreadData-&gt;ev_puller, g_max_connections + 2, 1000, 0)</span></div><div class=\"line\"><span class=\"keyword\">int</span> ioevent_init(IOEventPoller *ioevent, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> size,</div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> timeout_ms, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> extra_events)</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> bytes;</div><div class=\"line\"></div><div class=\"line\">  ioevent-&gt;size = size;</div><div class=\"line\">  ioevent-&gt;extra_events = extra_events;</div><div class=\"line\">  ioevent-&gt;iterator.index = <span class=\"number\">0</span>;</div><div class=\"line\">  ioevent-&gt;iterator.count = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#if IOEVENT_USE_EPOLL</span></div><div class=\"line\">  ioevent-&gt;poll_fd = epoll_create(ioevent-&gt;size);</div><div class=\"line\">  bytes = sizeof(struct epoll_event) * size;</div><div class=\"line\">  ioevent-&gt;events = (struct epoll_event *)malloc(bytes);</div><div class=\"line\"><span class=\"comment\">#elif IOEVENT_USE_KQUEUE</span></div><div class=\"line\">  ioevent-&gt;poll_fd = kqueue();</div><div class=\"line\">  bytes = sizeof(struct kevent) * size;</div><div class=\"line\">  ioevent-&gt;events = (struct kevent *)malloc(bytes);</div><div class=\"line\">  ioevent-&gt;care_events = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"comment\">#elif IOEVENT_USE_PORT</span></div><div class=\"line\">  ioevent-&gt;poll_fd = port_create();</div><div class=\"line\">  bytes = sizeof(port_event_t) * size;</div><div class=\"line\">  ioevent-&gt;events = (port_event_t *)malloc(bytes);</div><div class=\"line\"><span class=\"comment\">#endif</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (ioevent-&gt;events == <span class=\"keyword\">NULL</span>) </div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> errno != <span class=\"number\">0</span> ? errno : ENOMEM;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// set the ioevent-&gt;timeout to timeout_ms</span></div><div class=\"line\">  ioevent_set_timeout(ioevent, timeout_ms); <span class=\"comment\">// 设置超时时间为1秒</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//事件监听处理循环</span></div><div class=\"line\"><span class=\"comment\">//ioevent_loop(pThreadData, recv_notify_read, task_finish_clean_up, &amp;g_continue_flag);</span></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">ioevent_loop(pThreadData, recv_notify_read, task_finish_clean_up,</div><div class=\"line\">\t\t&amp;g_continue_flag);</div><div class=\"line\">\t\t// g_continue_flag is true default</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"keyword\">int</span> ioevent_loop(struct nio_thread_data *pThreadData,</div><div class=\"line\">\tIOEventCallback recv_notify_callback, TaskCleanUpCallback</div><div class=\"line\">\tclean_up_callback, volatile <span class=\"keyword\">bool</span> *continue_flag)</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> result;</div><div class=\"line\">\tIOEventEntry ev_notify;</div><div class=\"line\">\tFastTimerEntry head;</div><div class=\"line\">\tstruct fast_task_info *pTask;</div><div class=\"line\">\ttime_t last_check_time;</div><div class=\"line\">\t<span class=\"keyword\">int</span> count;</div><div class=\"line\"></div><div class=\"line\">\tmemset(&amp;ev_notify, <span class=\"number\">0</span>, sizeof(ev_notify));</div><div class=\"line\">\tev_notify.fd = pThreadData-&gt;pipe_fds[<span class=\"number\">0</span>];</div><div class=\"line\">\tev_notify.callback = recv_notify_callback;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (ioevent_attach(&amp;pThreadData-&gt;ev_puller,</div><div class=\"line\">\t\tpThreadData-&gt;pipe_fds[<span class=\"number\">0</span>], IOEVENT_READ,</div><div class=\"line\">\t\t&amp;ev_notify) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tresult = errno != <span class=\"number\">0</span> ? errno : ENOMEM;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"ioevent_attach fail, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t<span class=\"keyword\">__LINE__</span>, result, STRERROR(result));</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">    pThreadData-&gt;deleted_list = <span class=\"keyword\">NULL</span>;</div><div class=\"line\">\tlast_check_time = g_current_time;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">while</span> (*continue_flag)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// one seconds later, ioevent_poll will return</span></div><div class=\"line\">\t\tpThreadData-&gt;ev_puller.iterator.count = ioevent_poll(&amp;pThreadData-&gt;ev_puller);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (pThreadData-&gt;ev_puller.iterator.count &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tdeal_ioevents(&amp;pThreadData-&gt;ev_puller);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pThreadData-&gt;ev_puller.iterator.count &lt; <span class=\"number\">0</span>) <span class=\"comment\">// error occured</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tresult = errno != <span class=\"number\">0</span> ? errno : EINVAL;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (result != EINTR)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">\"ioevent_poll fail, \"</span> \\</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">\"errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">__LINE__</span>, result, STRERROR(result));</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// timeout, 1 second later </span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (pThreadData-&gt;deleted_list != <span class=\"keyword\">NULL</span>) <span class=\"comment\">// cleanup task callback is not null</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tcount = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (pThreadData-&gt;deleted_list != <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tpTask = pThreadData-&gt;deleted_list;</div><div class=\"line\">\t\t\t\tpThreadData-&gt;deleted_list = pTask-&gt;next;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\tclean_up_callback(pTask);</div><div class=\"line\">\t\t\t\tcount++;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tlogDebug(<span class=\"string\">\"cleanup task count: %d\"</span>, count);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (g_current_time - last_check_time &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tlast_check_time = g_current_time;  <span class=\"comment\">// the unit of g_current_time is seconds </span></div><div class=\"line\">\t\t\tcount = fast_timer_timeouts_get(</div><div class=\"line\">\t\t\t\t&amp;pThreadData-&gt;timer, g_current_time, &amp;head); <span class=\"comment\">// get the expire event count</span></div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (count &gt; <span class=\"number\">0</span>)  <span class=\"comment\">// timeout event has been saved to head</span></div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tdeal_timeouts(&amp;head); <span class=\"comment\">// process the timeout event</span></div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (pThreadData-&gt;thread_loop_callback != <span class=\"keyword\">NULL</span>) </div><div class=\"line\">\t\t&#123;</div><div class=\"line\">            pThreadData-&gt;thread_loop_callback(pThreadData);  <span class=\"comment\">// call this function every one loop </span></div><div class=\"line\">        &#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> ioevent_poll(IOEventPoller *ioevent)</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"comment\">#if IOEVENT_USE_EPOLL</span></div><div class=\"line\">  <span class=\"keyword\">return</span> epoll_wait(ioevent-&gt;poll_fd, ioevent-&gt;events, ioevent-&gt;size, ioevent-&gt;timeout);</div><div class=\"line\"><span class=\"comment\">#elif IOEVENT_USE_KQUEUE</span></div><div class=\"line\">  <span class=\"keyword\">return</span> kevent(ioevent-&gt;poll_fd, <span class=\"keyword\">NULL</span>, <span class=\"number\">0</span>, ioevent-&gt;events, ioevent-&gt;size, &amp;ioevent-&gt;timeout);</div><div class=\"line\"><span class=\"comment\">#elif IOEVENT_USE_PORT</span></div><div class=\"line\">  <span class=\"keyword\">int</span> result;</div><div class=\"line\">  <span class=\"keyword\">int</span> retval;</div><div class=\"line\">  unsigned <span class=\"keyword\">int</span> nget = <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">if</span>((retval = port_getn(ioevent-&gt;poll_fd, ioevent-&gt;events,</div><div class=\"line\">          ioevent-&gt;size, &amp;nget, &amp;ioevent-&gt;timeout)) == <span class=\"number\">0</span>)</div><div class=\"line\">  &#123;</div><div class=\"line\">    result = (<span class=\"keyword\">int</span>)nget;</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span>(errno) &#123;</div><div class=\"line\">      <span class=\"keyword\">case</span> EINTR:</div><div class=\"line\">      <span class=\"keyword\">case</span> EAGAIN:</div><div class=\"line\">      <span class=\"keyword\">case</span> ETIME:</div><div class=\"line\">        <span class=\"keyword\">if</span> (nget &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">          result = (<span class=\"keyword\">int</span>)nget;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          result = <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">      <span class=\"keyword\">default</span>:</div><div class=\"line\">        result = <span class=\"number\">-1</span>;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> result;</div><div class=\"line\"><span class=\"comment\">#else</span></div><div class=\"line\"><span class=\"comment\">#error port me</span></div><div class=\"line\"><span class=\"comment\">#endif</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//add a fd event to ioevent to listen</span></div><div class=\"line\"><span class=\"comment\">// ioevent_attach(&amp;pThread-&gt;ev_puller,sock, event, pTask)</span></div><div class=\"line\"><span class=\"keyword\">int</span> ioevent_attach(IOEventPoller *ioevent, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> fd, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> e,</div><div class=\"line\">    void *data)</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"comment\">#if IOEVENT_USE_EPOLL</span></div><div class=\"line\">  struct epoll_event ev;</div><div class=\"line\">  memset(&amp;ev, <span class=\"number\">0</span>, sizeof(ev));</div><div class=\"line\">  ev.events = e | ioevent-&gt;extra_events;</div><div class=\"line\">  ev.data.ptr = data;<span class=\"comment\">// 将参数保存到data.ptr中去，依据上面的调用data为IOEventEntry结构类型</span></div><div class=\"line\">  <span class=\"keyword\">return</span> epoll_ctl(ioevent-&gt;poll_fd, EPOLL_CTL_ADD, fd, &amp;ev);</div><div class=\"line\"><span class=\"comment\">#elif IOEVENT_USE_KQUEUE</span></div><div class=\"line\">  struct kevent ev[<span class=\"number\">2</span>];</div><div class=\"line\">  <span class=\"keyword\">int</span> n = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">if</span> (e &amp; IOEVENT_READ) &#123;</div><div class=\"line\">    EV_SET(&amp;ev[n++], fd, EVFILT_READ, EV_ADD | ioevent-&gt;extra_events, <span class=\"number\">0</span>, <span class=\"number\">0</span>, data);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span> (e &amp; IOEVENT_WRITE) &#123;</div><div class=\"line\">    EV_SET(&amp;ev[n++], fd, EVFILT_WRITE, EV_ADD | ioevent-&gt;extra_events, <span class=\"number\">0</span>, <span class=\"number\">0</span>, data);</div><div class=\"line\">  &#125;</div><div class=\"line\">  ioevent-&gt;care_events = e;</div><div class=\"line\">  <span class=\"keyword\">return</span> kevent(ioevent-&gt;poll_fd, ev, n, <span class=\"keyword\">NULL</span>, <span class=\"number\">0</span>, <span class=\"keyword\">NULL</span>);</div><div class=\"line\"><span class=\"comment\">#elif IOEVENT_USE_PORT</span></div><div class=\"line\">  <span class=\"keyword\">return</span> port_associate(ioevent-&gt;poll_fd, PORT_SOURCE_FD, fd, e, data);</div><div class=\"line\"><span class=\"comment\">#endif</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 事件处理</span></div><div class=\"line\"><span class=\"comment\">// process the io events by callback function </span></div><div class=\"line\"><span class=\"comment\">// struct epoll_event: http://blog.csdn.net/wangrice2004/article/details/6651320 </span></div><div class=\"line\"><span class=\"keyword\">static</span> void deal_ioevents(IOEventPoller *ioevent)</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> event;</div><div class=\"line\">\tIOEventEntry *pEntry;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">for</span> (ioevent-&gt;iterator.index=<span class=\"number\">0</span>; ioevent-&gt;iterator.index &lt; ioevent-&gt;iterator.</div><div class=\"line\">            count; ioevent-&gt;iterator.index++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tevent = IOEVENT_GET_EVENTS(ioevent, ioevent-&gt;iterator.index);</div><div class=\"line\">\t\tpEntry = (IOEventEntry *)IOEVENT_GET_DATA(ioevent, ioevent-&gt;iterator.index);  <span class=\"comment\">// 得到ioevent_attach设置的data，为IOEventEntry类型</span></div><div class=\"line\">\t\t<span class=\"comment\">// pEntry is either IOEventEntry(ioevent_loop -&gt; ioevent_attach)or fast_task_info(ioevent_set-&gt;ioevent_attach)</span></div><div class=\"line\">\t\t<span class=\"comment\">// but the first elem of fast_task_info is also IOEventEntry</span></div><div class=\"line\">\t\t</div><div class=\"line\">        <span class=\"keyword\">if</span> (pEntry != <span class=\"keyword\">NULL</span>)  <span class=\"comment\">// call the callback function, we set data in ioevent_attach func</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">            pEntry-&gt;callback(pEntry-&gt;fd, event, pEntry-&gt;timer.data); <span class=\"comment\">// pEntry-&gt;timer.data is fast_task_info(see ioevent_set func)</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> </div><div class=\"line\">\t\t&#123;</div><div class=\"line\">            logDebug(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span></div><div class=\"line\">                    <span class=\"string\">\"ignore iovent : %d, index: %d\"</span>, <span class=\"keyword\">__LINE__</span>, event, ioevent-&gt;iterator.index);</div><div class=\"line\">        &#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"<h2 id=\"思想\"><a href=\"#思想\" class=\"headerlink\" title=\"思想\"></a>思想</h2><p>fastdfs需要监听某个fd的事件，当fd就绪时自动调用某个函数进行处理，其思想是将该事件的回调函数，fd保存到epoll_event结构体中，当该fd就绪时就可得到该结构体，从而调用该回调函数；<br><a href=\"http://blog.csdn.net/yusiguyuan/article/details/15027821\">epoll机制</a><br>","more":"</p>\n<h2 id=\"相关数据结构\"><a href=\"#相关数据结构\" class=\"headerlink\" title=\"相关数据结构\"></a>相关数据结构</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> ioevent_puller &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> size;  <span class=\"comment\">//set to g_max_connections + 2,default is 256+2, max events (fd) , equal as the parameter of epoll_create</span></div><div class=\"line\">    <span class=\"keyword\">int</span> extra_events;</div><div class=\"line\">    <span class=\"keyword\">int</span> poll_fd; <span class=\"comment\">// poll_fd = epoll_create(ioevent-&gt;size)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\">When  successful,  epoll_wait()  returns the number of file descriptors</div><div class=\"line\">       ready for the requested I/O, or zero if no file descriptor became ready</div><div class=\"line\">       during  the  requested  timeout  milliseconds.   When  an error occurs,</div><div class=\"line\">       epoll_wait() returns -1 and errno is set appropriately.</div><div class=\"line\">*/</span></div><div class=\"line\">    <span class=\"keyword\">struct</span> </div><div class=\"line\">\t&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> index;</div><div class=\"line\">        <span class=\"keyword\">int</span> count;  <span class=\"comment\">// count=epoll_wait(...)</span></div><div class=\"line\">    &#125; iterator;  <span class=\"comment\">//for deal event loop</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> IOEVENT_USE_EPOLL</span></div><div class=\"line\">    <span class=\"keyword\">struct</span> epoll_event *events; <span class=\"comment\">// the size is ( size * sizeof(struct epoll_event) )</span></div><div class=\"line\">    <span class=\"keyword\">int</span> timeout;                  <span class=\"comment\">// default is 1000</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">elif</span> IOEVENT_USE_KQUEUE</span></div><div class=\"line\">    <span class=\"keyword\">struct</span> kevent *events;</div><div class=\"line\">    <span class=\"keyword\">struct</span> timespec timeout;</div><div class=\"line\">    <span class=\"keyword\">int</span> care_events;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">elif</span> IOEVENT_USE_PORT</span></div><div class=\"line\">    <span class=\"keyword\">port_event_t</span> *events;</div><div class=\"line\">    <span class=\"keyword\">timespec_t</span> timeout;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\">&#125; IOEventPoller;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">void</span> <span class=\"params\">(*IOEventCallback)</span> <span class=\"params\">(<span class=\"keyword\">int</span> sock, <span class=\"keyword\">short</span> event, <span class=\"keyword\">void</span> *arg)</span></span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> ioevent_entry</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> fd;                <span class=\"comment\">// it will be added to nio_thread_data-&gt;ev_puller</span></div><div class=\"line\">\tFastTimerEntry timer; <span class=\"comment\">// for event timeout, it will be added to nio_thread_data-&gt;timer</span></div><div class=\"line\">\tIOEventCallback callback;</div><div class=\"line\">&#125; IOEventEntry;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> IOEVENT_USE_EPOLL</span></div><div class=\"line\">  <span class=\"meta\">#<span class=\"meta-keyword\">define</span> IOEVENT_GET_EVENTS(ioevent, index) \\</div><div class=\"line\">      ioevent-&gt;events[index].events</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> IOEVENT_USE_EPOLL</span></div><div class=\"line\">  <span class=\"meta\">#<span class=\"meta-keyword\">define</span> IOEVENT_GET_DATA(ioevent, index)  \\</div><div class=\"line\">      ioevent-&gt;events[index].data.ptr</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//初始化</span></div><div class=\"line\"><span class=\"comment\">//ioevent_init(&amp;pThreadData-&gt;ev_puller,g_max_connections + 2, 1000, 0) // 1000毫秒</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// size=256+2, timeout_ms=1000, extra_events=0</span></div><div class=\"line\"><span class=\"comment\">// ioevent_init(&amp;pThreadData-&gt;ev_puller, g_max_connections + 2, 1000, 0)</span></div><div class=\"line\"><span class=\"keyword\">int</span> ioevent_init(IOEventPoller *ioevent, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> size,</div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> timeout_ms, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> extra_events)</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> bytes;</div><div class=\"line\"></div><div class=\"line\">  ioevent-&gt;size = size;</div><div class=\"line\">  ioevent-&gt;extra_events = extra_events;</div><div class=\"line\">  ioevent-&gt;iterator.index = <span class=\"number\">0</span>;</div><div class=\"line\">  ioevent-&gt;iterator.count = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#if IOEVENT_USE_EPOLL</span></div><div class=\"line\">  ioevent-&gt;poll_fd = epoll_create(ioevent-&gt;size);</div><div class=\"line\">  bytes = sizeof(struct epoll_event) * size;</div><div class=\"line\">  ioevent-&gt;events = (struct epoll_event *)malloc(bytes);</div><div class=\"line\"><span class=\"comment\">#elif IOEVENT_USE_KQUEUE</span></div><div class=\"line\">  ioevent-&gt;poll_fd = kqueue();</div><div class=\"line\">  bytes = sizeof(struct kevent) * size;</div><div class=\"line\">  ioevent-&gt;events = (struct kevent *)malloc(bytes);</div><div class=\"line\">  ioevent-&gt;care_events = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"comment\">#elif IOEVENT_USE_PORT</span></div><div class=\"line\">  ioevent-&gt;poll_fd = port_create();</div><div class=\"line\">  bytes = sizeof(port_event_t) * size;</div><div class=\"line\">  ioevent-&gt;events = (port_event_t *)malloc(bytes);</div><div class=\"line\"><span class=\"comment\">#endif</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (ioevent-&gt;events == <span class=\"keyword\">NULL</span>) </div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> errno != <span class=\"number\">0</span> ? errno : ENOMEM;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// set the ioevent-&gt;timeout to timeout_ms</span></div><div class=\"line\">  ioevent_set_timeout(ioevent, timeout_ms); <span class=\"comment\">// 设置超时时间为1秒</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//事件监听处理循环</span></div><div class=\"line\"><span class=\"comment\">//ioevent_loop(pThreadData, recv_notify_read, task_finish_clean_up, &amp;g_continue_flag);</span></div><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\">ioevent_loop(pThreadData, recv_notify_read, task_finish_clean_up,</div><div class=\"line\">\t\t&amp;g_continue_flag);</div><div class=\"line\">\t\t// g_continue_flag is true default</div><div class=\"line\">*/</span></div><div class=\"line\"><span class=\"keyword\">int</span> ioevent_loop(struct nio_thread_data *pThreadData,</div><div class=\"line\">\tIOEventCallback recv_notify_callback, TaskCleanUpCallback</div><div class=\"line\">\tclean_up_callback, volatile <span class=\"keyword\">bool</span> *continue_flag)</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> result;</div><div class=\"line\">\tIOEventEntry ev_notify;</div><div class=\"line\">\tFastTimerEntry head;</div><div class=\"line\">\tstruct fast_task_info *pTask;</div><div class=\"line\">\ttime_t last_check_time;</div><div class=\"line\">\t<span class=\"keyword\">int</span> count;</div><div class=\"line\"></div><div class=\"line\">\tmemset(&amp;ev_notify, <span class=\"number\">0</span>, sizeof(ev_notify));</div><div class=\"line\">\tev_notify.fd = pThreadData-&gt;pipe_fds[<span class=\"number\">0</span>];</div><div class=\"line\">\tev_notify.callback = recv_notify_callback;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (ioevent_attach(&amp;pThreadData-&gt;ev_puller,</div><div class=\"line\">\t\tpThreadData-&gt;pipe_fds[<span class=\"number\">0</span>], IOEVENT_READ,</div><div class=\"line\">\t\t&amp;ev_notify) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tresult = errno != <span class=\"number\">0</span> ? errno : ENOMEM;</div><div class=\"line\">\t\tlogCrit(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"ioevent_attach fail, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t<span class=\"keyword\">__LINE__</span>, result, STRERROR(result));</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">    pThreadData-&gt;deleted_list = <span class=\"keyword\">NULL</span>;</div><div class=\"line\">\tlast_check_time = g_current_time;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">while</span> (*continue_flag)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// one seconds later, ioevent_poll will return</span></div><div class=\"line\">\t\tpThreadData-&gt;ev_puller.iterator.count = ioevent_poll(&amp;pThreadData-&gt;ev_puller);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (pThreadData-&gt;ev_puller.iterator.count &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tdeal_ioevents(&amp;pThreadData-&gt;ev_puller);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pThreadData-&gt;ev_puller.iterator.count &lt; <span class=\"number\">0</span>) <span class=\"comment\">// error occured</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tresult = errno != <span class=\"number\">0</span> ? errno : EINVAL;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (result != EINTR)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">\"ioevent_poll fail, \"</span> \\</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">\"errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">__LINE__</span>, result, STRERROR(result));</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// timeout, 1 second later </span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (pThreadData-&gt;deleted_list != <span class=\"keyword\">NULL</span>) <span class=\"comment\">// cleanup task callback is not null</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tcount = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (pThreadData-&gt;deleted_list != <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tpTask = pThreadData-&gt;deleted_list;</div><div class=\"line\">\t\t\t\tpThreadData-&gt;deleted_list = pTask-&gt;next;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\tclean_up_callback(pTask);</div><div class=\"line\">\t\t\t\tcount++;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tlogDebug(<span class=\"string\">\"cleanup task count: %d\"</span>, count);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (g_current_time - last_check_time &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tlast_check_time = g_current_time;  <span class=\"comment\">// the unit of g_current_time is seconds </span></div><div class=\"line\">\t\t\tcount = fast_timer_timeouts_get(</div><div class=\"line\">\t\t\t\t&amp;pThreadData-&gt;timer, g_current_time, &amp;head); <span class=\"comment\">// get the expire event count</span></div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (count &gt; <span class=\"number\">0</span>)  <span class=\"comment\">// timeout event has been saved to head</span></div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tdeal_timeouts(&amp;head); <span class=\"comment\">// process the timeout event</span></div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (pThreadData-&gt;thread_loop_callback != <span class=\"keyword\">NULL</span>) </div><div class=\"line\">\t\t&#123;</div><div class=\"line\">            pThreadData-&gt;thread_loop_callback(pThreadData);  <span class=\"comment\">// call this function every one loop </span></div><div class=\"line\">        &#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> ioevent_poll(IOEventPoller *ioevent)</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"comment\">#if IOEVENT_USE_EPOLL</span></div><div class=\"line\">  <span class=\"keyword\">return</span> epoll_wait(ioevent-&gt;poll_fd, ioevent-&gt;events, ioevent-&gt;size, ioevent-&gt;timeout);</div><div class=\"line\"><span class=\"comment\">#elif IOEVENT_USE_KQUEUE</span></div><div class=\"line\">  <span class=\"keyword\">return</span> kevent(ioevent-&gt;poll_fd, <span class=\"keyword\">NULL</span>, <span class=\"number\">0</span>, ioevent-&gt;events, ioevent-&gt;size, &amp;ioevent-&gt;timeout);</div><div class=\"line\"><span class=\"comment\">#elif IOEVENT_USE_PORT</span></div><div class=\"line\">  <span class=\"keyword\">int</span> result;</div><div class=\"line\">  <span class=\"keyword\">int</span> retval;</div><div class=\"line\">  unsigned <span class=\"keyword\">int</span> nget = <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">if</span>((retval = port_getn(ioevent-&gt;poll_fd, ioevent-&gt;events,</div><div class=\"line\">          ioevent-&gt;size, &amp;nget, &amp;ioevent-&gt;timeout)) == <span class=\"number\">0</span>)</div><div class=\"line\">  &#123;</div><div class=\"line\">    result = (<span class=\"keyword\">int</span>)nget;</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span>(errno) &#123;</div><div class=\"line\">      <span class=\"keyword\">case</span> EINTR:</div><div class=\"line\">      <span class=\"keyword\">case</span> EAGAIN:</div><div class=\"line\">      <span class=\"keyword\">case</span> ETIME:</div><div class=\"line\">        <span class=\"keyword\">if</span> (nget &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">          result = (<span class=\"keyword\">int</span>)nget;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          result = <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">      <span class=\"keyword\">default</span>:</div><div class=\"line\">        result = <span class=\"number\">-1</span>;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> result;</div><div class=\"line\"><span class=\"comment\">#else</span></div><div class=\"line\"><span class=\"comment\">#error port me</span></div><div class=\"line\"><span class=\"comment\">#endif</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//add a fd event to ioevent to listen</span></div><div class=\"line\"><span class=\"comment\">// ioevent_attach(&amp;pThread-&gt;ev_puller,sock, event, pTask)</span></div><div class=\"line\"><span class=\"keyword\">int</span> ioevent_attach(IOEventPoller *ioevent, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> fd, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> e,</div><div class=\"line\">    void *data)</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"comment\">#if IOEVENT_USE_EPOLL</span></div><div class=\"line\">  struct epoll_event ev;</div><div class=\"line\">  memset(&amp;ev, <span class=\"number\">0</span>, sizeof(ev));</div><div class=\"line\">  ev.events = e | ioevent-&gt;extra_events;</div><div class=\"line\">  ev.data.ptr = data;<span class=\"comment\">// 将参数保存到data.ptr中去，依据上面的调用data为IOEventEntry结构类型</span></div><div class=\"line\">  <span class=\"keyword\">return</span> epoll_ctl(ioevent-&gt;poll_fd, EPOLL_CTL_ADD, fd, &amp;ev);</div><div class=\"line\"><span class=\"comment\">#elif IOEVENT_USE_KQUEUE</span></div><div class=\"line\">  struct kevent ev[<span class=\"number\">2</span>];</div><div class=\"line\">  <span class=\"keyword\">int</span> n = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">if</span> (e &amp; IOEVENT_READ) &#123;</div><div class=\"line\">    EV_SET(&amp;ev[n++], fd, EVFILT_READ, EV_ADD | ioevent-&gt;extra_events, <span class=\"number\">0</span>, <span class=\"number\">0</span>, data);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span> (e &amp; IOEVENT_WRITE) &#123;</div><div class=\"line\">    EV_SET(&amp;ev[n++], fd, EVFILT_WRITE, EV_ADD | ioevent-&gt;extra_events, <span class=\"number\">0</span>, <span class=\"number\">0</span>, data);</div><div class=\"line\">  &#125;</div><div class=\"line\">  ioevent-&gt;care_events = e;</div><div class=\"line\">  <span class=\"keyword\">return</span> kevent(ioevent-&gt;poll_fd, ev, n, <span class=\"keyword\">NULL</span>, <span class=\"number\">0</span>, <span class=\"keyword\">NULL</span>);</div><div class=\"line\"><span class=\"comment\">#elif IOEVENT_USE_PORT</span></div><div class=\"line\">  <span class=\"keyword\">return</span> port_associate(ioevent-&gt;poll_fd, PORT_SOURCE_FD, fd, e, data);</div><div class=\"line\"><span class=\"comment\">#endif</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 事件处理</span></div><div class=\"line\"><span class=\"comment\">// process the io events by callback function </span></div><div class=\"line\"><span class=\"comment\">// struct epoll_event: http://blog.csdn.net/wangrice2004/article/details/6651320 </span></div><div class=\"line\"><span class=\"keyword\">static</span> void deal_ioevents(IOEventPoller *ioevent)</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> event;</div><div class=\"line\">\tIOEventEntry *pEntry;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">for</span> (ioevent-&gt;iterator.index=<span class=\"number\">0</span>; ioevent-&gt;iterator.index &lt; ioevent-&gt;iterator.</div><div class=\"line\">            count; ioevent-&gt;iterator.index++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tevent = IOEVENT_GET_EVENTS(ioevent, ioevent-&gt;iterator.index);</div><div class=\"line\">\t\tpEntry = (IOEventEntry *)IOEVENT_GET_DATA(ioevent, ioevent-&gt;iterator.index);  <span class=\"comment\">// 得到ioevent_attach设置的data，为IOEventEntry类型</span></div><div class=\"line\">\t\t<span class=\"comment\">// pEntry is either IOEventEntry(ioevent_loop -&gt; ioevent_attach)or fast_task_info(ioevent_set-&gt;ioevent_attach)</span></div><div class=\"line\">\t\t<span class=\"comment\">// but the first elem of fast_task_info is also IOEventEntry</span></div><div class=\"line\">\t\t</div><div class=\"line\">        <span class=\"keyword\">if</span> (pEntry != <span class=\"keyword\">NULL</span>)  <span class=\"comment\">// call the callback function, we set data in ioevent_attach func</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">            pEntry-&gt;callback(pEntry-&gt;fd, event, pEntry-&gt;timer.data); <span class=\"comment\">// pEntry-&gt;timer.data is fast_task_info(see ioevent_set func)</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> </div><div class=\"line\">\t\t&#123;</div><div class=\"line\">            logDebug(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span></div><div class=\"line\">                    <span class=\"string\">\"ignore iovent : %d, index: %d\"</span>, <span class=\"keyword\">__LINE__</span>, event, ioevent-&gt;iterator.index);</div><div class=\"line\">        &#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"fastdfs之超时事件的处理","date":"2016-12-04T14:52:34.000Z","_content":"\n\n## 思想\nfastdfs有这样的一个需求，设置一个超时时间，时间到了，自动调用某个函数，其实现的思想有点像Timing wheel的思想，构造一个60（默认）个格子的循环队列，插入超时事件时，插入到(该事件超时时间-循环队列基准时间)%60的对应格子上去，每个格子是一个双向链表，接着采用epoll IO复用函数，1秒后，epoll超时返回，然后依据循环队列中的当前时间，遍历该循环队列，直到循环队列中的当前时间等于当前系统时间，遍历时，判断事件是否超时，将所有已经超时的事件提取出来（从循环队列中删除），构造成链表，接着遍历该链表，依次调用超时事件的回调函数，达到超时事件的处理；\n[Timing wheel1](http://blog.csdn.net/solstice/article/details/6395098)\n[Timing wheel2](http://blog.csdn.net/mindfloating/article/details/8033340)\n<!--more-->\n\n## 相关数据结构\n```\ntypedef struct fast_timer_entry {\n  int64_t expires;\n  void *data;\n  struct fast_timer_entry *prev;\n  struct fast_timer_entry *next;\n  bool rehash;\n} FastTimerEntry;  // pre and next to construct a double linked list\n\ntypedef struct fast_timer_slot {\n  struct fast_timer_entry head;\n} FastTimerSlot;\n\n\ntypedef struct fast_timer \n{\n  int slot_count;    //time wheel slot count, default is 60\n  int64_t base_time; //base time for slot 0, set to current time， 基准事件\n  int64_t current_time; //set to current time\n  FastTimerSlot *slots; //the size is sizeof(FastTimerSlot) * slot_count\n} FastTimer;\n\n#define TIMER_GET_SLOT_INDEX(timer, expires) \\\n  (((expires) - timer->base_time) % timer->slot_count)\n\n#define TIMER_GET_SLOT_POINTER(timer, expires) \\\n  (timer->slots + TIMER_GET_SLOT_INDEX(timer, expires))\n\n```\n\n\n## 相关代码\n// fast_timer.h/fast_timer.c\n// init the timer, slot_count=60 \nint fast_timer_init(FastTimer *timer, const int slot_count,\n    const int64_t current_time)\n{\n  int bytes;\n  \n  if (slot_count <= 0 || current_time <= 0) \n  {\n    return EINVAL;\n  }\n\n  timer->slot_count = slot_count;  //default is 60 \n  timer->base_time = current_time; //base time for slot 0\n  timer->current_time = current_time;\n  bytes = sizeof(FastTimerSlot) * slot_count;\n  timer->slots = (FastTimerSlot *)malloc(bytes);\n  \n  if (timer->slots == NULL) \n  {\n     return errno != 0 ? errno : ENOMEM;\n  }\n  \n  memset(timer->slots, 0, bytes);\n  return 0;\n  \n}\n\nint ioevent_loop(struct nio_thread_data *pThreadData,\n\tIOEventCallback recv_notify_callback, TaskCleanUpCallback\n\tclean_up_callback, volatile bool *continue_flag)\n{\n\tint result;\n\tIOEventEntry ev_notify;\n\tFastTimerEntry head;\n\tstruct fast_task_info *pTask;\n\ttime_t last_check_time;\n\tint count;\n\n\tmemset(&ev_notify, 0, sizeof(ev_notify));\n\tev_notify.fd = pThreadData->pipe_fds[0];\n\tev_notify.callback = recv_notify_callback;\n\t\n\tif (ioevent_attach(&pThreadData->ev_puller,\n\t\tpThreadData->pipe_fds[0], IOEVENT_READ,\n\t\t&ev_notify) != 0)\n\t{\n\t\tresult = errno != 0 ? errno : ENOMEM;\n\t\tlogCrit(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"ioevent_attach fail, \" \\\n\t\t\t\"errno: %d, error info: %s\", \\\n\t\t\t__LINE__, result, STRERROR(result));\n\t\treturn result;\n\t}\n\n    pThreadData->deleted_list = NULL;\n\tlast_check_time = g_current_time;\n\t\n\twhile (*continue_flag)\n\t{\n\t\t// one seconds later, ioevent_poll will return\n\t\tpThreadData->ev_puller.iterator.count = ioevent_poll(&pThreadData->ev_puller); //若没有fd就绪，1秒后会超时返回（ioevent_init函数设置了timeout为1秒）\n\t\t\n\t\tif (pThreadData->ev_puller.iterator.count > 0)\n\t\t{\n\t\t\tdeal_ioevents(&pThreadData->ev_puller);\n\t\t}\n\t\telse if (pThreadData->ev_puller.iterator.count < 0) // error occured\n\t\t{\n\t\t\tresult = errno != 0 ? errno : EINVAL;\n\t\t\t\n\t\t\tif (result != EINTR)\n\t\t\t{\n\t\t\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\t\t\"ioevent_poll fail, \" \\\n\t\t\t\t\t\"errno: %d, error info: %s\", \\\n\t\t\t\t\t__LINE__, result, STRERROR(result));\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\n        // timeout, 1 second later \n\t\tif (pThreadData->deleted_list != NULL) // cleanup task callback is not null\n\t\t{\n\t\t\tcount = 0;\n\t\t\t\n\t\t\twhile (pThreadData->deleted_list != NULL)\n\t\t\t{\n\t\t\t\tpTask = pThreadData->deleted_list;\n\t\t\t\tpThreadData->deleted_list = pTask->next;\n\n\t\t\t\tclean_up_callback(pTask);\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\t\n\t\t\tlogDebug(\"cleanup task count: %d\", count);\n\t\t}\n\n\t\tif (g_current_time - last_check_time > 0)\n\t\t{\n\t\t\tlast_check_time = g_current_time;  // the unit of g_current_time is seconds \n\t\t\tcount = fast_timer_timeouts_get(\n\t\t\t\t&pThreadData->timer, g_current_time, &head); // get the expire event count，得到已经超时的事件\n\t\t\t\t\n\t\t\tif (count > 0)  // timeout event has been saved to head\n\t\t\t{\n\t\t\t\tdeal_timeouts(&head); // process the timeout event，处理超时事件\n\t\t\t}\n\t\t}\n\n        if (pThreadData->thread_loop_callback != NULL) \n\t\t{\n            pThreadData->thread_loop_callback(pThreadData);  // call this function every one loop \n        }\n\t\t\n\t}\n\n\treturn 0;\n}\n\n// save expired FastTimerEntry to head\nint fast_timer_timeouts_get(FastTimer *timer, const int64_t current_time,\n   FastTimerEntry *head)\n{\n  FastTimerSlot *slot;\n  FastTimerEntry *entry;\n  FastTimerEntry *first;\n  FastTimerEntry *last;\n  FastTimerEntry *tail;\n  int count;\n\n  head->prev = NULL;\n  head->next = NULL;\n  \n  if (timer->current_time >= current_time) // don't timeout, just return \n  {\n    return 0;\n  }\n\n  first = NULL;\n  last = NULL;\n  tail = head;\n  count = 0;\n  \n  while (timer->current_time < current_time) \n  {\n    slot = TIMER_GET_SLOT_POINTER(timer, timer->current_time++); // \n    entry = slot->head.next;\n\t\n    while (entry != NULL) \n\t{\n      if (entry->expires >= current_time) //not expired\n\t  {  \n         if (first != NULL) \n\t\t {\n            first->prev->next = entry;\n            entry->prev = first->prev;\n\n            tail->next = first;\n            first->prev = tail;\n            tail = last;\n            first = NULL;\n         }\n\t\t \n         if (entry->rehash) \n\t\t {\n           last = entry;\n           entry = entry->next;\n\n           last->rehash = false;\n           fast_timer_remove(timer, last);\n           fast_timer_add(timer, last);\n           continue;\n         }\n\t\t \n      }\n      else         //expired\n\t  {  \n         count++;\n\t\t \n         if (first == NULL) \n\t\t {\n            first = entry;\n         }\n      }\n\n      last = entry;\n      entry = entry->next;\n    }\n\n    if (first != NULL) \n\t{\n       first->prev->next = NULL;\n\n       tail->next = first;\n       first->prev = tail;\n       tail = last;\n       first = NULL;\n    }\n\t\n  }\n\n  if (count > 0) \n  {\n     tail->next = NULL;\n  }\n\n  return count;\n}\n\n//插入超时事件\n// add entry to timer according to entry->expires\nint fast_timer_add(FastTimer *timer, FastTimerEntry *entry)\n{\n  FastTimerSlot *slot;\n\n  slot = TIMER_GET_SLOT_POINTER(timer, entry->expires >\n     timer->current_time ? entry->expires : timer->current_time);\n  entry->next = slot->head.next;\n  \n  if (slot->head.next != NULL) \n  {\n    slot->head.next->prev = entry;\n  }\n  \n  entry->prev = &slot->head;\n  slot->head.next = entry;\n  entry->rehash = false;\n  return 0;\n}\n\n\n```\n","source":"_posts/fastdfs之超时事件的处理.md","raw":"---\ntitle: fastdfs之超时事件的处理\ndate: 2016-12-04 14:52:34\ntags: [fastdfs,超时事件]\n---\n\n\n## 思想\nfastdfs有这样的一个需求，设置一个超时时间，时间到了，自动调用某个函数，其实现的思想有点像Timing wheel的思想，构造一个60（默认）个格子的循环队列，插入超时事件时，插入到(该事件超时时间-循环队列基准时间)%60的对应格子上去，每个格子是一个双向链表，接着采用epoll IO复用函数，1秒后，epoll超时返回，然后依据循环队列中的当前时间，遍历该循环队列，直到循环队列中的当前时间等于当前系统时间，遍历时，判断事件是否超时，将所有已经超时的事件提取出来（从循环队列中删除），构造成链表，接着遍历该链表，依次调用超时事件的回调函数，达到超时事件的处理；\n[Timing wheel1](http://blog.csdn.net/solstice/article/details/6395098)\n[Timing wheel2](http://blog.csdn.net/mindfloating/article/details/8033340)\n<!--more-->\n\n## 相关数据结构\n```\ntypedef struct fast_timer_entry {\n  int64_t expires;\n  void *data;\n  struct fast_timer_entry *prev;\n  struct fast_timer_entry *next;\n  bool rehash;\n} FastTimerEntry;  // pre and next to construct a double linked list\n\ntypedef struct fast_timer_slot {\n  struct fast_timer_entry head;\n} FastTimerSlot;\n\n\ntypedef struct fast_timer \n{\n  int slot_count;    //time wheel slot count, default is 60\n  int64_t base_time; //base time for slot 0, set to current time， 基准事件\n  int64_t current_time; //set to current time\n  FastTimerSlot *slots; //the size is sizeof(FastTimerSlot) * slot_count\n} FastTimer;\n\n#define TIMER_GET_SLOT_INDEX(timer, expires) \\\n  (((expires) - timer->base_time) % timer->slot_count)\n\n#define TIMER_GET_SLOT_POINTER(timer, expires) \\\n  (timer->slots + TIMER_GET_SLOT_INDEX(timer, expires))\n\n```\n\n\n## 相关代码\n// fast_timer.h/fast_timer.c\n// init the timer, slot_count=60 \nint fast_timer_init(FastTimer *timer, const int slot_count,\n    const int64_t current_time)\n{\n  int bytes;\n  \n  if (slot_count <= 0 || current_time <= 0) \n  {\n    return EINVAL;\n  }\n\n  timer->slot_count = slot_count;  //default is 60 \n  timer->base_time = current_time; //base time for slot 0\n  timer->current_time = current_time;\n  bytes = sizeof(FastTimerSlot) * slot_count;\n  timer->slots = (FastTimerSlot *)malloc(bytes);\n  \n  if (timer->slots == NULL) \n  {\n     return errno != 0 ? errno : ENOMEM;\n  }\n  \n  memset(timer->slots, 0, bytes);\n  return 0;\n  \n}\n\nint ioevent_loop(struct nio_thread_data *pThreadData,\n\tIOEventCallback recv_notify_callback, TaskCleanUpCallback\n\tclean_up_callback, volatile bool *continue_flag)\n{\n\tint result;\n\tIOEventEntry ev_notify;\n\tFastTimerEntry head;\n\tstruct fast_task_info *pTask;\n\ttime_t last_check_time;\n\tint count;\n\n\tmemset(&ev_notify, 0, sizeof(ev_notify));\n\tev_notify.fd = pThreadData->pipe_fds[0];\n\tev_notify.callback = recv_notify_callback;\n\t\n\tif (ioevent_attach(&pThreadData->ev_puller,\n\t\tpThreadData->pipe_fds[0], IOEVENT_READ,\n\t\t&ev_notify) != 0)\n\t{\n\t\tresult = errno != 0 ? errno : ENOMEM;\n\t\tlogCrit(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"ioevent_attach fail, \" \\\n\t\t\t\"errno: %d, error info: %s\", \\\n\t\t\t__LINE__, result, STRERROR(result));\n\t\treturn result;\n\t}\n\n    pThreadData->deleted_list = NULL;\n\tlast_check_time = g_current_time;\n\t\n\twhile (*continue_flag)\n\t{\n\t\t// one seconds later, ioevent_poll will return\n\t\tpThreadData->ev_puller.iterator.count = ioevent_poll(&pThreadData->ev_puller); //若没有fd就绪，1秒后会超时返回（ioevent_init函数设置了timeout为1秒）\n\t\t\n\t\tif (pThreadData->ev_puller.iterator.count > 0)\n\t\t{\n\t\t\tdeal_ioevents(&pThreadData->ev_puller);\n\t\t}\n\t\telse if (pThreadData->ev_puller.iterator.count < 0) // error occured\n\t\t{\n\t\t\tresult = errno != 0 ? errno : EINVAL;\n\t\t\t\n\t\t\tif (result != EINTR)\n\t\t\t{\n\t\t\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\t\t\"ioevent_poll fail, \" \\\n\t\t\t\t\t\"errno: %d, error info: %s\", \\\n\t\t\t\t\t__LINE__, result, STRERROR(result));\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\n        // timeout, 1 second later \n\t\tif (pThreadData->deleted_list != NULL) // cleanup task callback is not null\n\t\t{\n\t\t\tcount = 0;\n\t\t\t\n\t\t\twhile (pThreadData->deleted_list != NULL)\n\t\t\t{\n\t\t\t\tpTask = pThreadData->deleted_list;\n\t\t\t\tpThreadData->deleted_list = pTask->next;\n\n\t\t\t\tclean_up_callback(pTask);\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\t\n\t\t\tlogDebug(\"cleanup task count: %d\", count);\n\t\t}\n\n\t\tif (g_current_time - last_check_time > 0)\n\t\t{\n\t\t\tlast_check_time = g_current_time;  // the unit of g_current_time is seconds \n\t\t\tcount = fast_timer_timeouts_get(\n\t\t\t\t&pThreadData->timer, g_current_time, &head); // get the expire event count，得到已经超时的事件\n\t\t\t\t\n\t\t\tif (count > 0)  // timeout event has been saved to head\n\t\t\t{\n\t\t\t\tdeal_timeouts(&head); // process the timeout event，处理超时事件\n\t\t\t}\n\t\t}\n\n        if (pThreadData->thread_loop_callback != NULL) \n\t\t{\n            pThreadData->thread_loop_callback(pThreadData);  // call this function every one loop \n        }\n\t\t\n\t}\n\n\treturn 0;\n}\n\n// save expired FastTimerEntry to head\nint fast_timer_timeouts_get(FastTimer *timer, const int64_t current_time,\n   FastTimerEntry *head)\n{\n  FastTimerSlot *slot;\n  FastTimerEntry *entry;\n  FastTimerEntry *first;\n  FastTimerEntry *last;\n  FastTimerEntry *tail;\n  int count;\n\n  head->prev = NULL;\n  head->next = NULL;\n  \n  if (timer->current_time >= current_time) // don't timeout, just return \n  {\n    return 0;\n  }\n\n  first = NULL;\n  last = NULL;\n  tail = head;\n  count = 0;\n  \n  while (timer->current_time < current_time) \n  {\n    slot = TIMER_GET_SLOT_POINTER(timer, timer->current_time++); // \n    entry = slot->head.next;\n\t\n    while (entry != NULL) \n\t{\n      if (entry->expires >= current_time) //not expired\n\t  {  \n         if (first != NULL) \n\t\t {\n            first->prev->next = entry;\n            entry->prev = first->prev;\n\n            tail->next = first;\n            first->prev = tail;\n            tail = last;\n            first = NULL;\n         }\n\t\t \n         if (entry->rehash) \n\t\t {\n           last = entry;\n           entry = entry->next;\n\n           last->rehash = false;\n           fast_timer_remove(timer, last);\n           fast_timer_add(timer, last);\n           continue;\n         }\n\t\t \n      }\n      else         //expired\n\t  {  \n         count++;\n\t\t \n         if (first == NULL) \n\t\t {\n            first = entry;\n         }\n      }\n\n      last = entry;\n      entry = entry->next;\n    }\n\n    if (first != NULL) \n\t{\n       first->prev->next = NULL;\n\n       tail->next = first;\n       first->prev = tail;\n       tail = last;\n       first = NULL;\n    }\n\t\n  }\n\n  if (count > 0) \n  {\n     tail->next = NULL;\n  }\n\n  return count;\n}\n\n//插入超时事件\n// add entry to timer according to entry->expires\nint fast_timer_add(FastTimer *timer, FastTimerEntry *entry)\n{\n  FastTimerSlot *slot;\n\n  slot = TIMER_GET_SLOT_POINTER(timer, entry->expires >\n     timer->current_time ? entry->expires : timer->current_time);\n  entry->next = slot->head.next;\n  \n  if (slot->head.next != NULL) \n  {\n    slot->head.next->prev = entry;\n  }\n  \n  entry->prev = &slot->head;\n  slot->head.next = entry;\n  entry->rehash = false;\n  return 0;\n}\n\n\n```\n","slug":"fastdfs之超时事件的处理","published":1,"updated":"2016-12-04T07:14:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwg2v9j400056al8dertda0s","content":"<h2 id=\"思想\"><a href=\"#思想\" class=\"headerlink\" title=\"思想\"></a>思想</h2><p>fastdfs有这样的一个需求，设置一个超时时间，时间到了，自动调用某个函数，其实现的思想有点像Timing wheel的思想，构造一个60（默认）个格子的循环队列，插入超时事件时，插入到(该事件超时时间-循环队列基准时间)%60的对应格子上去，每个格子是一个双向链表，接着采用epoll IO复用函数，1秒后，epoll超时返回，然后依据循环队列中的当前时间，遍历该循环队列，直到循环队列中的当前时间等于当前系统时间，遍历时，判断事件是否超时，将所有已经超时的事件提取出来（从循环队列中删除），构造成链表，接着遍历该链表，依次调用超时事件的回调函数，达到超时事件的处理；<br><a href=\"http://blog.csdn.net/solstice/article/details/6395098\" target=\"_blank\" rel=\"external\">Timing wheel1</a><br><a href=\"http://blog.csdn.net/mindfloating/article/details/8033340\" target=\"_blank\" rel=\"external\">Timing wheel2</a><br><a id=\"more\"></a></p>\n<h2 id=\"相关数据结构\"><a href=\"#相关数据结构\" class=\"headerlink\" title=\"相关数据结构\"></a>相关数据结构</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> fast_timer_entry &#123;</div><div class=\"line\">  <span class=\"keyword\">int64_t</span> expires;</div><div class=\"line\">  <span class=\"keyword\">void</span> *data;</div><div class=\"line\">  <span class=\"keyword\">struct</span> fast_timer_entry *prev;</div><div class=\"line\">  <span class=\"keyword\">struct</span> fast_timer_entry *next;</div><div class=\"line\">  <span class=\"keyword\">bool</span> rehash;</div><div class=\"line\">&#125; FastTimerEntry;  <span class=\"comment\">// pre and next to construct a double linked list</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> fast_timer_slot &#123;</div><div class=\"line\">  <span class=\"keyword\">struct</span> fast_timer_entry head;</div><div class=\"line\">&#125; FastTimerSlot;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> fast_timer </div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> slot_count;    <span class=\"comment\">//time wheel slot count, default is 60</span></div><div class=\"line\">  <span class=\"keyword\">int64_t</span> base_time; <span class=\"comment\">//base time for slot 0, set to current time， 基准事件</span></div><div class=\"line\">  <span class=\"keyword\">int64_t</span> current_time; <span class=\"comment\">//set to current time</span></div><div class=\"line\">  FastTimerSlot *slots; <span class=\"comment\">//the size is sizeof(FastTimerSlot) * slot_count</span></div><div class=\"line\">&#125; FastTimer;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TIMER_GET_SLOT_INDEX(timer, expires) \\</span></div><div class=\"line\">  (((expires) - timer-&gt;base_time) % timer-&gt;slot_count)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TIMER_GET_SLOT_POINTER(timer, expires) \\</span></div><div class=\"line\">  (timer-&gt;slots + TIMER_GET_SLOT_INDEX(timer, expires))</div></pre></td></tr></table></figure>\n<h2 id=\"相关代码\"><a href=\"#相关代码\" class=\"headerlink\" title=\"相关代码\"></a>相关代码</h2><p>// fast_timer.h/fast_timer.c<br>// init the timer, slot_count=60<br>int fast_timer_init(FastTimer *timer, const int slot_count,<br>    const int64_t current_time)<br>{<br>  int bytes;</p>\n<p>  if (slot_count &lt;= 0 || current_time &lt;= 0)<br>  {<br>    return EINVAL;<br>  }</p>\n<p>  timer-&gt;slot_count = slot_count;  //default is 60<br>  timer-&gt;base_time = current_time; //base time for slot 0<br>  timer-&gt;current_time = current_time;<br>  bytes = sizeof(FastTimerSlot) <em> slot_count;<br>  timer-&gt;slots = (FastTimerSlot </em>)malloc(bytes);</p>\n<p>  if (timer-&gt;slots == NULL)<br>  {<br>     return errno != 0 ? errno : ENOMEM;<br>  }</p>\n<p>  memset(timer-&gt;slots, 0, bytes);<br>  return 0;</p>\n<p>}</p>\n<p>int ioevent_loop(struct nio_thread_data <em>pThreadData,<br>    IOEventCallback recv_notify_callback, TaskCleanUpCallback<br>    clean_up_callback, volatile bool </em>continue_flag)<br>{<br>    int result;<br>    IOEventEntry ev_notify;<br>    FastTimerEntry head;<br>    struct fast_task_info *pTask;<br>    time_t last_check_time;<br>    int count;</p>\n<pre><code>memset(&amp;ev_notify, 0, sizeof(ev_notify));\nev_notify.fd = pThreadData-&gt;pipe_fds[0];\nev_notify.callback = recv_notify_callback;\n\nif (ioevent_attach(&amp;pThreadData-&gt;ev_puller,\n    pThreadData-&gt;pipe_fds[0], IOEVENT_READ,\n    &amp;ev_notify) != 0)\n{\n    result = errno != 0 ? errno : ENOMEM;\n    logCrit(&quot;file: &quot;__FILE__&quot;, line: %d, &quot; \\\n        &quot;ioevent_attach fail, &quot; \\\n        &quot;errno: %d, error info: %s&quot;, \\\n        __LINE__, result, STRERROR(result));\n    return result;\n}\n\npThreadData-&gt;deleted_list = NULL;\nlast_check_time = g_current_time;\n\nwhile (*continue_flag)\n{\n    // one seconds later, ioevent_poll will return\n    pThreadData-&gt;ev_puller.iterator.count = ioevent_poll(&amp;pThreadData-&gt;ev_puller); //若没有fd就绪，1秒后会超时返回（ioevent_init函数设置了timeout为1秒）\n\n    if (pThreadData-&gt;ev_puller.iterator.count &gt; 0)\n    {\n        deal_ioevents(&amp;pThreadData-&gt;ev_puller);\n    }\n    else if (pThreadData-&gt;ev_puller.iterator.count &lt; 0) // error occured\n    {\n        result = errno != 0 ? errno : EINVAL;\n\n        if (result != EINTR)\n        {\n            logError(&quot;file: &quot;__FILE__&quot;, line: %d, &quot; \\\n                &quot;ioevent_poll fail, &quot; \\\n                &quot;errno: %d, error info: %s&quot;, \\\n                __LINE__, result, STRERROR(result));\n            return result;\n        }\n    }\n\n    // timeout, 1 second later \n    if (pThreadData-&gt;deleted_list != NULL) // cleanup task callback is not null\n    {\n        count = 0;\n\n        while (pThreadData-&gt;deleted_list != NULL)\n        {\n            pTask = pThreadData-&gt;deleted_list;\n            pThreadData-&gt;deleted_list = pTask-&gt;next;\n\n            clean_up_callback(pTask);\n            count++;\n        }\n\n        logDebug(&quot;cleanup task count: %d&quot;, count);\n    }\n\n    if (g_current_time - last_check_time &gt; 0)\n    {\n        last_check_time = g_current_time;  // the unit of g_current_time is seconds \n        count = fast_timer_timeouts_get(\n            &amp;pThreadData-&gt;timer, g_current_time, &amp;head); // get the expire event count，得到已经超时的事件\n\n        if (count &gt; 0)  // timeout event has been saved to head\n        {\n            deal_timeouts(&amp;head); // process the timeout event，处理超时事件\n        }\n    }\n\n    if (pThreadData-&gt;thread_loop_callback != NULL) \n    {\n        pThreadData-&gt;thread_loop_callback(pThreadData);  // call this function every one loop \n    }\n\n}\n\nreturn 0;\n</code></pre><p>}</p>\n<p>// save expired FastTimerEntry to head<br>int fast_timer_timeouts_get(FastTimer <em>timer, const int64_t current_time,<br>   FastTimerEntry </em>head)<br>{<br>  FastTimerSlot <em>slot;<br>  FastTimerEntry </em>entry;<br>  FastTimerEntry <em>first;<br>  FastTimerEntry </em>last;<br>  FastTimerEntry *tail;<br>  int count;</p>\n<p>  head-&gt;prev = NULL;<br>  head-&gt;next = NULL;</p>\n<p>  if (timer-&gt;current_time &gt;= current_time) // don’t timeout, just return<br>  {<br>    return 0;<br>  }</p>\n<p>  first = NULL;<br>  last = NULL;<br>  tail = head;<br>  count = 0;</p>\n<p>  while (timer-&gt;current_time &lt; current_time)<br>  {<br>    slot = TIMER_GET_SLOT_POINTER(timer, timer-&gt;current_time++); //<br>    entry = slot-&gt;head.next;</p>\n<pre><code>while (entry != NULL) \n{\n  if (entry-&gt;expires &gt;= current_time) //not expired\n  {  \n     if (first != NULL) \n     {\n        first-&gt;prev-&gt;next = entry;\n        entry-&gt;prev = first-&gt;prev;\n\n        tail-&gt;next = first;\n        first-&gt;prev = tail;\n        tail = last;\n        first = NULL;\n     }\n\n     if (entry-&gt;rehash) \n     {\n       last = entry;\n       entry = entry-&gt;next;\n\n       last-&gt;rehash = false;\n       fast_timer_remove(timer, last);\n       fast_timer_add(timer, last);\n       continue;\n     }\n\n  }\n  else         //expired\n  {  \n     count++;\n\n     if (first == NULL) \n     {\n        first = entry;\n     }\n  }\n\n  last = entry;\n  entry = entry-&gt;next;\n}\n\nif (first != NULL) \n{\n   first-&gt;prev-&gt;next = NULL;\n\n   tail-&gt;next = first;\n   first-&gt;prev = tail;\n   tail = last;\n   first = NULL;\n}\n</code></pre><p>  }</p>\n<p>  if (count &gt; 0)<br>  {<br>     tail-&gt;next = NULL;<br>  }</p>\n<p>  return count;<br>}</p>\n<p>//插入超时事件<br>// add entry to timer according to entry-&gt;expires<br>int fast_timer_add(FastTimer <em>timer, FastTimerEntry </em>entry)<br>{<br>  FastTimerSlot *slot;</p>\n<p>  slot = TIMER_GET_SLOT_POINTER(timer, entry-&gt;expires &gt;<br>     timer-&gt;current_time ? entry-&gt;expires : timer-&gt;current_time);<br>  entry-&gt;next = slot-&gt;head.next;</p>\n<p>  if (slot-&gt;head.next != NULL)<br>  {<br>    slot-&gt;head.next-&gt;prev = entry;<br>  }</p>\n<p>  entry-&gt;prev = &amp;slot-&gt;head;<br>  slot-&gt;head.next = entry;<br>  entry-&gt;rehash = false;<br>  return 0;<br>}</p>\n<p>```</p>\n","excerpt":"<h2 id=\"思想\"><a href=\"#思想\" class=\"headerlink\" title=\"思想\"></a>思想</h2><p>fastdfs有这样的一个需求，设置一个超时时间，时间到了，自动调用某个函数，其实现的思想有点像Timing wheel的思想，构造一个60（默认）个格子的循环队列，插入超时事件时，插入到(该事件超时时间-循环队列基准时间)%60的对应格子上去，每个格子是一个双向链表，接着采用epoll IO复用函数，1秒后，epoll超时返回，然后依据循环队列中的当前时间，遍历该循环队列，直到循环队列中的当前时间等于当前系统时间，遍历时，判断事件是否超时，将所有已经超时的事件提取出来（从循环队列中删除），构造成链表，接着遍历该链表，依次调用超时事件的回调函数，达到超时事件的处理；<br><a href=\"http://blog.csdn.net/solstice/article/details/6395098\">Timing wheel1</a><br><a href=\"http://blog.csdn.net/mindfloating/article/details/8033340\">Timing wheel2</a><br>","more":"</p>\n<h2 id=\"相关数据结构\"><a href=\"#相关数据结构\" class=\"headerlink\" title=\"相关数据结构\"></a>相关数据结构</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> fast_timer_entry &#123;</div><div class=\"line\">  <span class=\"keyword\">int64_t</span> expires;</div><div class=\"line\">  <span class=\"keyword\">void</span> *data;</div><div class=\"line\">  <span class=\"keyword\">struct</span> fast_timer_entry *prev;</div><div class=\"line\">  <span class=\"keyword\">struct</span> fast_timer_entry *next;</div><div class=\"line\">  <span class=\"keyword\">bool</span> rehash;</div><div class=\"line\">&#125; FastTimerEntry;  <span class=\"comment\">// pre and next to construct a double linked list</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> fast_timer_slot &#123;</div><div class=\"line\">  <span class=\"keyword\">struct</span> fast_timer_entry head;</div><div class=\"line\">&#125; FastTimerSlot;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> fast_timer </div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> slot_count;    <span class=\"comment\">//time wheel slot count, default is 60</span></div><div class=\"line\">  <span class=\"keyword\">int64_t</span> base_time; <span class=\"comment\">//base time for slot 0, set to current time， 基准事件</span></div><div class=\"line\">  <span class=\"keyword\">int64_t</span> current_time; <span class=\"comment\">//set to current time</span></div><div class=\"line\">  FastTimerSlot *slots; <span class=\"comment\">//the size is sizeof(FastTimerSlot) * slot_count</span></div><div class=\"line\">&#125; FastTimer;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TIMER_GET_SLOT_INDEX(timer, expires) \\</div><div class=\"line\">  (((expires) - timer-&gt;base_time) % timer-&gt;slot_count)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TIMER_GET_SLOT_POINTER(timer, expires) \\</div><div class=\"line\">  (timer-&gt;slots + TIMER_GET_SLOT_INDEX(timer, expires))</span></div></pre></td></tr></table></figure>\n<h2 id=\"相关代码\"><a href=\"#相关代码\" class=\"headerlink\" title=\"相关代码\"></a>相关代码</h2><p>// fast_timer.h/fast_timer.c<br>// init the timer, slot_count=60<br>int fast_timer_init(FastTimer *timer, const int slot_count,<br>    const int64_t current_time)<br>{<br>  int bytes;</p>\n<p>  if (slot_count &lt;= 0 || current_time &lt;= 0)<br>  {<br>    return EINVAL;<br>  }</p>\n<p>  timer-&gt;slot_count = slot_count;  //default is 60<br>  timer-&gt;base_time = current_time; //base time for slot 0<br>  timer-&gt;current_time = current_time;<br>  bytes = sizeof(FastTimerSlot) <em> slot_count;<br>  timer-&gt;slots = (FastTimerSlot </em>)malloc(bytes);</p>\n<p>  if (timer-&gt;slots == NULL)<br>  {<br>     return errno != 0 ? errno : ENOMEM;<br>  }</p>\n<p>  memset(timer-&gt;slots, 0, bytes);<br>  return 0;</p>\n<p>}</p>\n<p>int ioevent_loop(struct nio_thread_data <em>pThreadData,<br>    IOEventCallback recv_notify_callback, TaskCleanUpCallback<br>    clean_up_callback, volatile bool </em>continue_flag)<br>{<br>    int result;<br>    IOEventEntry ev_notify;<br>    FastTimerEntry head;<br>    struct fast_task_info *pTask;<br>    time_t last_check_time;<br>    int count;</p>\n<pre><code>memset(&amp;ev_notify, 0, sizeof(ev_notify));\nev_notify.fd = pThreadData-&gt;pipe_fds[0];\nev_notify.callback = recv_notify_callback;\n\nif (ioevent_attach(&amp;pThreadData-&gt;ev_puller,\n    pThreadData-&gt;pipe_fds[0], IOEVENT_READ,\n    &amp;ev_notify) != 0)\n{\n    result = errno != 0 ? errno : ENOMEM;\n    logCrit(&quot;file: &quot;__FILE__&quot;, line: %d, &quot; \\\n        &quot;ioevent_attach fail, &quot; \\\n        &quot;errno: %d, error info: %s&quot;, \\\n        __LINE__, result, STRERROR(result));\n    return result;\n}\n\npThreadData-&gt;deleted_list = NULL;\nlast_check_time = g_current_time;\n\nwhile (*continue_flag)\n{\n    // one seconds later, ioevent_poll will return\n    pThreadData-&gt;ev_puller.iterator.count = ioevent_poll(&amp;pThreadData-&gt;ev_puller); //若没有fd就绪，1秒后会超时返回（ioevent_init函数设置了timeout为1秒）\n\n    if (pThreadData-&gt;ev_puller.iterator.count &gt; 0)\n    {\n        deal_ioevents(&amp;pThreadData-&gt;ev_puller);\n    }\n    else if (pThreadData-&gt;ev_puller.iterator.count &lt; 0) // error occured\n    {\n        result = errno != 0 ? errno : EINVAL;\n\n        if (result != EINTR)\n        {\n            logError(&quot;file: &quot;__FILE__&quot;, line: %d, &quot; \\\n                &quot;ioevent_poll fail, &quot; \\\n                &quot;errno: %d, error info: %s&quot;, \\\n                __LINE__, result, STRERROR(result));\n            return result;\n        }\n    }\n\n    // timeout, 1 second later \n    if (pThreadData-&gt;deleted_list != NULL) // cleanup task callback is not null\n    {\n        count = 0;\n\n        while (pThreadData-&gt;deleted_list != NULL)\n        {\n            pTask = pThreadData-&gt;deleted_list;\n            pThreadData-&gt;deleted_list = pTask-&gt;next;\n\n            clean_up_callback(pTask);\n            count++;\n        }\n\n        logDebug(&quot;cleanup task count: %d&quot;, count);\n    }\n\n    if (g_current_time - last_check_time &gt; 0)\n    {\n        last_check_time = g_current_time;  // the unit of g_current_time is seconds \n        count = fast_timer_timeouts_get(\n            &amp;pThreadData-&gt;timer, g_current_time, &amp;head); // get the expire event count，得到已经超时的事件\n\n        if (count &gt; 0)  // timeout event has been saved to head\n        {\n            deal_timeouts(&amp;head); // process the timeout event，处理超时事件\n        }\n    }\n\n    if (pThreadData-&gt;thread_loop_callback != NULL) \n    {\n        pThreadData-&gt;thread_loop_callback(pThreadData);  // call this function every one loop \n    }\n\n}\n\nreturn 0;\n</code></pre><p>}</p>\n<p>// save expired FastTimerEntry to head<br>int fast_timer_timeouts_get(FastTimer <em>timer, const int64_t current_time,<br>   FastTimerEntry </em>head)<br>{<br>  FastTimerSlot <em>slot;<br>  FastTimerEntry </em>entry;<br>  FastTimerEntry <em>first;<br>  FastTimerEntry </em>last;<br>  FastTimerEntry *tail;<br>  int count;</p>\n<p>  head-&gt;prev = NULL;<br>  head-&gt;next = NULL;</p>\n<p>  if (timer-&gt;current_time &gt;= current_time) // don’t timeout, just return<br>  {<br>    return 0;<br>  }</p>\n<p>  first = NULL;<br>  last = NULL;<br>  tail = head;<br>  count = 0;</p>\n<p>  while (timer-&gt;current_time &lt; current_time)<br>  {<br>    slot = TIMER_GET_SLOT_POINTER(timer, timer-&gt;current_time++); //<br>    entry = slot-&gt;head.next;</p>\n<pre><code>while (entry != NULL) \n{\n  if (entry-&gt;expires &gt;= current_time) //not expired\n  {  \n     if (first != NULL) \n     {\n        first-&gt;prev-&gt;next = entry;\n        entry-&gt;prev = first-&gt;prev;\n\n        tail-&gt;next = first;\n        first-&gt;prev = tail;\n        tail = last;\n        first = NULL;\n     }\n\n     if (entry-&gt;rehash) \n     {\n       last = entry;\n       entry = entry-&gt;next;\n\n       last-&gt;rehash = false;\n       fast_timer_remove(timer, last);\n       fast_timer_add(timer, last);\n       continue;\n     }\n\n  }\n  else         //expired\n  {  \n     count++;\n\n     if (first == NULL) \n     {\n        first = entry;\n     }\n  }\n\n  last = entry;\n  entry = entry-&gt;next;\n}\n\nif (first != NULL) \n{\n   first-&gt;prev-&gt;next = NULL;\n\n   tail-&gt;next = first;\n   first-&gt;prev = tail;\n   tail = last;\n   first = NULL;\n}\n</code></pre><p>  }</p>\n<p>  if (count &gt; 0)<br>  {<br>     tail-&gt;next = NULL;<br>  }</p>\n<p>  return count;<br>}</p>\n<p>//插入超时事件<br>// add entry to timer according to entry-&gt;expires<br>int fast_timer_add(FastTimer <em>timer, FastTimerEntry </em>entry)<br>{<br>  FastTimerSlot *slot;</p>\n<p>  slot = TIMER_GET_SLOT_POINTER(timer, entry-&gt;expires &gt;<br>     timer-&gt;current_time ? entry-&gt;expires : timer-&gt;current_time);<br>  entry-&gt;next = slot-&gt;head.next;</p>\n<p>  if (slot-&gt;head.next != NULL)<br>  {<br>    slot-&gt;head.next-&gt;prev = entry;<br>  }</p>\n<p>  entry-&gt;prev = &amp;slot-&gt;head;<br>  slot-&gt;head.next = entry;<br>  entry-&gt;rehash = false;<br>  return 0;<br>}</p>\n<p>```</p>"},{"title":"fastdfs文件系统搭建","date":"2016-10-21T16:54:20.000Z","_content":"\n## ubantu14.04 x64下搭建FastDFS分布式存储环境（使用Nginx模块）\n<!--more-->\n### 1. 软件准备\n#### 1.1 从[happyfish100](https://github.com/happyfish100)下载最新的fastdfs（当前为v5.08）、libfastcommon、fastdfs-nginx-module；\n#### 1.2 从nginx官网下载nginx,我下载的版本为nginx-1.10.2.tar.gz\n\n### 2. 安装libfastcommon\n#### 2.1 安装\n```bash\n#./makesh\n#./make.sh install\n```\n#### 2.2 配置\n但是FastDFS主程序设置的lib目录是/usr/local/lib\n所以需要创建软链接.\n```bash\nln -s /usr/lib64/libfastcommon.so /usr/local/lib/libfastcommon.so\nln -s /usr/lib64/libfastcommon.so /usr/lib/libfastcommon.so\nln -s /usr/lib64/libfdfsclient.so /usr/local/lib/libfdfsclient.so\nln -s /usr/lib64/libfdfsclient.so /usr/lib/libfdfsclient.so \n```\n### 3. 安装fastdfs主程序\n#### 3.1  安装\n进入fastdfs主目录，依次执行：\n```bash\n./make.sh \n./make.sh install\n```\n\n执行完毕后，可执行文件在/usr/bin/下以fdfs开头，ll /usr/bin/fdfs*，会看到一些可执行程序，如fdfs_upload_file等；\n在/etc/fdfs/目录下也有一些配置文件，如：storage.conf.sample等；\n执行： cp fastdfs/conf/* /etc/fdfs，即将conf目录下的所有文件复制到/etc/fdfs目录下\n\n#### 3.2 配置\n在fastdfs同级目录，新建目录storage_base_path，client_base_path，mod_fastdfs_base_path，store_path0，tracker_base_path\n修改/etc/fdfs/tracker.conf(若没有，则cp /etc/fdfs/tracker.conf.sample /etc/fdfs/tracker.conf)\n将base_path的值设置为tracker_base_path目录，如：\n```bash\nvim /etc/fdfs/tracker.conf\nbase_path=/home/hyp/Desktop/opensource/tracker_base_path\nhttp.server_port=8080\n\nvim /etc/fdfs/storage.conf\ngroup_name=group1\nbase_path=/home/hyp/Desktop/opensource/storage_base_path\nstore_path0=/home/hyp/Desktop/opensource/storage_base_path\ntracker_server=172.16.55.156:22122\nhttp.server_port=8080\n\n\nvim /etc/fdfs/client.conf\nbase_path=/home/hyp/Desktop/opensource/client_base_path\ntracker_server=172.16.55.156:22122\n```\n\n#### 3.3 测试\n```bash\nwhich fdfs_storaged \n/usr/bin/fdfs_storaged\n\nfdfs_trackerd /etc/fdfs/tracker.conf restart\nnetstat -antp | grep trackerd\n\nfdfs_storaged /etc/fdfs/storage.conf restart\nnetstat -antp | grep storage\n\nps -ef|grep fdfs\n\nfdfs_upload_file client.conf ~/Desktop/fork.c\ngroup1/M00/00/00/rBA3nFgJeMCAUOjoAAAAxxbGNXU56061.c\nfdfs_upload_file client.conf ~/Desktop/kenan1.jpg \ngroup1/M00/00/00/rBA3nFgJxfKABNobAAITVP28J6s210.jpg\n\n终止命令：\nkillall fdfs_storaged \nkillall fdfs_trackerd \n```\n\n### 4. 安装fastdfs-nginx-module\n```bash\n修改fastdfs-nginx-module的config文件\n原来的内容是\nCORE_INCS=\"$CORE_INCS /usr/local/include/fastdfs /usr/local/include/fastcommon/\"\n\nvim /home/nginx/fastdfs-nginx-module/src/config,修改为\nCORE_INCS=\"$CORE_INCS /usr/include/fastdfs /usr/include/fastcommon\"\n\n注：貌似github上的fastdfs-nginx-module无需修改\n```\n\n### 5. 安装nginx并运行\n#### 5.1 解压nginx-1.10.2，并执行：\n```bash\n./configure --prefix=/usr/local/nginx --add-module=/home/hyp/Desktop/opensource/fastdfs-nginx-module/src\nmake\nmake install\n```\n#### 5.2 配置\n```bash\ncp fastdfs-nginx-module/src/mod_fastdfs.conf /etc/fdfs/\n\nvim /usr/local/nginx/conf/nginx.conf\n将server字段的listen字段修改为8080\n并添加：\nlocation /group1/M00 {\n            root /home/hyp/Desktop/opensource/storage_base_path/data;\n            ngx_fastdfs_module;\n        }\n\n注：/home/hyp/Desktop/opensource/storage_base_path/data该目录是指向真正存储文件的地方\n\n修改fastdfs的nginx模块的配置文件mod_fastdfs.conf:\nvim /etc/fdfs/mod_fastdfs.conf\nbase_path=/home/hyp/Desktop/opensource/mod_fastdfs_base_path      #保存日志目录\ntracker_server=172.16.55.156:22122    #tracker 服务器的 IP 地址以及端口号\nstorage_server_port=23000            #storage 服务器的端口号\ngroup_name=group1                    #当前服务器的 group 名\nurl_have_group_name = true           #文件 url 中是否有 group 名\nstore_path_count=1                   #存储路径个数，需要和 store_path 个数匹配\nstore_path0=/home/hyp/Desktop/opensource/mod_fastdfs_base_path    #存储路径\nhttp.need_find_content_type=true     # 从文件 扩展 名查 找 文件 类型 （ nginx 时 为true）,好像没有该字段\ngroup_count = 1                      #设置组的个数\n\n然后在末尾添加分组信息，目前只有一个分组，就只写一个\n[group1]\ngroup_name=group1\nstorage_server_port=23000\nstore_path_count=1\nstore_path0=/home/hyp/Desktop/opensource/storage_base_path\n\n建立M00至存储目录的符号连接\nln -s /home/hyp/Desktop/opensource/storage_base_path/data /home/hyp/Desktop/opensource/storage_base_path/M00 （好像删除也可以，因为上面\n/group1/M00的root已经指向data了）\n```\n\n#### 5.3 运行\n```bash\nfdfs_trackerd /etc/fdfs/tracker.conf restart\nfdfs_storaged /etc/fdfs/storage.conf restart\nfdfs_upload_file /etc/fdfs/client.conf ~/Desktop/kenan.jpg \ngroup1/M00/00/00/rBA3nFgJuvmAHHJ0AAENmFEdiOY703.jpg\n到/usr/local/nginx/sbin目录，执行: ./nginx\n./nginx\nngx_http_fastdfs_set pid=22882\n\nlsof -i:8080\nCOMMAND   PID   USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\nnginx   22883   root    6u  IPv4 860115      0t0  TCP *:http-alt (LISTEN)\nnginx   22884 nobody    6u  IPv4 860115      0t0  TCP *:http-alt (LISTEN)\n\n输入http://localhost:8080/即可显示首页\n输入http://localhost:8080/group1/M00/00/00/rBA3nFgJuvmAHHJ0AAENmFEdiOY703.jpg即可显示kenan.jpg图片了\n```\n\n### 6. 遇到的问题\n#### 6.1 官网下载最新版本后，我下载的为nginx-1.10.2.tar.gz，编译运行\n```bash\nps -aux|grep nginx\n出现：\nroot      7421  0.0  0.0  28588   564 ?        Ss   09:42   0:00 nginx: master process ./nginx\nnobody    7422  0.0  0.0  29012  2552 ?        S    09:42   0:00 nginx: worker process\n```\n但是在我ubantu12.04 x64的笔记本上只出现了一个进程，怪了，在ubantu12.04上，添加模块--add-module=/home/hyp/Desktop/opensource/fastdfs-nginx-module/src\n后，也只有一个进程了，且此时浏览器访问[localhost](http://localhost)时，总是无法显示，浏览器总在转圈，可能原因是配置文件中的http.server_port端口没有配\n置好，端口需要配置与nginx中监听的端口一致，或者是mod_fastdfs.conf文件没有配置好，如末尾没有添加分组信息，此问题困扰了两天；\n\n#### 6.2 有时执行: fdfs_storaged storage.conf\n```bash\n[2016-10-21 10:30:12] ERROR - file: shared_func.c, line: 968, /storage.conf is not a regular file\nroot@hyp-HP-Pro-3340-MT:/etc/fdfs# [2016-10-21 10:30:12] ERROR - file: storage_func.c, line: 1076, load conf file \"storage.conf\" fail, ret code: 22\n[2016-10-21 10:30:12] CRIT - exit abnormally!\n\n^C\n[2016-10-21 10:03:10] ERROR - file: shared_func.c, line: 968, /./storage.conf is not a regular file\n[2016-10-21 10:03:10] ERROR - file: storage_func.c, line: 1076, load conf file \"./storage.conf\" fail, ret code: 22\n[2016-10-21 10:03:10] CRIT - exit abnormally!\n\n^C\n\n使用完整路径即可： fdfs_storaged /etc/fdfs/storage.conf\n```\n\n### 7. 参考来源：\n\n[http://www.tuicool.com/articles/q6ZvUn](http://www.tuicool.com/articles/q6ZvUn)\n\n[http://www.tuicool.com/articles/q6ZvUn](http://blog.itpub.net/7734666/viewspace-1292485/)\n\n\n\n\n\n\n","source":"_posts/fastdfs文件系统搭建.md","raw":"---\ntitle: fastdfs文件系统搭建\ndate: 2016-10-21 16:54:20\ntags: [fastdfs,分布式文件系统]\n---\n\n## ubantu14.04 x64下搭建FastDFS分布式存储环境（使用Nginx模块）\n<!--more-->\n### 1. 软件准备\n#### 1.1 从[happyfish100](https://github.com/happyfish100)下载最新的fastdfs（当前为v5.08）、libfastcommon、fastdfs-nginx-module；\n#### 1.2 从nginx官网下载nginx,我下载的版本为nginx-1.10.2.tar.gz\n\n### 2. 安装libfastcommon\n#### 2.1 安装\n```bash\n#./makesh\n#./make.sh install\n```\n#### 2.2 配置\n但是FastDFS主程序设置的lib目录是/usr/local/lib\n所以需要创建软链接.\n```bash\nln -s /usr/lib64/libfastcommon.so /usr/local/lib/libfastcommon.so\nln -s /usr/lib64/libfastcommon.so /usr/lib/libfastcommon.so\nln -s /usr/lib64/libfdfsclient.so /usr/local/lib/libfdfsclient.so\nln -s /usr/lib64/libfdfsclient.so /usr/lib/libfdfsclient.so \n```\n### 3. 安装fastdfs主程序\n#### 3.1  安装\n进入fastdfs主目录，依次执行：\n```bash\n./make.sh \n./make.sh install\n```\n\n执行完毕后，可执行文件在/usr/bin/下以fdfs开头，ll /usr/bin/fdfs*，会看到一些可执行程序，如fdfs_upload_file等；\n在/etc/fdfs/目录下也有一些配置文件，如：storage.conf.sample等；\n执行： cp fastdfs/conf/* /etc/fdfs，即将conf目录下的所有文件复制到/etc/fdfs目录下\n\n#### 3.2 配置\n在fastdfs同级目录，新建目录storage_base_path，client_base_path，mod_fastdfs_base_path，store_path0，tracker_base_path\n修改/etc/fdfs/tracker.conf(若没有，则cp /etc/fdfs/tracker.conf.sample /etc/fdfs/tracker.conf)\n将base_path的值设置为tracker_base_path目录，如：\n```bash\nvim /etc/fdfs/tracker.conf\nbase_path=/home/hyp/Desktop/opensource/tracker_base_path\nhttp.server_port=8080\n\nvim /etc/fdfs/storage.conf\ngroup_name=group1\nbase_path=/home/hyp/Desktop/opensource/storage_base_path\nstore_path0=/home/hyp/Desktop/opensource/storage_base_path\ntracker_server=172.16.55.156:22122\nhttp.server_port=8080\n\n\nvim /etc/fdfs/client.conf\nbase_path=/home/hyp/Desktop/opensource/client_base_path\ntracker_server=172.16.55.156:22122\n```\n\n#### 3.3 测试\n```bash\nwhich fdfs_storaged \n/usr/bin/fdfs_storaged\n\nfdfs_trackerd /etc/fdfs/tracker.conf restart\nnetstat -antp | grep trackerd\n\nfdfs_storaged /etc/fdfs/storage.conf restart\nnetstat -antp | grep storage\n\nps -ef|grep fdfs\n\nfdfs_upload_file client.conf ~/Desktop/fork.c\ngroup1/M00/00/00/rBA3nFgJeMCAUOjoAAAAxxbGNXU56061.c\nfdfs_upload_file client.conf ~/Desktop/kenan1.jpg \ngroup1/M00/00/00/rBA3nFgJxfKABNobAAITVP28J6s210.jpg\n\n终止命令：\nkillall fdfs_storaged \nkillall fdfs_trackerd \n```\n\n### 4. 安装fastdfs-nginx-module\n```bash\n修改fastdfs-nginx-module的config文件\n原来的内容是\nCORE_INCS=\"$CORE_INCS /usr/local/include/fastdfs /usr/local/include/fastcommon/\"\n\nvim /home/nginx/fastdfs-nginx-module/src/config,修改为\nCORE_INCS=\"$CORE_INCS /usr/include/fastdfs /usr/include/fastcommon\"\n\n注：貌似github上的fastdfs-nginx-module无需修改\n```\n\n### 5. 安装nginx并运行\n#### 5.1 解压nginx-1.10.2，并执行：\n```bash\n./configure --prefix=/usr/local/nginx --add-module=/home/hyp/Desktop/opensource/fastdfs-nginx-module/src\nmake\nmake install\n```\n#### 5.2 配置\n```bash\ncp fastdfs-nginx-module/src/mod_fastdfs.conf /etc/fdfs/\n\nvim /usr/local/nginx/conf/nginx.conf\n将server字段的listen字段修改为8080\n并添加：\nlocation /group1/M00 {\n            root /home/hyp/Desktop/opensource/storage_base_path/data;\n            ngx_fastdfs_module;\n        }\n\n注：/home/hyp/Desktop/opensource/storage_base_path/data该目录是指向真正存储文件的地方\n\n修改fastdfs的nginx模块的配置文件mod_fastdfs.conf:\nvim /etc/fdfs/mod_fastdfs.conf\nbase_path=/home/hyp/Desktop/opensource/mod_fastdfs_base_path      #保存日志目录\ntracker_server=172.16.55.156:22122    #tracker 服务器的 IP 地址以及端口号\nstorage_server_port=23000            #storage 服务器的端口号\ngroup_name=group1                    #当前服务器的 group 名\nurl_have_group_name = true           #文件 url 中是否有 group 名\nstore_path_count=1                   #存储路径个数，需要和 store_path 个数匹配\nstore_path0=/home/hyp/Desktop/opensource/mod_fastdfs_base_path    #存储路径\nhttp.need_find_content_type=true     # 从文件 扩展 名查 找 文件 类型 （ nginx 时 为true）,好像没有该字段\ngroup_count = 1                      #设置组的个数\n\n然后在末尾添加分组信息，目前只有一个分组，就只写一个\n[group1]\ngroup_name=group1\nstorage_server_port=23000\nstore_path_count=1\nstore_path0=/home/hyp/Desktop/opensource/storage_base_path\n\n建立M00至存储目录的符号连接\nln -s /home/hyp/Desktop/opensource/storage_base_path/data /home/hyp/Desktop/opensource/storage_base_path/M00 （好像删除也可以，因为上面\n/group1/M00的root已经指向data了）\n```\n\n#### 5.3 运行\n```bash\nfdfs_trackerd /etc/fdfs/tracker.conf restart\nfdfs_storaged /etc/fdfs/storage.conf restart\nfdfs_upload_file /etc/fdfs/client.conf ~/Desktop/kenan.jpg \ngroup1/M00/00/00/rBA3nFgJuvmAHHJ0AAENmFEdiOY703.jpg\n到/usr/local/nginx/sbin目录，执行: ./nginx\n./nginx\nngx_http_fastdfs_set pid=22882\n\nlsof -i:8080\nCOMMAND   PID   USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\nnginx   22883   root    6u  IPv4 860115      0t0  TCP *:http-alt (LISTEN)\nnginx   22884 nobody    6u  IPv4 860115      0t0  TCP *:http-alt (LISTEN)\n\n输入http://localhost:8080/即可显示首页\n输入http://localhost:8080/group1/M00/00/00/rBA3nFgJuvmAHHJ0AAENmFEdiOY703.jpg即可显示kenan.jpg图片了\n```\n\n### 6. 遇到的问题\n#### 6.1 官网下载最新版本后，我下载的为nginx-1.10.2.tar.gz，编译运行\n```bash\nps -aux|grep nginx\n出现：\nroot      7421  0.0  0.0  28588   564 ?        Ss   09:42   0:00 nginx: master process ./nginx\nnobody    7422  0.0  0.0  29012  2552 ?        S    09:42   0:00 nginx: worker process\n```\n但是在我ubantu12.04 x64的笔记本上只出现了一个进程，怪了，在ubantu12.04上，添加模块--add-module=/home/hyp/Desktop/opensource/fastdfs-nginx-module/src\n后，也只有一个进程了，且此时浏览器访问[localhost](http://localhost)时，总是无法显示，浏览器总在转圈，可能原因是配置文件中的http.server_port端口没有配\n置好，端口需要配置与nginx中监听的端口一致，或者是mod_fastdfs.conf文件没有配置好，如末尾没有添加分组信息，此问题困扰了两天；\n\n#### 6.2 有时执行: fdfs_storaged storage.conf\n```bash\n[2016-10-21 10:30:12] ERROR - file: shared_func.c, line: 968, /storage.conf is not a regular file\nroot@hyp-HP-Pro-3340-MT:/etc/fdfs# [2016-10-21 10:30:12] ERROR - file: storage_func.c, line: 1076, load conf file \"storage.conf\" fail, ret code: 22\n[2016-10-21 10:30:12] CRIT - exit abnormally!\n\n^C\n[2016-10-21 10:03:10] ERROR - file: shared_func.c, line: 968, /./storage.conf is not a regular file\n[2016-10-21 10:03:10] ERROR - file: storage_func.c, line: 1076, load conf file \"./storage.conf\" fail, ret code: 22\n[2016-10-21 10:03:10] CRIT - exit abnormally!\n\n^C\n\n使用完整路径即可： fdfs_storaged /etc/fdfs/storage.conf\n```\n\n### 7. 参考来源：\n\n[http://www.tuicool.com/articles/q6ZvUn](http://www.tuicool.com/articles/q6ZvUn)\n\n[http://www.tuicool.com/articles/q6ZvUn](http://blog.itpub.net/7734666/viewspace-1292485/)\n\n\n\n\n\n\n","slug":"fastdfs文件系统搭建","published":1,"updated":"2016-12-04T07:21:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwg2v9jb00066al87ei4kb96","content":"<h2 id=\"ubantu14-04-x64下搭建FastDFS分布式存储环境（使用Nginx模块）\"><a href=\"#ubantu14-04-x64下搭建FastDFS分布式存储环境（使用Nginx模块）\" class=\"headerlink\" title=\"ubantu14.04 x64下搭建FastDFS分布式存储环境（使用Nginx模块）\"></a>ubantu14.04 x64下搭建FastDFS分布式存储环境（使用Nginx模块）</h2><a id=\"more\"></a>\n<h3 id=\"1-软件准备\"><a href=\"#1-软件准备\" class=\"headerlink\" title=\"1. 软件准备\"></a>1. 软件准备</h3><h4 id=\"1-1-从happyfish100下载最新的fastdfs（当前为v5-08）、libfastcommon、fastdfs-nginx-module；\"><a href=\"#1-1-从happyfish100下载最新的fastdfs（当前为v5-08）、libfastcommon、fastdfs-nginx-module；\" class=\"headerlink\" title=\"1.1 从happyfish100下载最新的fastdfs（当前为v5.08）、libfastcommon、fastdfs-nginx-module；\"></a>1.1 从<a href=\"https://github.com/happyfish100\" target=\"_blank\" rel=\"external\">happyfish100</a>下载最新的fastdfs（当前为v5.08）、libfastcommon、fastdfs-nginx-module；</h4><h4 id=\"1-2-从nginx官网下载nginx-我下载的版本为nginx-1-10-2-tar-gz\"><a href=\"#1-2-从nginx官网下载nginx-我下载的版本为nginx-1-10-2-tar-gz\" class=\"headerlink\" title=\"1.2 从nginx官网下载nginx,我下载的版本为nginx-1.10.2.tar.gz\"></a>1.2 从nginx官网下载nginx,我下载的版本为nginx-1.10.2.tar.gz</h4><h3 id=\"2-安装libfastcommon\"><a href=\"#2-安装libfastcommon\" class=\"headerlink\" title=\"2. 安装libfastcommon\"></a>2. 安装libfastcommon</h3><h4 id=\"2-1-安装\"><a href=\"#2-1-安装\" class=\"headerlink\" title=\"2.1 安装\"></a>2.1 安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#./makesh</span></div><div class=\"line\"><span class=\"comment\">#./make.sh install</span></div></pre></td></tr></table></figure>\n<h4 id=\"2-2-配置\"><a href=\"#2-2-配置\" class=\"headerlink\" title=\"2.2 配置\"></a>2.2 配置</h4><p>但是FastDFS主程序设置的lib目录是/usr/local/lib<br>所以需要创建软链接.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">ln <span class=\"_\">-s</span> /usr/lib64/libfastcommon.so /usr/<span class=\"built_in\">local</span>/lib/libfastcommon.so</div><div class=\"line\">ln <span class=\"_\">-s</span> /usr/lib64/libfastcommon.so /usr/lib/libfastcommon.so</div><div class=\"line\">ln <span class=\"_\">-s</span> /usr/lib64/libfdfsclient.so /usr/<span class=\"built_in\">local</span>/lib/libfdfsclient.so</div><div class=\"line\">ln <span class=\"_\">-s</span> /usr/lib64/libfdfsclient.so /usr/lib/libfdfsclient.so</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-安装fastdfs主程序\"><a href=\"#3-安装fastdfs主程序\" class=\"headerlink\" title=\"3. 安装fastdfs主程序\"></a>3. 安装fastdfs主程序</h3><h4 id=\"3-1-安装\"><a href=\"#3-1-安装\" class=\"headerlink\" title=\"3.1  安装\"></a>3.1  安装</h4><p>进入fastdfs主目录，依次执行：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">./make.sh </div><div class=\"line\">./make.sh install</div></pre></td></tr></table></figure></p>\n<p>执行完毕后，可执行文件在/usr/bin/下以fdfs开头，ll /usr/bin/fdfs<em>，会看到一些可执行程序，如fdfs_upload_file等；<br>在/etc/fdfs/目录下也有一些配置文件，如：storage.conf.sample等；<br>执行： cp fastdfs/conf/</em> /etc/fdfs，即将conf目录下的所有文件复制到/etc/fdfs目录下</p>\n<h4 id=\"3-2-配置\"><a href=\"#3-2-配置\" class=\"headerlink\" title=\"3.2 配置\"></a>3.2 配置</h4><p>在fastdfs同级目录，新建目录storage_base_path，client_base_path，mod_fastdfs_base_path，store_path0，tracker_base_path<br>修改/etc/fdfs/tracker.conf(若没有，则cp /etc/fdfs/tracker.conf.sample /etc/fdfs/tracker.conf)<br>将base_path的值设置为tracker_base_path目录，如：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/fdfs/tracker.conf</div><div class=\"line\">base_path=/home/hyp/Desktop/opensource/tracker_base_path</div><div class=\"line\">http.server_port=8080</div><div class=\"line\"></div><div class=\"line\">vim /etc/fdfs/storage.conf</div><div class=\"line\">group_name=group1</div><div class=\"line\">base_path=/home/hyp/Desktop/opensource/storage_base_path</div><div class=\"line\">store_path0=/home/hyp/Desktop/opensource/storage_base_path</div><div class=\"line\">tracker_server=172.16.55.156:22122</div><div class=\"line\">http.server_port=8080</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">vim /etc/fdfs/client.conf</div><div class=\"line\">base_path=/home/hyp/Desktop/opensource/client_base_path</div><div class=\"line\">tracker_server=172.16.55.156:22122</div></pre></td></tr></table></figure></p>\n<h4 id=\"3-3-测试\"><a href=\"#3-3-测试\" class=\"headerlink\" title=\"3.3 测试\"></a>3.3 测试</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">which</span> fdfs_storaged </div><div class=\"line\">/usr/bin/fdfs_storaged</div><div class=\"line\"></div><div class=\"line\">fdfs_trackerd /etc/fdfs/tracker.conf restart</div><div class=\"line\">netstat -antp | grep trackerd</div><div class=\"line\"></div><div class=\"line\">fdfs_storaged /etc/fdfs/storage.conf restart</div><div class=\"line\">netstat -antp | grep storage</div><div class=\"line\"></div><div class=\"line\">ps -ef|grep fdfs</div><div class=\"line\"></div><div class=\"line\">fdfs_upload_file client.conf ~/Desktop/fork.c</div><div class=\"line\">group1/M00/00/00/rBA3nFgJeMCAUOjoAAAAxxbGNXU56061.c</div><div class=\"line\">fdfs_upload_file client.conf ~/Desktop/kenan1.jpg </div><div class=\"line\">group1/M00/00/00/rBA3nFgJxfKABNobAAITVP28J6s210.jpg</div><div class=\"line\"></div><div class=\"line\">终止命令：</div><div class=\"line\">killall fdfs_storaged </div><div class=\"line\">killall fdfs_trackerd</div></pre></td></tr></table></figure>\n<h3 id=\"4-安装fastdfs-nginx-module\"><a href=\"#4-安装fastdfs-nginx-module\" class=\"headerlink\" title=\"4. 安装fastdfs-nginx-module\"></a>4. 安装fastdfs-nginx-module</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">修改fastdfs-nginx-module的config文件</div><div class=\"line\">原来的内容是</div><div class=\"line\">CORE_INCS=<span class=\"string\">\"<span class=\"variable\">$CORE_INCS</span> /usr/local/include/fastdfs /usr/local/include/fastcommon/\"</span></div><div class=\"line\"></div><div class=\"line\">vim /home/nginx/fastdfs-nginx-module/src/config,修改为</div><div class=\"line\">CORE_INCS=<span class=\"string\">\"<span class=\"variable\">$CORE_INCS</span> /usr/include/fastdfs /usr/include/fastcommon\"</span></div><div class=\"line\"></div><div class=\"line\">注：貌似github上的fastdfs-nginx-module无需修改</div></pre></td></tr></table></figure>\n<h3 id=\"5-安装nginx并运行\"><a href=\"#5-安装nginx并运行\" class=\"headerlink\" title=\"5. 安装nginx并运行\"></a>5. 安装nginx并运行</h3><h4 id=\"5-1-解压nginx-1-10-2，并执行：\"><a href=\"#5-1-解压nginx-1-10-2，并执行：\" class=\"headerlink\" title=\"5.1 解压nginx-1.10.2，并执行：\"></a>5.1 解压nginx-1.10.2，并执行：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">./configure --prefix=/usr/<span class=\"built_in\">local</span>/nginx --add-module=/home/hyp/Desktop/opensource/fastdfs-nginx-module/src</div><div class=\"line\">make</div><div class=\"line\">make install</div></pre></td></tr></table></figure>\n<h4 id=\"5-2-配置\"><a href=\"#5-2-配置\" class=\"headerlink\" title=\"5.2 配置\"></a>5.2 配置</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">cp fastdfs-nginx-module/src/mod_fastdfs.conf /etc/fdfs/</div><div class=\"line\"></div><div class=\"line\">vim /usr/<span class=\"built_in\">local</span>/nginx/conf/nginx.conf</div><div class=\"line\">将server字段的listen字段修改为8080</div><div class=\"line\">并添加：</div><div class=\"line\">location /group1/M00 &#123;</div><div class=\"line\">            root /home/hyp/Desktop/opensource/storage_base_path/data;</div><div class=\"line\">            ngx_fastdfs_module;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">注：/home/hyp/Desktop/opensource/storage_base_path/data该目录是指向真正存储文件的地方</div><div class=\"line\"></div><div class=\"line\">修改fastdfs的nginx模块的配置文件mod_fastdfs.conf:</div><div class=\"line\">vim /etc/fdfs/mod_fastdfs.conf</div><div class=\"line\">base_path=/home/hyp/Desktop/opensource/mod_fastdfs_base_path      <span class=\"comment\">#保存日志目录</span></div><div class=\"line\">tracker_server=172.16.55.156:22122    <span class=\"comment\">#tracker 服务器的 IP 地址以及端口号</span></div><div class=\"line\">storage_server_port=23000            <span class=\"comment\">#storage 服务器的端口号</span></div><div class=\"line\">group_name=group1                    <span class=\"comment\">#当前服务器的 group 名</span></div><div class=\"line\">url_have_group_name = <span class=\"literal\">true</span>           <span class=\"comment\">#文件 url 中是否有 group 名</span></div><div class=\"line\">store_path_count=1                   <span class=\"comment\">#存储路径个数，需要和 store_path 个数匹配</span></div><div class=\"line\">store_path0=/home/hyp/Desktop/opensource/mod_fastdfs_base_path    <span class=\"comment\">#存储路径</span></div><div class=\"line\">http.need_find_content_type=<span class=\"literal\">true</span>     <span class=\"comment\"># 从文件 扩展 名查 找 文件 类型 （ nginx 时 为true）,好像没有该字段</span></div><div class=\"line\">group_count = 1                      <span class=\"comment\">#设置组的个数</span></div><div class=\"line\"></div><div class=\"line\">然后在末尾添加分组信息，目前只有一个分组，就只写一个</div><div class=\"line\">[group1]</div><div class=\"line\">group_name=group1</div><div class=\"line\">storage_server_port=23000</div><div class=\"line\">store_path_count=1</div><div class=\"line\">store_path0=/home/hyp/Desktop/opensource/storage_base_path</div><div class=\"line\"></div><div class=\"line\">建立M00至存储目录的符号连接</div><div class=\"line\">ln <span class=\"_\">-s</span> /home/hyp/Desktop/opensource/storage_base_path/data /home/hyp/Desktop/opensource/storage_base_path/M00 （好像删除也可以，因为上面</div><div class=\"line\">/group1/M00的root已经指向data了）</div></pre></td></tr></table></figure>\n<h4 id=\"5-3-运行\"><a href=\"#5-3-运行\" class=\"headerlink\" title=\"5.3 运行\"></a>5.3 运行</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">fdfs_trackerd /etc/fdfs/tracker.conf restart</div><div class=\"line\">fdfs_storaged /etc/fdfs/storage.conf restart</div><div class=\"line\">fdfs_upload_file /etc/fdfs/client.conf ~/Desktop/kenan.jpg </div><div class=\"line\">group1/M00/00/00/rBA3nFgJuvmAHHJ0AAENmFEdiOY703.jpg</div><div class=\"line\">到/usr/<span class=\"built_in\">local</span>/nginx/sbin目录，执行: ./nginx</div><div class=\"line\">./nginx</div><div class=\"line\">ngx_http_fastdfs_set pid=22882</div><div class=\"line\"></div><div class=\"line\">lsof -i:8080</div><div class=\"line\">COMMAND   PID   USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</div><div class=\"line\">nginx   22883   root    6u  IPv4 860115      0t0  TCP *:http-alt (LISTEN)</div><div class=\"line\">nginx   22884 nobody    6u  IPv4 860115      0t0  TCP *:http-alt (LISTEN)</div><div class=\"line\"></div><div class=\"line\">输入http://localhost:8080/即可显示首页</div><div class=\"line\">输入http://localhost:8080/group1/M00/00/00/rBA3nFgJuvmAHHJ0AAENmFEdiOY703.jpg即可显示kenan.jpg图片了</div></pre></td></tr></table></figure>\n<h3 id=\"6-遇到的问题\"><a href=\"#6-遇到的问题\" class=\"headerlink\" title=\"6. 遇到的问题\"></a>6. 遇到的问题</h3><h4 id=\"6-1-官网下载最新版本后，我下载的为nginx-1-10-2-tar-gz，编译运行\"><a href=\"#6-1-官网下载最新版本后，我下载的为nginx-1-10-2-tar-gz，编译运行\" class=\"headerlink\" title=\"6.1 官网下载最新版本后，我下载的为nginx-1.10.2.tar.gz，编译运行\"></a>6.1 官网下载最新版本后，我下载的为nginx-1.10.2.tar.gz，编译运行</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">ps -aux|grep nginx</div><div class=\"line\">出现：</div><div class=\"line\">root      7421  0.0  0.0  28588   564 ?        Ss   09:42   0:00 nginx: master process ./nginx</div><div class=\"line\">nobody    7422  0.0  0.0  29012  2552 ?        S    09:42   0:00 nginx: worker process</div></pre></td></tr></table></figure>\n<p>但是在我ubantu12.04 x64的笔记本上只出现了一个进程，怪了，在ubantu12.04上，添加模块–add-module=/home/hyp/Desktop/opensource/fastdfs-nginx-module/src<br>后，也只有一个进程了，且此时浏览器访问<a href=\"http://localhost\" target=\"_blank\" rel=\"external\">localhost</a>时，总是无法显示，浏览器总在转圈，可能原因是配置文件中的http.server_port端口没有配<br>置好，端口需要配置与nginx中监听的端口一致，或者是mod_fastdfs.conf文件没有配置好，如末尾没有添加分组信息，此问题困扰了两天；</p>\n<h4 id=\"6-2-有时执行-fdfs-storaged-storage-conf\"><a href=\"#6-2-有时执行-fdfs-storaged-storage-conf\" class=\"headerlink\" title=\"6.2 有时执行: fdfs_storaged storage.conf\"></a>6.2 有时执行: fdfs_storaged storage.conf</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">[2016-10-21 10:30:12] ERROR - file: shared_func.c, line: 968, /storage.conf is not a regular file</div><div class=\"line\">root@hyp-HP-Pro-3340-MT:/etc/fdfs<span class=\"comment\"># [2016-10-21 10:30:12] ERROR - file: storage_func.c, line: 1076, load conf file \"storage.conf\" fail, ret code: 22</span></div><div class=\"line\">[2016-10-21 10:30:12] CRIT - <span class=\"built_in\">exit</span> abnormally!</div><div class=\"line\"></div><div class=\"line\">^C</div><div class=\"line\">[2016-10-21 10:03:10] ERROR - file: shared_func.c, line: 968, /./storage.conf is not a regular file</div><div class=\"line\">[2016-10-21 10:03:10] ERROR - file: storage_func.c, line: 1076, load conf file <span class=\"string\">\"./storage.conf\"</span> fail, ret code: 22</div><div class=\"line\">[2016-10-21 10:03:10] CRIT - <span class=\"built_in\">exit</span> abnormally!</div><div class=\"line\"></div><div class=\"line\">^C</div><div class=\"line\"></div><div class=\"line\">使用完整路径即可： fdfs_storaged /etc/fdfs/storage.conf</div></pre></td></tr></table></figure>\n<h3 id=\"7-参考来源：\"><a href=\"#7-参考来源：\" class=\"headerlink\" title=\"7. 参考来源：\"></a>7. 参考来源：</h3><p><a href=\"http://www.tuicool.com/articles/q6ZvUn\" target=\"_blank\" rel=\"external\">http://www.tuicool.com/articles/q6ZvUn</a></p>\n<p><a href=\"http://blog.itpub.net/7734666/viewspace-1292485/\" target=\"_blank\" rel=\"external\">http://www.tuicool.com/articles/q6ZvUn</a></p>\n","excerpt":"<h2 id=\"ubantu14-04-x64下搭建FastDFS分布式存储环境（使用Nginx模块）\"><a href=\"#ubantu14-04-x64下搭建FastDFS分布式存储环境（使用Nginx模块）\" class=\"headerlink\" title=\"ubantu14.04 x64下搭建FastDFS分布式存储环境（使用Nginx模块）\"></a>ubantu14.04 x64下搭建FastDFS分布式存储环境（使用Nginx模块）</h2>","more":"<h3 id=\"1-软件准备\"><a href=\"#1-软件准备\" class=\"headerlink\" title=\"1. 软件准备\"></a>1. 软件准备</h3><h4 id=\"1-1-从happyfish100下载最新的fastdfs（当前为v5-08）、libfastcommon、fastdfs-nginx-module；\"><a href=\"#1-1-从happyfish100下载最新的fastdfs（当前为v5-08）、libfastcommon、fastdfs-nginx-module；\" class=\"headerlink\" title=\"1.1 从happyfish100下载最新的fastdfs（当前为v5.08）、libfastcommon、fastdfs-nginx-module；\"></a>1.1 从<a href=\"https://github.com/happyfish100\">happyfish100</a>下载最新的fastdfs（当前为v5.08）、libfastcommon、fastdfs-nginx-module；</h4><h4 id=\"1-2-从nginx官网下载nginx-我下载的版本为nginx-1-10-2-tar-gz\"><a href=\"#1-2-从nginx官网下载nginx-我下载的版本为nginx-1-10-2-tar-gz\" class=\"headerlink\" title=\"1.2 从nginx官网下载nginx,我下载的版本为nginx-1.10.2.tar.gz\"></a>1.2 从nginx官网下载nginx,我下载的版本为nginx-1.10.2.tar.gz</h4><h3 id=\"2-安装libfastcommon\"><a href=\"#2-安装libfastcommon\" class=\"headerlink\" title=\"2. 安装libfastcommon\"></a>2. 安装libfastcommon</h3><h4 id=\"2-1-安装\"><a href=\"#2-1-安装\" class=\"headerlink\" title=\"2.1 安装\"></a>2.1 安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#./makesh</span></div><div class=\"line\"><span class=\"comment\">#./make.sh install</span></div></pre></td></tr></table></figure>\n<h4 id=\"2-2-配置\"><a href=\"#2-2-配置\" class=\"headerlink\" title=\"2.2 配置\"></a>2.2 配置</h4><p>但是FastDFS主程序设置的lib目录是/usr/local/lib<br>所以需要创建软链接.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">ln <span class=\"_\">-s</span> /usr/lib64/libfastcommon.so /usr/<span class=\"built_in\">local</span>/lib/libfastcommon.so</div><div class=\"line\">ln <span class=\"_\">-s</span> /usr/lib64/libfastcommon.so /usr/lib/libfastcommon.so</div><div class=\"line\">ln <span class=\"_\">-s</span> /usr/lib64/libfdfsclient.so /usr/<span class=\"built_in\">local</span>/lib/libfdfsclient.so</div><div class=\"line\">ln <span class=\"_\">-s</span> /usr/lib64/libfdfsclient.so /usr/lib/libfdfsclient.so</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-安装fastdfs主程序\"><a href=\"#3-安装fastdfs主程序\" class=\"headerlink\" title=\"3. 安装fastdfs主程序\"></a>3. 安装fastdfs主程序</h3><h4 id=\"3-1-安装\"><a href=\"#3-1-安装\" class=\"headerlink\" title=\"3.1  安装\"></a>3.1  安装</h4><p>进入fastdfs主目录，依次执行：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">./make.sh </div><div class=\"line\">./make.sh install</div></pre></td></tr></table></figure></p>\n<p>执行完毕后，可执行文件在/usr/bin/下以fdfs开头，ll /usr/bin/fdfs<em>，会看到一些可执行程序，如fdfs_upload_file等；<br>在/etc/fdfs/目录下也有一些配置文件，如：storage.conf.sample等；<br>执行： cp fastdfs/conf/</em> /etc/fdfs，即将conf目录下的所有文件复制到/etc/fdfs目录下</p>\n<h4 id=\"3-2-配置\"><a href=\"#3-2-配置\" class=\"headerlink\" title=\"3.2 配置\"></a>3.2 配置</h4><p>在fastdfs同级目录，新建目录storage_base_path，client_base_path，mod_fastdfs_base_path，store_path0，tracker_base_path<br>修改/etc/fdfs/tracker.conf(若没有，则cp /etc/fdfs/tracker.conf.sample /etc/fdfs/tracker.conf)<br>将base_path的值设置为tracker_base_path目录，如：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/fdfs/tracker.conf</div><div class=\"line\">base_path=/home/hyp/Desktop/opensource/tracker_base_path</div><div class=\"line\">http.server_port=8080</div><div class=\"line\"></div><div class=\"line\">vim /etc/fdfs/storage.conf</div><div class=\"line\">group_name=group1</div><div class=\"line\">base_path=/home/hyp/Desktop/opensource/storage_base_path</div><div class=\"line\">store_path0=/home/hyp/Desktop/opensource/storage_base_path</div><div class=\"line\">tracker_server=172.16.55.156:22122</div><div class=\"line\">http.server_port=8080</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">vim /etc/fdfs/client.conf</div><div class=\"line\">base_path=/home/hyp/Desktop/opensource/client_base_path</div><div class=\"line\">tracker_server=172.16.55.156:22122</div></pre></td></tr></table></figure></p>\n<h4 id=\"3-3-测试\"><a href=\"#3-3-测试\" class=\"headerlink\" title=\"3.3 测试\"></a>3.3 测试</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">which</span> fdfs_storaged </div><div class=\"line\">/usr/bin/fdfs_storaged</div><div class=\"line\"></div><div class=\"line\">fdfs_trackerd /etc/fdfs/tracker.conf restart</div><div class=\"line\">netstat -antp | grep trackerd</div><div class=\"line\"></div><div class=\"line\">fdfs_storaged /etc/fdfs/storage.conf restart</div><div class=\"line\">netstat -antp | grep storage</div><div class=\"line\"></div><div class=\"line\">ps -ef|grep fdfs</div><div class=\"line\"></div><div class=\"line\">fdfs_upload_file client.conf ~/Desktop/fork.c</div><div class=\"line\">group1/M00/00/00/rBA3nFgJeMCAUOjoAAAAxxbGNXU56061.c</div><div class=\"line\">fdfs_upload_file client.conf ~/Desktop/kenan1.jpg </div><div class=\"line\">group1/M00/00/00/rBA3nFgJxfKABNobAAITVP28J6s210.jpg</div><div class=\"line\"></div><div class=\"line\">终止命令：</div><div class=\"line\">killall fdfs_storaged </div><div class=\"line\">killall fdfs_trackerd</div></pre></td></tr></table></figure>\n<h3 id=\"4-安装fastdfs-nginx-module\"><a href=\"#4-安装fastdfs-nginx-module\" class=\"headerlink\" title=\"4. 安装fastdfs-nginx-module\"></a>4. 安装fastdfs-nginx-module</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">修改fastdfs-nginx-module的config文件</div><div class=\"line\">原来的内容是</div><div class=\"line\">CORE_INCS=<span class=\"string\">\"<span class=\"variable\">$CORE_INCS</span> /usr/local/include/fastdfs /usr/local/include/fastcommon/\"</span></div><div class=\"line\"></div><div class=\"line\">vim /home/nginx/fastdfs-nginx-module/src/config,修改为</div><div class=\"line\">CORE_INCS=<span class=\"string\">\"<span class=\"variable\">$CORE_INCS</span> /usr/include/fastdfs /usr/include/fastcommon\"</span></div><div class=\"line\"></div><div class=\"line\">注：貌似github上的fastdfs-nginx-module无需修改</div></pre></td></tr></table></figure>\n<h3 id=\"5-安装nginx并运行\"><a href=\"#5-安装nginx并运行\" class=\"headerlink\" title=\"5. 安装nginx并运行\"></a>5. 安装nginx并运行</h3><h4 id=\"5-1-解压nginx-1-10-2，并执行：\"><a href=\"#5-1-解压nginx-1-10-2，并执行：\" class=\"headerlink\" title=\"5.1 解压nginx-1.10.2，并执行：\"></a>5.1 解压nginx-1.10.2，并执行：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">./configure --prefix=/usr/<span class=\"built_in\">local</span>/nginx --add-module=/home/hyp/Desktop/opensource/fastdfs-nginx-module/src</div><div class=\"line\">make</div><div class=\"line\">make install</div></pre></td></tr></table></figure>\n<h4 id=\"5-2-配置\"><a href=\"#5-2-配置\" class=\"headerlink\" title=\"5.2 配置\"></a>5.2 配置</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">cp fastdfs-nginx-module/src/mod_fastdfs.conf /etc/fdfs/</div><div class=\"line\"></div><div class=\"line\">vim /usr/<span class=\"built_in\">local</span>/nginx/conf/nginx.conf</div><div class=\"line\">将server字段的listen字段修改为8080</div><div class=\"line\">并添加：</div><div class=\"line\">location /group1/M00 &#123;</div><div class=\"line\">            root /home/hyp/Desktop/opensource/storage_base_path/data;</div><div class=\"line\">            ngx_fastdfs_module;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">注：/home/hyp/Desktop/opensource/storage_base_path/data该目录是指向真正存储文件的地方</div><div class=\"line\"></div><div class=\"line\">修改fastdfs的nginx模块的配置文件mod_fastdfs.conf:</div><div class=\"line\">vim /etc/fdfs/mod_fastdfs.conf</div><div class=\"line\">base_path=/home/hyp/Desktop/opensource/mod_fastdfs_base_path      <span class=\"comment\">#保存日志目录</span></div><div class=\"line\">tracker_server=172.16.55.156:22122    <span class=\"comment\">#tracker 服务器的 IP 地址以及端口号</span></div><div class=\"line\">storage_server_port=23000            <span class=\"comment\">#storage 服务器的端口号</span></div><div class=\"line\">group_name=group1                    <span class=\"comment\">#当前服务器的 group 名</span></div><div class=\"line\">url_have_group_name = <span class=\"literal\">true</span>           <span class=\"comment\">#文件 url 中是否有 group 名</span></div><div class=\"line\">store_path_count=1                   <span class=\"comment\">#存储路径个数，需要和 store_path 个数匹配</span></div><div class=\"line\">store_path0=/home/hyp/Desktop/opensource/mod_fastdfs_base_path    <span class=\"comment\">#存储路径</span></div><div class=\"line\">http.need_find_content_type=<span class=\"literal\">true</span>     <span class=\"comment\"># 从文件 扩展 名查 找 文件 类型 （ nginx 时 为true）,好像没有该字段</span></div><div class=\"line\">group_count = 1                      <span class=\"comment\">#设置组的个数</span></div><div class=\"line\"></div><div class=\"line\">然后在末尾添加分组信息，目前只有一个分组，就只写一个</div><div class=\"line\">[group1]</div><div class=\"line\">group_name=group1</div><div class=\"line\">storage_server_port=23000</div><div class=\"line\">store_path_count=1</div><div class=\"line\">store_path0=/home/hyp/Desktop/opensource/storage_base_path</div><div class=\"line\"></div><div class=\"line\">建立M00至存储目录的符号连接</div><div class=\"line\">ln <span class=\"_\">-s</span> /home/hyp/Desktop/opensource/storage_base_path/data /home/hyp/Desktop/opensource/storage_base_path/M00 （好像删除也可以，因为上面</div><div class=\"line\">/group1/M00的root已经指向data了）</div></pre></td></tr></table></figure>\n<h4 id=\"5-3-运行\"><a href=\"#5-3-运行\" class=\"headerlink\" title=\"5.3 运行\"></a>5.3 运行</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">fdfs_trackerd /etc/fdfs/tracker.conf restart</div><div class=\"line\">fdfs_storaged /etc/fdfs/storage.conf restart</div><div class=\"line\">fdfs_upload_file /etc/fdfs/client.conf ~/Desktop/kenan.jpg </div><div class=\"line\">group1/M00/00/00/rBA3nFgJuvmAHHJ0AAENmFEdiOY703.jpg</div><div class=\"line\">到/usr/<span class=\"built_in\">local</span>/nginx/sbin目录，执行: ./nginx</div><div class=\"line\">./nginx</div><div class=\"line\">ngx_http_fastdfs_set pid=22882</div><div class=\"line\"></div><div class=\"line\">lsof -i:8080</div><div class=\"line\">COMMAND   PID   USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</div><div class=\"line\">nginx   22883   root    6u  IPv4 860115      0t0  TCP *:http-alt (LISTEN)</div><div class=\"line\">nginx   22884 nobody    6u  IPv4 860115      0t0  TCP *:http-alt (LISTEN)</div><div class=\"line\"></div><div class=\"line\">输入http://localhost:8080/即可显示首页</div><div class=\"line\">输入http://localhost:8080/group1/M00/00/00/rBA3nFgJuvmAHHJ0AAENmFEdiOY703.jpg即可显示kenan.jpg图片了</div></pre></td></tr></table></figure>\n<h3 id=\"6-遇到的问题\"><a href=\"#6-遇到的问题\" class=\"headerlink\" title=\"6. 遇到的问题\"></a>6. 遇到的问题</h3><h4 id=\"6-1-官网下载最新版本后，我下载的为nginx-1-10-2-tar-gz，编译运行\"><a href=\"#6-1-官网下载最新版本后，我下载的为nginx-1-10-2-tar-gz，编译运行\" class=\"headerlink\" title=\"6.1 官网下载最新版本后，我下载的为nginx-1.10.2.tar.gz，编译运行\"></a>6.1 官网下载最新版本后，我下载的为nginx-1.10.2.tar.gz，编译运行</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">ps -aux|grep nginx</div><div class=\"line\">出现：</div><div class=\"line\">root      7421  0.0  0.0  28588   564 ?        Ss   09:42   0:00 nginx: master process ./nginx</div><div class=\"line\">nobody    7422  0.0  0.0  29012  2552 ?        S    09:42   0:00 nginx: worker process</div></pre></td></tr></table></figure>\n<p>但是在我ubantu12.04 x64的笔记本上只出现了一个进程，怪了，在ubantu12.04上，添加模块–add-module=/home/hyp/Desktop/opensource/fastdfs-nginx-module/src<br>后，也只有一个进程了，且此时浏览器访问<a href=\"http://localhost\">localhost</a>时，总是无法显示，浏览器总在转圈，可能原因是配置文件中的http.server_port端口没有配<br>置好，端口需要配置与nginx中监听的端口一致，或者是mod_fastdfs.conf文件没有配置好，如末尾没有添加分组信息，此问题困扰了两天；</p>\n<h4 id=\"6-2-有时执行-fdfs-storaged-storage-conf\"><a href=\"#6-2-有时执行-fdfs-storaged-storage-conf\" class=\"headerlink\" title=\"6.2 有时执行: fdfs_storaged storage.conf\"></a>6.2 有时执行: fdfs_storaged storage.conf</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">[2016-10-21 10:30:12] ERROR - file: shared_func.c, line: 968, /storage.conf is not a regular file</div><div class=\"line\">root@hyp-HP-Pro-3340-MT:/etc/fdfs<span class=\"comment\"># [2016-10-21 10:30:12] ERROR - file: storage_func.c, line: 1076, load conf file \"storage.conf\" fail, ret code: 22</span></div><div class=\"line\">[2016-10-21 10:30:12] CRIT - <span class=\"built_in\">exit</span> abnormally!</div><div class=\"line\"></div><div class=\"line\">^C</div><div class=\"line\">[2016-10-21 10:03:10] ERROR - file: shared_func.c, line: 968, /./storage.conf is not a regular file</div><div class=\"line\">[2016-10-21 10:03:10] ERROR - file: storage_func.c, line: 1076, load conf file <span class=\"string\">\"./storage.conf\"</span> fail, ret code: 22</div><div class=\"line\">[2016-10-21 10:03:10] CRIT - <span class=\"built_in\">exit</span> abnormally!</div><div class=\"line\"></div><div class=\"line\">^C</div><div class=\"line\"></div><div class=\"line\">使用完整路径即可： fdfs_storaged /etc/fdfs/storage.conf</div></pre></td></tr></table></figure>\n<h3 id=\"7-参考来源：\"><a href=\"#7-参考来源：\" class=\"headerlink\" title=\"7. 参考来源：\"></a>7. 参考来源：</h3><p><a href=\"http://www.tuicool.com/articles/q6ZvUn\">http://www.tuicool.com/articles/q6ZvUn</a></p>\n<p><a href=\"http://blog.itpub.net/7734666/viewspace-1292485/\">http://www.tuicool.com/articles/q6ZvUn</a></p>"},{"title":"fastdfs连接池","date":"2016-12-03T17:51:25.000Z","_content":"\n# fastdfs连接池\n\n------\n## 思想\n为了提高连接速度，fastdfs使用到了连接池，并用hash数组来加速查找，key为ip_port, value为：ConnectionManager（见后面），当需要进行连接某个ip:port时，以该ip_port作为key，到hash数组中查找，得到value:ConnectionManager,该结构中保存了针对该ip:port的已建立连接的socket，第一次连接时，会调用conn_pool_connect_server函数建立连接，当需要关闭某个连接时，会调用conn_pool_close_connection_ex函数来将该连接放入连接池中或者直接关闭该连接，放入连接池中即会插入到hash数组中去，此外还会依据该连接的上次访问时间，如果很久没有访问该连接了，就会关闭该连接，见conn_pool_get_connection函数，通过hash数组+关闭连接时将该连接保存到hash数组中来实现连接池，提高连接速度；\n<!--more-->\n## 用到的数据结构\n```\ntypedef struct\n{\n\tint sock;\n\tint port;\n\tchar ip_addr[INET6_ADDRSTRLEN];\n    int socket_domain;  //socket domain, AF_INET, AF_INET6 or PF_UNSPEC for auto dedect\n} ConnectionInfo;\n\nstruct tagConnectionManager;\n\ntypedef struct tagConnectionNode {\n\tConnectionInfo *conn;  // pointer the end of ConnectionNode, see conn_pool_get_connection func\n\tstruct tagConnectionManager *manager;\n\tstruct tagConnectionNode *next; // pointer to next ConnectionNode which is the same ip and port in conn\n\ttime_t atime;  //last access time, if \n} ConnectionNode;\n\n// connection pool, key is ip_port, value is ConnectionManager, see conn_pool_get_connection func\ntypedef struct tagConnectionManager {\n\tConnectionNode *head;  // head pointer to the first ConnectionNode\n\tint total_count;  //total connections，已经建立的连接数，超过一定数值时，不会再建立连接\n\tint free_count;   //free connections\n\tpthread_mutex_t lock;\n} ConnectionManager;\n\ntypedef struct tagConnectionPool {\n\tHashArray hash_array;  //key is ip_port, value is ConnectionManager, see conn_pool_get_key func\n\tpthread_mutex_t lock;\n\tint connect_timeout;\n\tint max_count_per_entry;  //0 means no limit\n\n\t/*\n\tconnections whose the idle time exceeds this time will be closed\n    unit: second\n\t*/\n\tint max_idle_time;\n    int socket_domain;  //socket domain\n} ConnectionPool;\n```\n\n## 相关代码\nconnection_pool.h/connection_pool.c\n核心函数：conn_pool_get_connection\n\n\n\n","source":"_posts/fastdfs连接池.md","raw":"---\ntitle: fastdfs连接池\ndate: 2016-12-03 17:51:25\ntags: [fastdfs,连接池]\n---\n\n# fastdfs连接池\n\n------\n## 思想\n为了提高连接速度，fastdfs使用到了连接池，并用hash数组来加速查找，key为ip_port, value为：ConnectionManager（见后面），当需要进行连接某个ip:port时，以该ip_port作为key，到hash数组中查找，得到value:ConnectionManager,该结构中保存了针对该ip:port的已建立连接的socket，第一次连接时，会调用conn_pool_connect_server函数建立连接，当需要关闭某个连接时，会调用conn_pool_close_connection_ex函数来将该连接放入连接池中或者直接关闭该连接，放入连接池中即会插入到hash数组中去，此外还会依据该连接的上次访问时间，如果很久没有访问该连接了，就会关闭该连接，见conn_pool_get_connection函数，通过hash数组+关闭连接时将该连接保存到hash数组中来实现连接池，提高连接速度；\n<!--more-->\n## 用到的数据结构\n```\ntypedef struct\n{\n\tint sock;\n\tint port;\n\tchar ip_addr[INET6_ADDRSTRLEN];\n    int socket_domain;  //socket domain, AF_INET, AF_INET6 or PF_UNSPEC for auto dedect\n} ConnectionInfo;\n\nstruct tagConnectionManager;\n\ntypedef struct tagConnectionNode {\n\tConnectionInfo *conn;  // pointer the end of ConnectionNode, see conn_pool_get_connection func\n\tstruct tagConnectionManager *manager;\n\tstruct tagConnectionNode *next; // pointer to next ConnectionNode which is the same ip and port in conn\n\ttime_t atime;  //last access time, if \n} ConnectionNode;\n\n// connection pool, key is ip_port, value is ConnectionManager, see conn_pool_get_connection func\ntypedef struct tagConnectionManager {\n\tConnectionNode *head;  // head pointer to the first ConnectionNode\n\tint total_count;  //total connections，已经建立的连接数，超过一定数值时，不会再建立连接\n\tint free_count;   //free connections\n\tpthread_mutex_t lock;\n} ConnectionManager;\n\ntypedef struct tagConnectionPool {\n\tHashArray hash_array;  //key is ip_port, value is ConnectionManager, see conn_pool_get_key func\n\tpthread_mutex_t lock;\n\tint connect_timeout;\n\tint max_count_per_entry;  //0 means no limit\n\n\t/*\n\tconnections whose the idle time exceeds this time will be closed\n    unit: second\n\t*/\n\tint max_idle_time;\n    int socket_domain;  //socket domain\n} ConnectionPool;\n```\n\n## 相关代码\nconnection_pool.h/connection_pool.c\n核心函数：conn_pool_get_connection\n\n\n\n","slug":"fastdfs连接池","published":1,"updated":"2016-12-04T07:21:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwg2v9jj00096al8rhero8wg","content":"<h1 id=\"fastdfs连接池\"><a href=\"#fastdfs连接池\" class=\"headerlink\" title=\"fastdfs连接池\"></a>fastdfs连接池</h1><hr>\n<h2 id=\"思想\"><a href=\"#思想\" class=\"headerlink\" title=\"思想\"></a>思想</h2><p>为了提高连接速度，fastdfs使用到了连接池，并用hash数组来加速查找，key为ip_port, value为：ConnectionManager（见后面），当需要进行连接某个ip:port时，以该ip_port作为key，到hash数组中查找，得到value:ConnectionManager,该结构中保存了针对该ip:port的已建立连接的socket，第一次连接时，会调用conn_pool_connect_server函数建立连接，当需要关闭某个连接时，会调用conn_pool_close_connection_ex函数来将该连接放入连接池中或者直接关闭该连接，放入连接池中即会插入到hash数组中去，此外还会依据该连接的上次访问时间，如果很久没有访问该连接了，就会关闭该连接，见conn_pool_get_connection函数，通过hash数组+关闭连接时将该连接保存到hash数组中来实现连接池，提高连接速度；<br><a id=\"more\"></a></p>\n<h2 id=\"用到的数据结构\"><a href=\"#用到的数据结构\" class=\"headerlink\" title=\"用到的数据结构\"></a>用到的数据结构</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> sock;</div><div class=\"line\">\t<span class=\"keyword\">int</span> port;</div><div class=\"line\">\t<span class=\"keyword\">char</span> ip_addr[INET6_ADDRSTRLEN];</div><div class=\"line\">    <span class=\"keyword\">int</span> socket_domain;  <span class=\"comment\">//socket domain, AF_INET, AF_INET6 or PF_UNSPEC for auto dedect</span></div><div class=\"line\">&#125; ConnectionInfo;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">struct</span> tagConnectionManager;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> tagConnectionNode &#123;</div><div class=\"line\">\tConnectionInfo *conn;  <span class=\"comment\">// pointer the end of ConnectionNode, see conn_pool_get_connection func</span></div><div class=\"line\">\t<span class=\"keyword\">struct</span> tagConnectionManager *manager;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> tagConnectionNode *next; <span class=\"comment\">// pointer to next ConnectionNode which is the same ip and port in conn</span></div><div class=\"line\">\t<span class=\"keyword\">time_t</span> atime;  <span class=\"comment\">//last access time, if </span></div><div class=\"line\">&#125; ConnectionNode;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// connection pool, key is ip_port, value is ConnectionManager, see conn_pool_get_connection func</span></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> tagConnectionManager &#123;</div><div class=\"line\">\tConnectionNode *head;  <span class=\"comment\">// head pointer to the first ConnectionNode</span></div><div class=\"line\">\t<span class=\"keyword\">int</span> total_count;  <span class=\"comment\">//total connections，已经建立的连接数，超过一定数值时，不会再建立连接</span></div><div class=\"line\">\t<span class=\"keyword\">int</span> free_count;   <span class=\"comment\">//free connections</span></div><div class=\"line\">\t<span class=\"keyword\">pthread_mutex_t</span> lock;</div><div class=\"line\">&#125; ConnectionManager;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> tagConnectionPool &#123;</div><div class=\"line\">\tHashArray hash_array;  <span class=\"comment\">//key is ip_port, value is ConnectionManager, see conn_pool_get_key func</span></div><div class=\"line\">\t<span class=\"keyword\">pthread_mutex_t</span> lock;</div><div class=\"line\">\t<span class=\"keyword\">int</span> connect_timeout;</div><div class=\"line\">\t<span class=\"keyword\">int</span> max_count_per_entry;  <span class=\"comment\">//0 means no limit</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/*</span></div><div class=\"line\">\tconnections whose the idle time exceeds this time will be closed</div><div class=\"line\">    unit: second</div><div class=\"line\">\t*/</div><div class=\"line\">\t<span class=\"keyword\">int</span> max_idle_time;</div><div class=\"line\">    <span class=\"keyword\">int</span> socket_domain;  <span class=\"comment\">//socket domain</span></div><div class=\"line\">&#125; ConnectionPool;</div></pre></td></tr></table></figure>\n<h2 id=\"相关代码\"><a href=\"#相关代码\" class=\"headerlink\" title=\"相关代码\"></a>相关代码</h2><p>connection_pool.h/connection_pool.c<br>核心函数：conn_pool_get_connection</p>\n","excerpt":"<h1 id=\"fastdfs连接池\"><a href=\"#fastdfs连接池\" class=\"headerlink\" title=\"fastdfs连接池\"></a>fastdfs连接池</h1><hr>\n<h2 id=\"思想\"><a href=\"#思想\" class=\"headerlink\" title=\"思想\"></a>思想</h2><p>为了提高连接速度，fastdfs使用到了连接池，并用hash数组来加速查找，key为ip_port, value为：ConnectionManager（见后面），当需要进行连接某个ip:port时，以该ip_port作为key，到hash数组中查找，得到value:ConnectionManager,该结构中保存了针对该ip:port的已建立连接的socket，第一次连接时，会调用conn_pool_connect_server函数建立连接，当需要关闭某个连接时，会调用conn_pool_close_connection_ex函数来将该连接放入连接池中或者直接关闭该连接，放入连接池中即会插入到hash数组中去，此外还会依据该连接的上次访问时间，如果很久没有访问该连接了，就会关闭该连接，见conn_pool_get_connection函数，通过hash数组+关闭连接时将该连接保存到hash数组中来实现连接池，提高连接速度；<br>","more":"</p>\n<h2 id=\"用到的数据结构\"><a href=\"#用到的数据结构\" class=\"headerlink\" title=\"用到的数据结构\"></a>用到的数据结构</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> sock;</div><div class=\"line\">\t<span class=\"keyword\">int</span> port;</div><div class=\"line\">\t<span class=\"keyword\">char</span> ip_addr[INET6_ADDRSTRLEN];</div><div class=\"line\">    <span class=\"keyword\">int</span> socket_domain;  <span class=\"comment\">//socket domain, AF_INET, AF_INET6 or PF_UNSPEC for auto dedect</span></div><div class=\"line\">&#125; ConnectionInfo;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">struct</span> tagConnectionManager;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> tagConnectionNode &#123;</div><div class=\"line\">\tConnectionInfo *conn;  <span class=\"comment\">// pointer the end of ConnectionNode, see conn_pool_get_connection func</span></div><div class=\"line\">\t<span class=\"keyword\">struct</span> tagConnectionManager *manager;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> tagConnectionNode *next; <span class=\"comment\">// pointer to next ConnectionNode which is the same ip and port in conn</span></div><div class=\"line\">\t<span class=\"keyword\">time_t</span> atime;  <span class=\"comment\">//last access time, if </span></div><div class=\"line\">&#125; ConnectionNode;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// connection pool, key is ip_port, value is ConnectionManager, see conn_pool_get_connection func</span></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> tagConnectionManager &#123;</div><div class=\"line\">\tConnectionNode *head;  <span class=\"comment\">// head pointer to the first ConnectionNode</span></div><div class=\"line\">\t<span class=\"keyword\">int</span> total_count;  <span class=\"comment\">//total connections，已经建立的连接数，超过一定数值时，不会再建立连接</span></div><div class=\"line\">\t<span class=\"keyword\">int</span> free_count;   <span class=\"comment\">//free connections</span></div><div class=\"line\">\t<span class=\"keyword\">pthread_mutex_t</span> lock;</div><div class=\"line\">&#125; ConnectionManager;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> tagConnectionPool &#123;</div><div class=\"line\">\tHashArray hash_array;  <span class=\"comment\">//key is ip_port, value is ConnectionManager, see conn_pool_get_key func</span></div><div class=\"line\">\t<span class=\"keyword\">pthread_mutex_t</span> lock;</div><div class=\"line\">\t<span class=\"keyword\">int</span> connect_timeout;</div><div class=\"line\">\t<span class=\"keyword\">int</span> max_count_per_entry;  <span class=\"comment\">//0 means no limit</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/*</div><div class=\"line\">\tconnections whose the idle time exceeds this time will be closed</div><div class=\"line\">    unit: second</div><div class=\"line\">\t*/</span></div><div class=\"line\">\t<span class=\"keyword\">int</span> max_idle_time;</div><div class=\"line\">    <span class=\"keyword\">int</span> socket_domain;  <span class=\"comment\">//socket domain</span></div><div class=\"line\">&#125; ConnectionPool;</div></pre></td></tr></table></figure>\n<h2 id=\"相关代码\"><a href=\"#相关代码\" class=\"headerlink\" title=\"相关代码\"></a>相关代码</h2><p>connection_pool.h/connection_pool.c<br>核心函数：conn_pool_get_connection</p>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n<!--more-->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ncategories: hexo\ntags: [hexo,github]\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n<!--more-->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2016-12-08T04:03:35.849Z","updated":"2016-10-24T03:15:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwg2v9js000a6al8tu4ydtv1","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.<br><a id=\"more\"></a></p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.<br>","more":"</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>"},{"title":"test","date":"2016-12-08T16:03:52.000Z","_content":"\n## this is test file\n### this is test file\n","source":"_posts/test.md","raw":"---\ntitle: test\ndate: 2016-12-08 16:03:52\ntags: [test]\n---\n\n## this is test file\n### this is test file\n","slug":"test","published":1,"updated":"2016-12-08T08:04:17.793Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwg2v9jz000d6al8hpolfh0u","content":"<h2 id=\"this-is-test-file\"><a href=\"#this-is-test-file\" class=\"headerlink\" title=\"this is test file\"></a>this is test file</h2><h3 id=\"this-is-test-file-1\"><a href=\"#this-is-test-file-1\" class=\"headerlink\" title=\"this is test file\"></a>this is test file</h3>","excerpt":"","more":"<h2 id=\"this-is-test-file\"><a href=\"#this-is-test-file\" class=\"headerlink\" title=\"this is test file\"></a>this is test file</h2><h3 id=\"this-is-test-file-1\"><a href=\"#this-is-test-file-1\" class=\"headerlink\" title=\"this is test file\"></a>this is test file</h3>"},{"title":"多个线程监听同一个fd","date":"2016-11-27T16:23:59.000Z","_content":"\n## 多个线程监听同一个fd\n\n### 测试环境\nubantu 12.04 x64\n\n### 目的\n多个线程监听同一fd,看看是否会出现问题，连接到来时，是否每个线程都会被唤醒，\n还是只唤醒一个，每个线程被唤醒的次数是否会相等。\n<!--more-->\n### 代码\n```bash\n// server.c\n#include <sys/time.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n\n#define PORT 4321\n#define BACKLOG 100\n#define MAXRECVLEN 1024\npthread_t tid[10];\nlong cnt[10];\n\nvoid accept_thread_entrance( void* arg );\n\nint main(int argc, char *argv[])\n{\n    char buf[MAXRECVLEN];\n    int listenfd, connectfd;  /* socket descriptors */\n    struct sockaddr_in server; /* server's address information */\n    struct sockaddr_in client; /* client's address information */\n    socklen_t addrlen;\n    /* Create TCP socket */\n    if ((listenfd = socket(AF_INET, SOCK_STREAM, 0)) == -1)\n    {\n        /* handle exception */\n        perror(\"socket() error. Failed to initiate a socket\");\n        exit(1);\n    }\n \n    int opt = SO_REUSEADDR;\n    setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt));\n    server.sin_family = AF_INET;\n    server.sin_port = htons(PORT);\n    server.sin_addr.s_addr = htonl(INADDR_ANY);\n    if(bind(listenfd, (struct sockaddr *)&server, sizeof(server)) == -1)\n    {\n        perror(\"Bind() error.\");\n        exit(1);\n    }\n    \n    if(listen(listenfd, BACKLOG) == -1)\n    {\n        perror(\"listen() error. \\n\");\n        exit(1);\n    }\n        int i = 0;\n\tint result;\n\n    for (i=0; i<5; i++)\n    {\n\tcnt[i] = 0;\n\t\n\t\t\t\tif ((result=pthread_create(&tid[i], NULL, \\\n\t\t\t\t\taccept_thread, \\\n\t\t\t\t\t(void *)(long)listenfd)) != 0)\n\t\t\t\t{\n                                        puts(\"pthread_create error\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n    }\n\n  \n    printf( \"%lu, %lu, %lu, %lu, %lu \\n\", tid[0], tid[1], tid[2], tid[3], tid[4] ); //这里的输出与子线程的pthread_self返回值并不一样\n\n    while(1);\n\n    return 0;\n}\n\npthread_mutex_t mutex;\npthread_t childTid[10];\nint idx = 0;\n\nvoid accept_thread( void* arg )\n{\n\tint listenfd = (long)arg;\n\tint connectfd;\n\tstruct sockaddr_in client;\n        socklen_t addrlen;\n\taddrlen = sizeof(client);\n    pthread_mutex_lock(&mutex);\n    childTid[idx++] = pthread_self();\n    pthread_mutex_unlock(&mutex);\n\n    while(1)\n    {\n        if((connectfd=accept(listenfd,(struct sockaddr *)&client, &addrlen))==-1)\n          {\n            perror(\"accept() error. \\n\");\n            exit(1);\n          }\n\n        struct timeval tv;\n        gettimeofday(&tv, NULL);\n        printf(\"pthread-id=%lu,You got a connection from client's ip %s, port %d at time %ld.%ld\\n\",pthread_self(), inet_ntoa(client.sin_addr),htons(client.sin_port), tv.tv_sec,tv.tv_usec);\n\tint i = 0;\n  \tpthread_mutex_lock(&mutex);\n        for( i = 0; i < 5; i++ )\n\t{\n\t\tif( pthread_self() == childTid[i] )\n\t\t{\n\t\t\tcnt[i]++;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tprintf( \"%ld, %ld, %ld, %ld, %ld \\n\", cnt[0], cnt[1], cnt[2], cnt[3], cnt[4] );\n        pthread_mutex_unlock(&mutex);\n        close(connectfd);\n    }\n\treturn;\n}\n```\n\n```bash\n// client.c:\n#include <stdlib.h>\n#include <stdio.h>\n#include <unistd.h>\n#include <string.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <netdb.h>  /* netdb is necessary for struct hostent */\n#define PORT 4321  /* server port */\n#define MAXDATASIZE 100\n\nint main(int argc, char *argv[])\n{\n    int sockfd, num;    /* files descriptors */\n    char buf[MAXDATASIZE];    /* buf will store received text */\n    struct hostent *he;    /* structure that will get information about remote host */\n    struct sockaddr_in server;\n    if (argc != 2)\n    {\n        printf(\"Usage: %s <IP Address>\\n\",argv[0]);\n        exit(1);\n    }\n    \n    if((he=gethostbyname(argv[1]))==NULL)\n    {\n        printf(\"gethostbyname() error\\n\");\n        exit(1);\n    }\n    \n    if((sockfd=socket(AF_INET,SOCK_STREAM, 0))==-1)\n    {\n        printf(\"socket() error\\n\");\n        exit(1);\n    }\n    bzero(&server,sizeof(server));\n    server.sin_family = AF_INET;\n    server.sin_port = htons(PORT);\n    server.sin_addr = *((struct in_addr *)he->h_addr);\n    if(connect(sockfd, (struct sockaddr *)&server, sizeof(server))==-1)\n    {\n        printf(\"connect() error\\n\");\n        exit(1);\n    }\n    close(sockfd);\n    return 0;\n}\n```\n\n```bash\n//test.c:\n#include <stdio.h>\nint main()\n{\n\tint ret = 0;\n\tlong long cnt = 0;\n\twhile(1)\n\t{\n\t\tsystem(\"./client 127.0.0.1\");\n\t\tcnt++;\t\n\n\t\tif( 10000 == cnt )\n\t\t{\n\t\t\tbreak;\n\t\t}\t\n\t}\n\treturn ret;\n}\n//运行结果：\n./test\n./test\npthread-id=870520576,You got a connection from client's ip 127.0.0.1, port 36335 at time 1480235067.980892\n3995, 4007, 4006, 3995, 3997 \n```\n\n### 结论\n只会唤醒一个线程，且每个线程被唤醒的次数基本相等，多个线程监听同一个fd基本没问题\n","source":"_posts/多个线程监听同一个fd.md","raw":"---\ntitle: 多个线程监听同一个fd\ndate: 2016-11-27 16:23:59\ntags: [multi pthread]\n---\n\n## 多个线程监听同一个fd\n\n### 测试环境\nubantu 12.04 x64\n\n### 目的\n多个线程监听同一fd,看看是否会出现问题，连接到来时，是否每个线程都会被唤醒，\n还是只唤醒一个，每个线程被唤醒的次数是否会相等。\n<!--more-->\n### 代码\n```bash\n// server.c\n#include <sys/time.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n\n#define PORT 4321\n#define BACKLOG 100\n#define MAXRECVLEN 1024\npthread_t tid[10];\nlong cnt[10];\n\nvoid accept_thread_entrance( void* arg );\n\nint main(int argc, char *argv[])\n{\n    char buf[MAXRECVLEN];\n    int listenfd, connectfd;  /* socket descriptors */\n    struct sockaddr_in server; /* server's address information */\n    struct sockaddr_in client; /* client's address information */\n    socklen_t addrlen;\n    /* Create TCP socket */\n    if ((listenfd = socket(AF_INET, SOCK_STREAM, 0)) == -1)\n    {\n        /* handle exception */\n        perror(\"socket() error. Failed to initiate a socket\");\n        exit(1);\n    }\n \n    int opt = SO_REUSEADDR;\n    setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt));\n    server.sin_family = AF_INET;\n    server.sin_port = htons(PORT);\n    server.sin_addr.s_addr = htonl(INADDR_ANY);\n    if(bind(listenfd, (struct sockaddr *)&server, sizeof(server)) == -1)\n    {\n        perror(\"Bind() error.\");\n        exit(1);\n    }\n    \n    if(listen(listenfd, BACKLOG) == -1)\n    {\n        perror(\"listen() error. \\n\");\n        exit(1);\n    }\n        int i = 0;\n\tint result;\n\n    for (i=0; i<5; i++)\n    {\n\tcnt[i] = 0;\n\t\n\t\t\t\tif ((result=pthread_create(&tid[i], NULL, \\\n\t\t\t\t\taccept_thread, \\\n\t\t\t\t\t(void *)(long)listenfd)) != 0)\n\t\t\t\t{\n                                        puts(\"pthread_create error\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n    }\n\n  \n    printf( \"%lu, %lu, %lu, %lu, %lu \\n\", tid[0], tid[1], tid[2], tid[3], tid[4] ); //这里的输出与子线程的pthread_self返回值并不一样\n\n    while(1);\n\n    return 0;\n}\n\npthread_mutex_t mutex;\npthread_t childTid[10];\nint idx = 0;\n\nvoid accept_thread( void* arg )\n{\n\tint listenfd = (long)arg;\n\tint connectfd;\n\tstruct sockaddr_in client;\n        socklen_t addrlen;\n\taddrlen = sizeof(client);\n    pthread_mutex_lock(&mutex);\n    childTid[idx++] = pthread_self();\n    pthread_mutex_unlock(&mutex);\n\n    while(1)\n    {\n        if((connectfd=accept(listenfd,(struct sockaddr *)&client, &addrlen))==-1)\n          {\n            perror(\"accept() error. \\n\");\n            exit(1);\n          }\n\n        struct timeval tv;\n        gettimeofday(&tv, NULL);\n        printf(\"pthread-id=%lu,You got a connection from client's ip %s, port %d at time %ld.%ld\\n\",pthread_self(), inet_ntoa(client.sin_addr),htons(client.sin_port), tv.tv_sec,tv.tv_usec);\n\tint i = 0;\n  \tpthread_mutex_lock(&mutex);\n        for( i = 0; i < 5; i++ )\n\t{\n\t\tif( pthread_self() == childTid[i] )\n\t\t{\n\t\t\tcnt[i]++;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tprintf( \"%ld, %ld, %ld, %ld, %ld \\n\", cnt[0], cnt[1], cnt[2], cnt[3], cnt[4] );\n        pthread_mutex_unlock(&mutex);\n        close(connectfd);\n    }\n\treturn;\n}\n```\n\n```bash\n// client.c:\n#include <stdlib.h>\n#include <stdio.h>\n#include <unistd.h>\n#include <string.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <netdb.h>  /* netdb is necessary for struct hostent */\n#define PORT 4321  /* server port */\n#define MAXDATASIZE 100\n\nint main(int argc, char *argv[])\n{\n    int sockfd, num;    /* files descriptors */\n    char buf[MAXDATASIZE];    /* buf will store received text */\n    struct hostent *he;    /* structure that will get information about remote host */\n    struct sockaddr_in server;\n    if (argc != 2)\n    {\n        printf(\"Usage: %s <IP Address>\\n\",argv[0]);\n        exit(1);\n    }\n    \n    if((he=gethostbyname(argv[1]))==NULL)\n    {\n        printf(\"gethostbyname() error\\n\");\n        exit(1);\n    }\n    \n    if((sockfd=socket(AF_INET,SOCK_STREAM, 0))==-1)\n    {\n        printf(\"socket() error\\n\");\n        exit(1);\n    }\n    bzero(&server,sizeof(server));\n    server.sin_family = AF_INET;\n    server.sin_port = htons(PORT);\n    server.sin_addr = *((struct in_addr *)he->h_addr);\n    if(connect(sockfd, (struct sockaddr *)&server, sizeof(server))==-1)\n    {\n        printf(\"connect() error\\n\");\n        exit(1);\n    }\n    close(sockfd);\n    return 0;\n}\n```\n\n```bash\n//test.c:\n#include <stdio.h>\nint main()\n{\n\tint ret = 0;\n\tlong long cnt = 0;\n\twhile(1)\n\t{\n\t\tsystem(\"./client 127.0.0.1\");\n\t\tcnt++;\t\n\n\t\tif( 10000 == cnt )\n\t\t{\n\t\t\tbreak;\n\t\t}\t\n\t}\n\treturn ret;\n}\n//运行结果：\n./test\n./test\npthread-id=870520576,You got a connection from client's ip 127.0.0.1, port 36335 at time 1480235067.980892\n3995, 4007, 4006, 3995, 3997 \n```\n\n### 结论\n只会唤醒一个线程，且每个线程被唤醒的次数基本相等，多个线程监听同一个fd基本没问题\n","slug":"多个线程监听同一个fd","published":1,"updated":"2016-12-04T04:56:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwg2v9k7000f6al8map9174l","content":"<h2 id=\"多个线程监听同一个fd\"><a href=\"#多个线程监听同一个fd\" class=\"headerlink\" title=\"多个线程监听同一个fd\"></a>多个线程监听同一个fd</h2><h3 id=\"测试环境\"><a href=\"#测试环境\" class=\"headerlink\" title=\"测试环境\"></a>测试环境</h3><p>ubantu 12.04 x64</p>\n<h3 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h3><p>多个线程监听同一fd,看看是否会出现问题，连接到来时，是否每个线程都会被唤醒，<br>还是只唤醒一个，每个线程被唤醒的次数是否会相等。<br><a id=\"more\"></a></p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div></pre></td><td class=\"code\"><pre><div class=\"line\">// server.c</div><div class=\"line\"><span class=\"comment\">#include &lt;sys/time.h&gt;</span></div><div class=\"line\"><span class=\"comment\">#include &lt;stdlib.h&gt;</span></div><div class=\"line\"><span class=\"comment\">#include &lt;stdio.h&gt;</span></div><div class=\"line\"><span class=\"comment\">#include &lt;string.h&gt;</span></div><div class=\"line\"><span class=\"comment\">#include &lt;unistd.h&gt;</span></div><div class=\"line\"><span class=\"comment\">#include &lt;sys/types.h&gt;</span></div><div class=\"line\"><span class=\"comment\">#include &lt;sys/socket.h&gt;</span></div><div class=\"line\"><span class=\"comment\">#include &lt;netinet/in.h&gt;</span></div><div class=\"line\"><span class=\"comment\">#include &lt;arpa/inet.h&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#define PORT 4321</span></div><div class=\"line\"><span class=\"comment\">#define BACKLOG 100</span></div><div class=\"line\"><span class=\"comment\">#define MAXRECVLEN 1024</span></div><div class=\"line\">pthread_t tid[10];</div><div class=\"line\">long cnt[10];</div><div class=\"line\"></div><div class=\"line\">void accept_thread_entrance( void* arg );</div><div class=\"line\"></div><div class=\"line\">int main(int argc, char *argv[])</div><div class=\"line\">&#123;</div><div class=\"line\">    char buf[MAXRECVLEN];</div><div class=\"line\">    int listenfd, connectfd;  /* socket descriptors */</div><div class=\"line\">    struct sockaddr_in server; /* server<span class=\"string\">'s address information */</span></div><div class=\"line\">    struct sockaddr_in client; /* client's address information */</div><div class=\"line\">    socklen_t addrlen;</div><div class=\"line\">    /* Create TCP socket */</div><div class=\"line\">    <span class=\"keyword\">if</span> ((listenfd = socket(AF_INET, SOCK_STREAM, 0)) == -1)</div><div class=\"line\">    &#123;</div><div class=\"line\">        /* handle exception */</div><div class=\"line\">        perror(<span class=\"string\">\"socket() error. Failed to initiate a socket\"</span>);</div><div class=\"line\">        <span class=\"built_in\">exit</span>(1);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    int opt = SO_REUSEADDR;</div><div class=\"line\">    setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, &amp;opt, sizeof(opt));</div><div class=\"line\">    server.sin_family = AF_INET;</div><div class=\"line\">    server.sin_port = htons(PORT);</div><div class=\"line\">    server.sin_addr.s_addr = htonl(INADDR_ANY);</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">bind</span>(listenfd, (struct sockaddr *)&amp;server, sizeof(server)) == -1)</div><div class=\"line\">    &#123;</div><div class=\"line\">        perror(<span class=\"string\">\"Bind() error.\"</span>);</div><div class=\"line\">        <span class=\"built_in\">exit</span>(1);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span>(listen(listenfd, BACKLOG) == -1)</div><div class=\"line\">    &#123;</div><div class=\"line\">        perror(<span class=\"string\">\"listen() error. \\n\"</span>);</div><div class=\"line\">        <span class=\"built_in\">exit</span>(1);</div><div class=\"line\">    &#125;</div><div class=\"line\">        int i = 0;</div><div class=\"line\">\tint result;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (i=0; i&lt;5; i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">\tcnt[i] = 0;</div><div class=\"line\">\t</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> ((result=pthread_create(&amp;tid[i], NULL, \\</div><div class=\"line\">\t\t\t\t\taccept_thread, \\</div><div class=\"line\">\t\t\t\t\t(void *)(long)listenfd)) != 0)</div><div class=\"line\">\t\t\t\t&#123;</div><div class=\"line\">                                        puts(<span class=\"string\">\"pthread_create error\"</span>);</div><div class=\"line\">\t\t\t\t\t<span class=\"built_in\">break</span>;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">  </div><div class=\"line\">    <span class=\"built_in\">printf</span>( <span class=\"string\">\"%lu, %lu, %lu, %lu, %lu \\n\"</span>, tid[0], tid[1], tid[2], tid[3], tid[4] ); //这里的输出与子线程的pthread_self返回值并不一样</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span>(1);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">return</span> 0;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">pthread_mutex_t mutex;</div><div class=\"line\">pthread_t childTid[10];</div><div class=\"line\">int idx = 0;</div><div class=\"line\"></div><div class=\"line\">void accept_thread( void* arg )</div><div class=\"line\">&#123;</div><div class=\"line\">\tint listenfd = (long)arg;</div><div class=\"line\">\tint connectfd;</div><div class=\"line\">\tstruct sockaddr_in client;</div><div class=\"line\">        socklen_t addrlen;</div><div class=\"line\">\taddrlen = sizeof(client);</div><div class=\"line\">    pthread_mutex_lock(&amp;mutex);</div><div class=\"line\">    childTid[idx++] = pthread_self();</div><div class=\"line\">    pthread_mutex_unlock(&amp;mutex);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span>(1)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>((connectfd=accept(listenfd,(struct sockaddr *)&amp;client, &amp;addrlen))==-1)</div><div class=\"line\">          &#123;</div><div class=\"line\">            perror(<span class=\"string\">\"accept() error. \\n\"</span>);</div><div class=\"line\">            <span class=\"built_in\">exit</span>(1);</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">        struct timeval tv;</div><div class=\"line\">        gettimeofday(&amp;tv, NULL);</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"pthread-id=%lu,You got a connection from client's ip %s, port %d at time %ld.%ld\\n\"</span>,pthread_self(), inet_ntoa(client.sin_addr),htons(client.sin_port), tv.tv_sec,tv.tv_usec);</div><div class=\"line\">\tint i = 0;</div><div class=\"line\">  \tpthread_mutex_lock(&amp;mutex);</div><div class=\"line\">        <span class=\"keyword\">for</span>( i = 0; i &lt; 5; i++ )</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>( pthread_self() == childTid[i] )</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tcnt[i]++;</div><div class=\"line\">\t\t\t<span class=\"built_in\">break</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"built_in\">printf</span>( <span class=\"string\">\"%ld, %ld, %ld, %ld, %ld \\n\"</span>, cnt[0], cnt[1], cnt[2], cnt[3], cnt[4] );</div><div class=\"line\">        pthread_mutex_unlock(&amp;mutex);</div><div class=\"line\">        close(connectfd);</div><div class=\"line\">    &#125;</div><div class=\"line\">\t<span class=\"built_in\">return</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\">// client.c:</div><div class=\"line\"><span class=\"comment\">#include &lt;stdlib.h&gt;</span></div><div class=\"line\"><span class=\"comment\">#include &lt;stdio.h&gt;</span></div><div class=\"line\"><span class=\"comment\">#include &lt;unistd.h&gt;</span></div><div class=\"line\"><span class=\"comment\">#include &lt;string.h&gt;</span></div><div class=\"line\"><span class=\"comment\">#include &lt;sys/types.h&gt;</span></div><div class=\"line\"><span class=\"comment\">#include &lt;sys/socket.h&gt;</span></div><div class=\"line\"><span class=\"comment\">#include &lt;netinet/in.h&gt;</span></div><div class=\"line\"><span class=\"comment\">#include &lt;netdb.h&gt;  /* netdb is necessary for struct hostent */</span></div><div class=\"line\"><span class=\"comment\">#define PORT 4321  /* server port */</span></div><div class=\"line\"><span class=\"comment\">#define MAXDATASIZE 100</span></div><div class=\"line\"></div><div class=\"line\">int main(int argc, char *argv[])</div><div class=\"line\">&#123;</div><div class=\"line\">    int sockfd, num;    /* files descriptors */</div><div class=\"line\">    char buf[MAXDATASIZE];    /* buf will store received text */</div><div class=\"line\">    struct hostent *he;    /* structure that will get information about remote host */</div><div class=\"line\">    struct sockaddr_in server;</div><div class=\"line\">    <span class=\"keyword\">if</span> (argc != 2)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Usage: %s &lt;IP Address&gt;\\n\"</span>,argv[0]);</div><div class=\"line\">        <span class=\"built_in\">exit</span>(1);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span>((he=gethostbyname(argv[1]))==NULL)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"gethostbyname() error\\n\"</span>);</div><div class=\"line\">        <span class=\"built_in\">exit</span>(1);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span>((sockfd=socket(AF_INET,SOCK_STREAM, 0))==-1)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"socket() error\\n\"</span>);</div><div class=\"line\">        <span class=\"built_in\">exit</span>(1);</div><div class=\"line\">    &#125;</div><div class=\"line\">    bzero(&amp;server,sizeof(server));</div><div class=\"line\">    server.sin_family = AF_INET;</div><div class=\"line\">    server.sin_port = htons(PORT);</div><div class=\"line\">    server.sin_addr = *((struct in_addr *)he-&gt;h_addr);</div><div class=\"line\">    <span class=\"keyword\">if</span>(connect(sockfd, (struct sockaddr *)&amp;server, sizeof(server))==-1)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"connect() error\\n\"</span>);</div><div class=\"line\">        <span class=\"built_in\">exit</span>(1);</div><div class=\"line\">    &#125;</div><div class=\"line\">    close(sockfd);</div><div class=\"line\">    <span class=\"built_in\">return</span> 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">//test.c:</div><div class=\"line\"><span class=\"comment\">#include &lt;stdio.h&gt;</span></div><div class=\"line\">int <span class=\"function\"><span class=\"title\">main</span></span>()</div><div class=\"line\">&#123;</div><div class=\"line\">\tint ret = 0;</div><div class=\"line\">\tlong long cnt = 0;</div><div class=\"line\">\t<span class=\"keyword\">while</span>(1)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tsystem(<span class=\"string\">\"./client 127.0.0.1\"</span>);</div><div class=\"line\">\t\tcnt++;\t</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>( 10000 == cnt )</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">break</span>;</div><div class=\"line\">\t\t&#125;\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">return</span> ret;</div><div class=\"line\">&#125;</div><div class=\"line\">//运行结果：</div><div class=\"line\">./<span class=\"built_in\">test</span></div><div class=\"line\">./<span class=\"built_in\">test</span></div><div class=\"line\">pthread-id=870520576,You got a connection from client<span class=\"string\">'s ip 127.0.0.1, port 36335 at time 1480235067.980892</span></div><div class=\"line\">3995, 4007, 4006, 3995, 3997</div></pre></td></tr></table></figure>\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p>只会唤醒一个线程，且每个线程被唤醒的次数基本相等，多个线程监听同一个fd基本没问题</p>\n","excerpt":"<h2 id=\"多个线程监听同一个fd\"><a href=\"#多个线程监听同一个fd\" class=\"headerlink\" title=\"多个线程监听同一个fd\"></a>多个线程监听同一个fd</h2><h3 id=\"测试环境\"><a href=\"#测试环境\" class=\"headerlink\" title=\"测试环境\"></a>测试环境</h3><p>ubantu 12.04 x64</p>\n<h3 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h3><p>多个线程监听同一fd,看看是否会出现问题，连接到来时，是否每个线程都会被唤醒，<br>还是只唤醒一个，每个线程被唤醒的次数是否会相等。<br>","more":"</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div></pre></td><td class=\"code\"><pre><div class=\"line\">// server.c</div><div class=\"line\"><span class=\"comment\">#include &lt;sys/time.h&gt;</span></div><div class=\"line\"><span class=\"comment\">#include &lt;stdlib.h&gt;</span></div><div class=\"line\"><span class=\"comment\">#include &lt;stdio.h&gt;</span></div><div class=\"line\"><span class=\"comment\">#include &lt;string.h&gt;</span></div><div class=\"line\"><span class=\"comment\">#include &lt;unistd.h&gt;</span></div><div class=\"line\"><span class=\"comment\">#include &lt;sys/types.h&gt;</span></div><div class=\"line\"><span class=\"comment\">#include &lt;sys/socket.h&gt;</span></div><div class=\"line\"><span class=\"comment\">#include &lt;netinet/in.h&gt;</span></div><div class=\"line\"><span class=\"comment\">#include &lt;arpa/inet.h&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#define PORT 4321</span></div><div class=\"line\"><span class=\"comment\">#define BACKLOG 100</span></div><div class=\"line\"><span class=\"comment\">#define MAXRECVLEN 1024</span></div><div class=\"line\">pthread_t tid[10];</div><div class=\"line\">long cnt[10];</div><div class=\"line\"></div><div class=\"line\">void accept_thread_entrance( void* arg );</div><div class=\"line\"></div><div class=\"line\">int main(int argc, char *argv[])</div><div class=\"line\">&#123;</div><div class=\"line\">    char buf[MAXRECVLEN];</div><div class=\"line\">    int listenfd, connectfd;  /* socket descriptors */</div><div class=\"line\">    struct sockaddr_in server; /* server<span class=\"string\">'s address information */</div><div class=\"line\">    struct sockaddr_in client; /* client'</span>s address information */</div><div class=\"line\">    socklen_t addrlen;</div><div class=\"line\">    /* Create TCP socket */</div><div class=\"line\">    <span class=\"keyword\">if</span> ((listenfd = socket(AF_INET, SOCK_STREAM, 0)) == -1)</div><div class=\"line\">    &#123;</div><div class=\"line\">        /* handle exception */</div><div class=\"line\">        perror(<span class=\"string\">\"socket() error. Failed to initiate a socket\"</span>);</div><div class=\"line\">        <span class=\"built_in\">exit</span>(1);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    int opt = SO_REUSEADDR;</div><div class=\"line\">    setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, &amp;opt, sizeof(opt));</div><div class=\"line\">    server.sin_family = AF_INET;</div><div class=\"line\">    server.sin_port = htons(PORT);</div><div class=\"line\">    server.sin_addr.s_addr = htonl(INADDR_ANY);</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">bind</span>(listenfd, (struct sockaddr *)&amp;server, sizeof(server)) == -1)</div><div class=\"line\">    &#123;</div><div class=\"line\">        perror(<span class=\"string\">\"Bind() error.\"</span>);</div><div class=\"line\">        <span class=\"built_in\">exit</span>(1);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span>(listen(listenfd, BACKLOG) == -1)</div><div class=\"line\">    &#123;</div><div class=\"line\">        perror(<span class=\"string\">\"listen() error. \\n\"</span>);</div><div class=\"line\">        <span class=\"built_in\">exit</span>(1);</div><div class=\"line\">    &#125;</div><div class=\"line\">        int i = 0;</div><div class=\"line\">\tint result;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (i=0; i&lt;5; i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">\tcnt[i] = 0;</div><div class=\"line\">\t</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> ((result=pthread_create(&amp;tid[i], NULL, \\</div><div class=\"line\">\t\t\t\t\taccept_thread, \\</div><div class=\"line\">\t\t\t\t\t(void *)(long)listenfd)) != 0)</div><div class=\"line\">\t\t\t\t&#123;</div><div class=\"line\">                                        puts(<span class=\"string\">\"pthread_create error\"</span>);</div><div class=\"line\">\t\t\t\t\t<span class=\"built_in\">break</span>;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">  </div><div class=\"line\">    <span class=\"built_in\">printf</span>( <span class=\"string\">\"%lu, %lu, %lu, %lu, %lu \\n\"</span>, tid[0], tid[1], tid[2], tid[3], tid[4] ); //这里的输出与子线程的pthread_self返回值并不一样</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span>(1);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">return</span> 0;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">pthread_mutex_t mutex;</div><div class=\"line\">pthread_t childTid[10];</div><div class=\"line\">int idx = 0;</div><div class=\"line\"></div><div class=\"line\">void accept_thread( void* arg )</div><div class=\"line\">&#123;</div><div class=\"line\">\tint listenfd = (long)arg;</div><div class=\"line\">\tint connectfd;</div><div class=\"line\">\tstruct sockaddr_in client;</div><div class=\"line\">        socklen_t addrlen;</div><div class=\"line\">\taddrlen = sizeof(client);</div><div class=\"line\">    pthread_mutex_lock(&amp;mutex);</div><div class=\"line\">    childTid[idx++] = pthread_self();</div><div class=\"line\">    pthread_mutex_unlock(&amp;mutex);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span>(1)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>((connectfd=accept(listenfd,(struct sockaddr *)&amp;client, &amp;addrlen))==-1)</div><div class=\"line\">          &#123;</div><div class=\"line\">            perror(<span class=\"string\">\"accept() error. \\n\"</span>);</div><div class=\"line\">            <span class=\"built_in\">exit</span>(1);</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">        struct timeval tv;</div><div class=\"line\">        gettimeofday(&amp;tv, NULL);</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"pthread-id=%lu,You got a connection from client's ip %s, port %d at time %ld.%ld\\n\"</span>,pthread_self(), inet_ntoa(client.sin_addr),htons(client.sin_port), tv.tv_sec,tv.tv_usec);</div><div class=\"line\">\tint i = 0;</div><div class=\"line\">  \tpthread_mutex_lock(&amp;mutex);</div><div class=\"line\">        <span class=\"keyword\">for</span>( i = 0; i &lt; 5; i++ )</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>( pthread_self() == childTid[i] )</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tcnt[i]++;</div><div class=\"line\">\t\t\t<span class=\"built_in\">break</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"built_in\">printf</span>( <span class=\"string\">\"%ld, %ld, %ld, %ld, %ld \\n\"</span>, cnt[0], cnt[1], cnt[2], cnt[3], cnt[4] );</div><div class=\"line\">        pthread_mutex_unlock(&amp;mutex);</div><div class=\"line\">        close(connectfd);</div><div class=\"line\">    &#125;</div><div class=\"line\">\t<span class=\"built_in\">return</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\">// client.c:</div><div class=\"line\"><span class=\"comment\">#include &lt;stdlib.h&gt;</span></div><div class=\"line\"><span class=\"comment\">#include &lt;stdio.h&gt;</span></div><div class=\"line\"><span class=\"comment\">#include &lt;unistd.h&gt;</span></div><div class=\"line\"><span class=\"comment\">#include &lt;string.h&gt;</span></div><div class=\"line\"><span class=\"comment\">#include &lt;sys/types.h&gt;</span></div><div class=\"line\"><span class=\"comment\">#include &lt;sys/socket.h&gt;</span></div><div class=\"line\"><span class=\"comment\">#include &lt;netinet/in.h&gt;</span></div><div class=\"line\"><span class=\"comment\">#include &lt;netdb.h&gt;  /* netdb is necessary for struct hostent */</span></div><div class=\"line\"><span class=\"comment\">#define PORT 4321  /* server port */</span></div><div class=\"line\"><span class=\"comment\">#define MAXDATASIZE 100</span></div><div class=\"line\"></div><div class=\"line\">int main(int argc, char *argv[])</div><div class=\"line\">&#123;</div><div class=\"line\">    int sockfd, num;    /* files descriptors */</div><div class=\"line\">    char buf[MAXDATASIZE];    /* buf will store received text */</div><div class=\"line\">    struct hostent *he;    /* structure that will get information about remote host */</div><div class=\"line\">    struct sockaddr_in server;</div><div class=\"line\">    <span class=\"keyword\">if</span> (argc != 2)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Usage: %s &lt;IP Address&gt;\\n\"</span>,argv[0]);</div><div class=\"line\">        <span class=\"built_in\">exit</span>(1);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span>((he=gethostbyname(argv[1]))==NULL)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"gethostbyname() error\\n\"</span>);</div><div class=\"line\">        <span class=\"built_in\">exit</span>(1);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span>((sockfd=socket(AF_INET,SOCK_STREAM, 0))==-1)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"socket() error\\n\"</span>);</div><div class=\"line\">        <span class=\"built_in\">exit</span>(1);</div><div class=\"line\">    &#125;</div><div class=\"line\">    bzero(&amp;server,sizeof(server));</div><div class=\"line\">    server.sin_family = AF_INET;</div><div class=\"line\">    server.sin_port = htons(PORT);</div><div class=\"line\">    server.sin_addr = *((struct in_addr *)he-&gt;h_addr);</div><div class=\"line\">    <span class=\"keyword\">if</span>(connect(sockfd, (struct sockaddr *)&amp;server, sizeof(server))==-1)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"connect() error\\n\"</span>);</div><div class=\"line\">        <span class=\"built_in\">exit</span>(1);</div><div class=\"line\">    &#125;</div><div class=\"line\">    close(sockfd);</div><div class=\"line\">    <span class=\"built_in\">return</span> 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">//test.c:</div><div class=\"line\"><span class=\"comment\">#include &lt;stdio.h&gt;</span></div><div class=\"line\">int <span class=\"function\"><span class=\"title\">main</span></span>()</div><div class=\"line\">&#123;</div><div class=\"line\">\tint ret = 0;</div><div class=\"line\">\tlong long cnt = 0;</div><div class=\"line\">\t<span class=\"keyword\">while</span>(1)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tsystem(<span class=\"string\">\"./client 127.0.0.1\"</span>);</div><div class=\"line\">\t\tcnt++;\t</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>( 10000 == cnt )</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">break</span>;</div><div class=\"line\">\t\t&#125;\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">return</span> ret;</div><div class=\"line\">&#125;</div><div class=\"line\">//运行结果：</div><div class=\"line\">./<span class=\"built_in\">test</span></div><div class=\"line\">./<span class=\"built_in\">test</span></div><div class=\"line\">pthread-id=870520576,You got a connection from client<span class=\"string\">'s ip 127.0.0.1, port 36335 at time 1480235067.980892</div><div class=\"line\">3995, 4007, 4006, 3995, 3997</span></div></pre></td></tr></table></figure>\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p>只会唤醒一个线程，且每个线程被唤醒的次数基本相等，多个线程监听同一个fd基本没问题</p>"},{"title":"搭建github博客","date":"2016-10-14T10:42:33.000Z","_content":"![Alt text](https://damotiansheng.github.io/photos/damotiansheng.png)\n\n### 目的: 利用hexo将个人博客搭建到github上\n### [参考的相关文章](http://blog.netpi.me/%E5%AE%9E%E7%94%A8/hexo/)\n<!--more-->\n### 1、下载node-v4.6.0-linux-x64.tar.xz\n该压缩包中包含了编译好的hexo,npm,node可执行文件，可以直接使用\n\n### 2、将hexo可执行文件路径添加到PATH中\n\n### 3、初始化\n新建你要存放博客内容的目录，cd到该目录，执行：\n``` bash\n$hexo init\n```\n### 4、生成静态页面\n``` bash\n$hexo generate\n```\n\n### 5、本地启动\n``` bash\n$hexo server\n```\n\n### ６、浏览器访问\n执行完hexo server之后，浏览器输入http://localhost:4000/查看页面效果\n\n### ７、部署博客到github上去\n#### 7.1 新建github仓库，命名规则：你的github账号.github.io\n#### 7.2 修改_config.yml\n到该文件末尾，添加内容如下：\ndeploy:\n    type: git\n    repo: 刚刚创建的github仓库地址.git\n    branch: master\n注意：type,repo,branch后面有一个空格\n\n\n#### 7.3 部署到github上\n``` bash\n$hexo clean\n$hexo g\n$hexo d\n```\n\n#### 7.4 浏览器访问\n输入https://你的github账号.github.io即可访问你的博客了。\n\n### 8、hexo命令\n#### 8.1 简写\n>* hexo n == hexo new\n>* hexo g == hexo generate\n>* hexo s == hexo server\n>* hexo d == hexo deploy\n\n#### 8.2 新建文章\n>* 执行hexo new \"标题\"命令后会在_posts目录会生成文件标题.md，编辑该文件就是编辑该文章\n\n#### 8.3 hexo部署\n``` bash\n$hexo g\n$hexo d\n```\n\n### 9、添加评论和头像\n#### 9.1 添加评论\n>* 到[多说](http://duoshuo.com/create-site/)申请站点\n>* 修改theme-yilia下的_config.yml文件，修改为：duoshuo: 站点名称\n>* 重新生成并部署即可\n>* 如果不行，请参考[Hexo使用多说教程](http://dev.duoshuo.com/threads/541d3b2b40b5abcd2e4df0e9)\n\n#### 9.2 添加头像\n>* 在主目录下的source文件夹下(与_posts同目录)新建photos目录，并将xxx.png放到该目录\n>* 修改theme-yilia下的_config.yml文件，修改为：avatar: /photos/xxx.png\n>* 重新生成并部署即可\n\n### 10、注意\n>* 有时hexo new xxx文章后，发布后有乱码，此时删除该文章，然后直接vim新建，然后到博客主目录下执行hexo g -> hexo d，有乱码可能就是由于没有在主目录下执行命令，而在_posts目录下执行命令进行发布了。\n\n","source":"_posts/搭建github博客.md","raw":"---\ntitle: 搭建github博客\ndate: 2016-10-14 10:42:33\ntags: [搭建github博客]\n---\n![Alt text](https://damotiansheng.github.io/photos/damotiansheng.png)\n\n### 目的: 利用hexo将个人博客搭建到github上\n### [参考的相关文章](http://blog.netpi.me/%E5%AE%9E%E7%94%A8/hexo/)\n<!--more-->\n### 1、下载node-v4.6.0-linux-x64.tar.xz\n该压缩包中包含了编译好的hexo,npm,node可执行文件，可以直接使用\n\n### 2、将hexo可执行文件路径添加到PATH中\n\n### 3、初始化\n新建你要存放博客内容的目录，cd到该目录，执行：\n``` bash\n$hexo init\n```\n### 4、生成静态页面\n``` bash\n$hexo generate\n```\n\n### 5、本地启动\n``` bash\n$hexo server\n```\n\n### ６、浏览器访问\n执行完hexo server之后，浏览器输入http://localhost:4000/查看页面效果\n\n### ７、部署博客到github上去\n#### 7.1 新建github仓库，命名规则：你的github账号.github.io\n#### 7.2 修改_config.yml\n到该文件末尾，添加内容如下：\ndeploy:\n    type: git\n    repo: 刚刚创建的github仓库地址.git\n    branch: master\n注意：type,repo,branch后面有一个空格\n\n\n#### 7.3 部署到github上\n``` bash\n$hexo clean\n$hexo g\n$hexo d\n```\n\n#### 7.4 浏览器访问\n输入https://你的github账号.github.io即可访问你的博客了。\n\n### 8、hexo命令\n#### 8.1 简写\n>* hexo n == hexo new\n>* hexo g == hexo generate\n>* hexo s == hexo server\n>* hexo d == hexo deploy\n\n#### 8.2 新建文章\n>* 执行hexo new \"标题\"命令后会在_posts目录会生成文件标题.md，编辑该文件就是编辑该文章\n\n#### 8.3 hexo部署\n``` bash\n$hexo g\n$hexo d\n```\n\n### 9、添加评论和头像\n#### 9.1 添加评论\n>* 到[多说](http://duoshuo.com/create-site/)申请站点\n>* 修改theme-yilia下的_config.yml文件，修改为：duoshuo: 站点名称\n>* 重新生成并部署即可\n>* 如果不行，请参考[Hexo使用多说教程](http://dev.duoshuo.com/threads/541d3b2b40b5abcd2e4df0e9)\n\n#### 9.2 添加头像\n>* 在主目录下的source文件夹下(与_posts同目录)新建photos目录，并将xxx.png放到该目录\n>* 修改theme-yilia下的_config.yml文件，修改为：avatar: /photos/xxx.png\n>* 重新生成并部署即可\n\n### 10、注意\n>* 有时hexo new xxx文章后，发布后有乱码，此时删除该文章，然后直接vim新建，然后到博客主目录下执行hexo g -> hexo d，有乱码可能就是由于没有在主目录下执行命令，而在_posts目录下执行命令进行发布了。\n\n","slug":"搭建github博客","published":1,"updated":"2016-11-06T11:08:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwg2v9kb000h6al8e4uc3sjx","content":"<p><img src=\"https://damotiansheng.github.io/photos/damotiansheng.png\" alt=\"Alt text\"></p>\n<h3 id=\"目的-利用hexo将个人博客搭建到github上\"><a href=\"#目的-利用hexo将个人博客搭建到github上\" class=\"headerlink\" title=\"目的: 利用hexo将个人博客搭建到github上\"></a>目的: 利用hexo将个人博客搭建到github上</h3><h3 id=\"参考的相关文章\"><a href=\"#参考的相关文章\" class=\"headerlink\" title=\"参考的相关文章\"></a><a href=\"http://blog.netpi.me/%E5%AE%9E%E7%94%A8/hexo/\" target=\"_blank\" rel=\"external\">参考的相关文章</a></h3><a id=\"more\"></a>\n<h3 id=\"1、下载node-v4-6-0-linux-x64-tar-xz\"><a href=\"#1、下载node-v4-6-0-linux-x64-tar-xz\" class=\"headerlink\" title=\"1、下载node-v4.6.0-linux-x64.tar.xz\"></a>1、下载node-v4.6.0-linux-x64.tar.xz</h3><p>该压缩包中包含了编译好的hexo,npm,node可执行文件，可以直接使用</p>\n<h3 id=\"2、将hexo可执行文件路径添加到PATH中\"><a href=\"#2、将hexo可执行文件路径添加到PATH中\" class=\"headerlink\" title=\"2、将hexo可执行文件路径添加到PATH中\"></a>2、将hexo可执行文件路径添加到PATH中</h3><h3 id=\"3、初始化\"><a href=\"#3、初始化\" class=\"headerlink\" title=\"3、初始化\"></a>3、初始化</h3><p>新建你要存放博客内容的目录，cd到该目录，执行：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$hexo</span> init</div></pre></td></tr></table></figure></p>\n<h3 id=\"4、生成静态页面\"><a href=\"#4、生成静态页面\" class=\"headerlink\" title=\"4、生成静态页面\"></a>4、生成静态页面</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$hexo</span> generate</div></pre></td></tr></table></figure>\n<h3 id=\"5、本地启动\"><a href=\"#5、本地启动\" class=\"headerlink\" title=\"5、本地启动\"></a>5、本地启动</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$hexo</span> server</div></pre></td></tr></table></figure>\n<h3 id=\"６、浏览器访问\"><a href=\"#６、浏览器访问\" class=\"headerlink\" title=\"６、浏览器访问\"></a>６、浏览器访问</h3><p>执行完hexo server之后，浏览器输入<a href=\"http://localhost:4000/查看页面效果\" target=\"_blank\" rel=\"external\">http://localhost:4000/查看页面效果</a></p>\n<h3 id=\"７、部署博客到github上去\"><a href=\"#７、部署博客到github上去\" class=\"headerlink\" title=\"７、部署博客到github上去\"></a>７、部署博客到github上去</h3><h4 id=\"7-1-新建github仓库，命名规则：你的github账号-github-io\"><a href=\"#7-1-新建github仓库，命名规则：你的github账号-github-io\" class=\"headerlink\" title=\"7.1 新建github仓库，命名规则：你的github账号.github.io\"></a>7.1 新建github仓库，命名规则：你的github账号.github.io</h4><h4 id=\"7-2-修改-config-yml\"><a href=\"#7-2-修改-config-yml\" class=\"headerlink\" title=\"7.2 修改_config.yml\"></a>7.2 修改_config.yml</h4><p>到该文件末尾，添加内容如下：<br>deploy:<br>    type: git<br>    repo: 刚刚创建的github仓库地址.git<br>    branch: master<br>注意：type,repo,branch后面有一个空格</p>\n<h4 id=\"7-3-部署到github上\"><a href=\"#7-3-部署到github上\" class=\"headerlink\" title=\"7.3 部署到github上\"></a>7.3 部署到github上</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$hexo</span> clean</div><div class=\"line\"><span class=\"variable\">$hexo</span> g</div><div class=\"line\"><span class=\"variable\">$hexo</span> d</div></pre></td></tr></table></figure>\n<h4 id=\"7-4-浏览器访问\"><a href=\"#7-4-浏览器访问\" class=\"headerlink\" title=\"7.4 浏览器访问\"></a>7.4 浏览器访问</h4><p>输入<a href=\"https://你的github账号.github.io即可访问你的博客了。\" target=\"_blank\" rel=\"external\">https://你的github账号.github.io即可访问你的博客了。</a></p>\n<h3 id=\"8、hexo命令\"><a href=\"#8、hexo命令\" class=\"headerlink\" title=\"8、hexo命令\"></a>8、hexo命令</h3><h4 id=\"8-1-简写\"><a href=\"#8-1-简写\" class=\"headerlink\" title=\"8.1 简写\"></a>8.1 简写</h4><blockquote>\n<ul>\n<li>hexo n == hexo new</li>\n<li>hexo g == hexo generate</li>\n<li>hexo s == hexo server</li>\n<li>hexo d == hexo deploy</li>\n</ul>\n</blockquote>\n<h4 id=\"8-2-新建文章\"><a href=\"#8-2-新建文章\" class=\"headerlink\" title=\"8.2 新建文章\"></a>8.2 新建文章</h4><blockquote>\n<ul>\n<li>执行hexo new “标题”命令后会在_posts目录会生成文件标题.md，编辑该文件就是编辑该文章</li>\n</ul>\n</blockquote>\n<h4 id=\"8-3-hexo部署\"><a href=\"#8-3-hexo部署\" class=\"headerlink\" title=\"8.3 hexo部署\"></a>8.3 hexo部署</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$hexo</span> g</div><div class=\"line\"><span class=\"variable\">$hexo</span> d</div></pre></td></tr></table></figure>\n<h3 id=\"9、添加评论和头像\"><a href=\"#9、添加评论和头像\" class=\"headerlink\" title=\"9、添加评论和头像\"></a>9、添加评论和头像</h3><h4 id=\"9-1-添加评论\"><a href=\"#9-1-添加评论\" class=\"headerlink\" title=\"9.1 添加评论\"></a>9.1 添加评论</h4><blockquote>\n<ul>\n<li>到<a href=\"http://duoshuo.com/create-site/\" target=\"_blank\" rel=\"external\">多说</a>申请站点</li>\n<li>修改theme-yilia下的_config.yml文件，修改为：duoshuo: 站点名称</li>\n<li>重新生成并部署即可</li>\n<li>如果不行，请参考<a href=\"http://dev.duoshuo.com/threads/541d3b2b40b5abcd2e4df0e9\" target=\"_blank\" rel=\"external\">Hexo使用多说教程</a></li>\n</ul>\n</blockquote>\n<h4 id=\"9-2-添加头像\"><a href=\"#9-2-添加头像\" class=\"headerlink\" title=\"9.2 添加头像\"></a>9.2 添加头像</h4><blockquote>\n<ul>\n<li>在主目录下的source文件夹下(与_posts同目录)新建photos目录，并将xxx.png放到该目录</li>\n<li>修改theme-yilia下的_config.yml文件，修改为：avatar: /photos/xxx.png</li>\n<li>重新生成并部署即可</li>\n</ul>\n</blockquote>\n<h3 id=\"10、注意\"><a href=\"#10、注意\" class=\"headerlink\" title=\"10、注意\"></a>10、注意</h3><blockquote>\n<ul>\n<li>有时hexo new xxx文章后，发布后有乱码，此时删除该文章，然后直接vim新建，然后到博客主目录下执行hexo g -&gt; hexo d，有乱码可能就是由于没有在主目录下执行命令，而在_posts目录下执行命令进行发布了。</li>\n</ul>\n</blockquote>\n","excerpt":"<p><img src=\"https://damotiansheng.github.io/photos/damotiansheng.png\" alt=\"Alt text\"></p>\n<h3 id=\"目的-利用hexo将个人博客搭建到github上\"><a href=\"#目的-利用hexo将个人博客搭建到github上\" class=\"headerlink\" title=\"目的: 利用hexo将个人博客搭建到github上\"></a>目的: 利用hexo将个人博客搭建到github上</h3><h3 id=\"参考的相关文章\"><a href=\"#参考的相关文章\" class=\"headerlink\" title=\"参考的相关文章\"></a><a href=\"http://blog.netpi.me/%E5%AE%9E%E7%94%A8/hexo/\">参考的相关文章</a></h3>","more":"<h3 id=\"1、下载node-v4-6-0-linux-x64-tar-xz\"><a href=\"#1、下载node-v4-6-0-linux-x64-tar-xz\" class=\"headerlink\" title=\"1、下载node-v4.6.0-linux-x64.tar.xz\"></a>1、下载node-v4.6.0-linux-x64.tar.xz</h3><p>该压缩包中包含了编译好的hexo,npm,node可执行文件，可以直接使用</p>\n<h3 id=\"2、将hexo可执行文件路径添加到PATH中\"><a href=\"#2、将hexo可执行文件路径添加到PATH中\" class=\"headerlink\" title=\"2、将hexo可执行文件路径添加到PATH中\"></a>2、将hexo可执行文件路径添加到PATH中</h3><h3 id=\"3、初始化\"><a href=\"#3、初始化\" class=\"headerlink\" title=\"3、初始化\"></a>3、初始化</h3><p>新建你要存放博客内容的目录，cd到该目录，执行：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$hexo</span> init</div></pre></td></tr></table></figure></p>\n<h3 id=\"4、生成静态页面\"><a href=\"#4、生成静态页面\" class=\"headerlink\" title=\"4、生成静态页面\"></a>4、生成静态页面</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$hexo</span> generate</div></pre></td></tr></table></figure>\n<h3 id=\"5、本地启动\"><a href=\"#5、本地启动\" class=\"headerlink\" title=\"5、本地启动\"></a>5、本地启动</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$hexo</span> server</div></pre></td></tr></table></figure>\n<h3 id=\"６、浏览器访问\"><a href=\"#６、浏览器访问\" class=\"headerlink\" title=\"６、浏览器访问\"></a>６、浏览器访问</h3><p>执行完hexo server之后，浏览器输入<a href=\"http://localhost:4000/查看页面效果\">http://localhost:4000/查看页面效果</a></p>\n<h3 id=\"７、部署博客到github上去\"><a href=\"#７、部署博客到github上去\" class=\"headerlink\" title=\"７、部署博客到github上去\"></a>７、部署博客到github上去</h3><h4 id=\"7-1-新建github仓库，命名规则：你的github账号-github-io\"><a href=\"#7-1-新建github仓库，命名规则：你的github账号-github-io\" class=\"headerlink\" title=\"7.1 新建github仓库，命名规则：你的github账号.github.io\"></a>7.1 新建github仓库，命名规则：你的github账号.github.io</h4><h4 id=\"7-2-修改-config-yml\"><a href=\"#7-2-修改-config-yml\" class=\"headerlink\" title=\"7.2 修改_config.yml\"></a>7.2 修改_config.yml</h4><p>到该文件末尾，添加内容如下：<br>deploy:<br>    type: git<br>    repo: 刚刚创建的github仓库地址.git<br>    branch: master<br>注意：type,repo,branch后面有一个空格</p>\n<h4 id=\"7-3-部署到github上\"><a href=\"#7-3-部署到github上\" class=\"headerlink\" title=\"7.3 部署到github上\"></a>7.3 部署到github上</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$hexo</span> clean</div><div class=\"line\"><span class=\"variable\">$hexo</span> g</div><div class=\"line\"><span class=\"variable\">$hexo</span> d</div></pre></td></tr></table></figure>\n<h4 id=\"7-4-浏览器访问\"><a href=\"#7-4-浏览器访问\" class=\"headerlink\" title=\"7.4 浏览器访问\"></a>7.4 浏览器访问</h4><p>输入<a href=\"https://你的github账号.github.io即可访问你的博客了。\">https://你的github账号.github.io即可访问你的博客了。</a></p>\n<h3 id=\"8、hexo命令\"><a href=\"#8、hexo命令\" class=\"headerlink\" title=\"8、hexo命令\"></a>8、hexo命令</h3><h4 id=\"8-1-简写\"><a href=\"#8-1-简写\" class=\"headerlink\" title=\"8.1 简写\"></a>8.1 简写</h4><blockquote>\n<ul>\n<li>hexo n == hexo new</li>\n<li>hexo g == hexo generate</li>\n<li>hexo s == hexo server</li>\n<li>hexo d == hexo deploy</li>\n</ul>\n</blockquote>\n<h4 id=\"8-2-新建文章\"><a href=\"#8-2-新建文章\" class=\"headerlink\" title=\"8.2 新建文章\"></a>8.2 新建文章</h4><blockquote>\n<ul>\n<li>执行hexo new “标题”命令后会在_posts目录会生成文件标题.md，编辑该文件就是编辑该文章</li>\n</ul>\n</blockquote>\n<h4 id=\"8-3-hexo部署\"><a href=\"#8-3-hexo部署\" class=\"headerlink\" title=\"8.3 hexo部署\"></a>8.3 hexo部署</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$hexo</span> g</div><div class=\"line\"><span class=\"variable\">$hexo</span> d</div></pre></td></tr></table></figure>\n<h3 id=\"9、添加评论和头像\"><a href=\"#9、添加评论和头像\" class=\"headerlink\" title=\"9、添加评论和头像\"></a>9、添加评论和头像</h3><h4 id=\"9-1-添加评论\"><a href=\"#9-1-添加评论\" class=\"headerlink\" title=\"9.1 添加评论\"></a>9.1 添加评论</h4><blockquote>\n<ul>\n<li>到<a href=\"http://duoshuo.com/create-site/\">多说</a>申请站点</li>\n<li>修改theme-yilia下的_config.yml文件，修改为：duoshuo: 站点名称</li>\n<li>重新生成并部署即可</li>\n<li>如果不行，请参考<a href=\"http://dev.duoshuo.com/threads/541d3b2b40b5abcd2e4df0e9\">Hexo使用多说教程</a></li>\n</ul>\n</blockquote>\n<h4 id=\"9-2-添加头像\"><a href=\"#9-2-添加头像\" class=\"headerlink\" title=\"9.2 添加头像\"></a>9.2 添加头像</h4><blockquote>\n<ul>\n<li>在主目录下的source文件夹下(与_posts同目录)新建photos目录，并将xxx.png放到该目录</li>\n<li>修改theme-yilia下的_config.yml文件，修改为：avatar: /photos/xxx.png</li>\n<li>重新生成并部署即可</li>\n</ul>\n</blockquote>\n<h3 id=\"10、注意\"><a href=\"#10、注意\" class=\"headerlink\" title=\"10、注意\"></a>10、注意</h3><blockquote>\n<ul>\n<li>有时hexo new xxx文章后，发布后有乱码，此时删除该文章，然后直接vim新建，然后到博客主目录下执行hexo g -&gt; hexo d，有乱码可能就是由于没有在主目录下执行命令，而在_posts目录下执行命令进行发布了。</li>\n</ul>\n</blockquote>"},{"title":"fastdfs配置文件解析模块","date":"2016-11-06T19:11:20.000Z","_content":"\n\n### 加载配置文件解析\n配置文件有： storage.conf,tracker.conf,mod_fastdfs.conf,http.conf等，配置文件中还可以用#include包含其他配置文件，\n如#include http.conf。该配置文件解析模块就是读取这些配置文件，然后解析保存，方便得到其中的值。\n如：\nresult=iniLoadFromFileEx(filename, &iniContext, true)\npBasePath = iniGetStrValue(NULL, \"base_path\", &iniContext); //该函数就可以得到配置文件中base_path的值\n<!--more-->\n\n相关参考：[http://slucx.blog.chinaunix.net/uid-29504236-id-4369694.html](http://slucx.blog.chinaunix.net/uid-29504236-id-4369694.html)\n\n### 1. 相关数据结构\n```\ntypedef struct\n{\n\tIniSection global;  //保存全局key,value对\n\tHashArray sections;  //key is session name, and value is IniSection,这里hash数组用来保存[group1]下隶属于group1的<key,value>对\n\tIniSection *current_section; //for load from ini file，当前正在处理的IniSection\n\tchar config_path[MAX_PATH_SIZE];  //save the config filepath, such as conf file is /etc/data/xxx.conf, config_path is /etc/data\n\n    bool ignore_annotation; // 是否忽略注解，看代码时可以略过不看\n} IniContext;\n\n\ntypedef struct\n{\n\tIniItem *items;\n\tint count;  //item count\n\tint alloc_count;\n} IniSection;\n\ntypedef struct\n{\n\tchar name[FAST_INI_ITEM_NAME_LEN + 1];\n\tchar value[FAST_INI_ITEM_VALUE_LEN + 1];\n} IniItem;\n\n\ntypedef struct tagHashArray\n{\n\tHashData **buckets;\n\tHashFunc hash_func; // default is Time33Hash func\n\tint item_count;  // is all the item saved in buckets\n\tunsigned int *capacity; // pointer to prime global aarray, see hash_init_ex func\n\tdouble load_factor;\n\tint64_t max_bytes; // means the max size of space which can be used in hashArray\n\tint64_t bytes_used; // means the size of have been used, is the *capacity * sizeof(HashData *)，为已经使用的字节数\n\tbool is_malloc_capacity;\n\t// is_malloc_value is true: means the buffer of value is allocated in outer space, rather than beening allocated in the end of the key buffer\n\tbool is_malloc_value;  // it means hashArray whether  malloc space for value or not, default is false\n\t                       \n\tunsigned int lock_count;\n\tpthread_mutex_t *locks;\n} HashArray;\n\ntypedef struct tagHashData\n{\n\tint key_len;\n\tint value_len;\n\tint malloc_value_size;\n\n#ifdef HASH_STORE_HASH_CODE\n\tunsigned int hash_code;\n#endif\n\n\tchar *value;\n\tstruct tagHashData *next;\n\tchar key[0];\n} HashData;   // 元素\n\ntypedef int (*HashFunc) (const void *key, const int key_len);\n\nstatic CDCPair g_dynamic_contents[_MAX_DYNAMIC_CONTENTS] = {{false, NULL, {0, 0, NULL}}}; //用一个全局数组来保存已经解析过的文件\ntypedef struct {\n    bool used;\n    IniContext *context;\n    DynamicContents dynamicContents;\n} CDCPair;\n```\n\n其中的sections是一个hash数组，用到的hash函数默认为Time33Hash函数\n进行hash插入时，具体见hash_insert函数：\nhash_code = pHash->hash_func(key, key_len);\nppBucket = pHash->buckets + (hash_code % (*pHash->capacity));\n\nkey是section_name, key_len是section_len，而\nsection_name, section_len为\"[]\"包围的字符串，见iniDoLoadItemsFromBuffer函数\n如： [group1], section_name, section_len分别为group1和6\nmod_fastdfs.conf文件中有：\n```\n#[group1]\n#group_name=group1\n#storage_server_port=23000\n#store_path_count=2\n#store_path0=/home/yuqing/fastdfs\n#store_path1=/home/yuqing/fastdfs1\n```\n这里的group1就为section_name, section_len是6，此时current_section会指向一个新分配的IniSection，接着会将读取得到的\ngroup_name等<key,value>对插入到current_section中去，然后插入到hash数组中去。\n配置文件模块其实就是读取配置文件，然后初始化IniContext结构体。\n\n### 2. 下面讲解各个函数\n```\n调用路径如下：\niniLoadFromFile -> iniLoadFromFileEx -> iniInitContext、iniDoLoadFromFile、iniSortItems、iniFreeContext\niniInitContext -> hash_init\nhash_init->hash_init_ex->_hash_alloc_buckets\n```\n\n```\nint iniLoadFromFile(const char *szFilename, IniContext *pContext)\n{\n    return iniLoadFromFileEx(szFilename, pContext, false);\n}\n\nint iniLoadFromFileEx(const char *szFilename, IniContext *pContext,\n    bool ignore_annotation) // annotation is 注释, such as symbol = /* */\n{\n\tint result;\n\tint len;\n\tchar *pLast;\n\tchar full_filename[MAX_PATH_SIZE]; //保存完整文件名路径\n\n\tif ((result=iniInitContext(pContext)) != 0)\n\t{\n\t\treturn result;\n\t}\n\n        pContext->ignore_annotation = ignore_annotation; //default is true\n\n\tif (strncasecmp(szFilename, \"http://\", 7) == 0) // szFilename可以为类似： http://www.abc.com/sdfs/xxx.conf\n\t{\n\t\t*pContext->config_path = '\\0';\n\t\tsnprintf(full_filename, sizeof(full_filename),\"%s\",szFilename); \n\t}\n\telse\n\t{\n\t\tif (*szFilename == '/') // szFilename is the absolute path\n\t\t{\n\t\t\tpLast = strrchr(szFilename, '/'); //从后面开始查找第一个字符'/'\n\t\t\tlen = pLast - szFilename;\n\t\t\t\n\t\t\tif (len >= sizeof(pContext->config_path))\n\t\t\t{\n\t\t\t\tlogError(\"file: \"__FILE__\", line: %d, \"\\\n\t\t\t\t\t\"the path of the config file: %s is \" \\\n\t\t\t\t\t\"too long!\", __LINE__, szFilename);\n\t\t\t\treturn ENOSPC;\n\t\t\t}\n\n\t\t\tmemcpy(pContext->config_path, szFilename, len);\n\t\t\t*(pContext->config_path + len) = '\\0';\n\t\t\tsnprintf(full_filename, sizeof(full_filename), \\\n\t\t\t\t\"%s\", szFilename);\n\t\t}\n\t\telse  // 表明是从当前路径下的文件名，szFilename is the conf file name or is current_dir/xxx1/xxx2/xxx.conf\n\t\t{\n\t\t\tmemset(pContext->config_path, 0, \\\n\t\t\t\tsizeof(pContext->config_path));\n\t\t\t\n\t\t\tif (getcwd(pContext->config_path, sizeof( \\\n\t\t\t\tpContext->config_path)) == NULL)  //getcwd函数为得到当前目录\n\t\t\t{\n\t\t\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\t\t\"getcwd fail, errno: %d, \" \\\n\t\t\t\t\t\"error info: %s\", \\\n\t\t\t\t\t__LINE__, errno, STRERROR(errno));\n\t\t\t\treturn errno != 0 ? errno : EPERM;\n\t\t\t}\n\n\t\t\tlen = strlen(pContext->config_path);\n\t\t\t\n\t\t\tif (len > 0 && pContext->config_path[len - 1] == '/')\n\t\t\t{\n\t\t\t\tlen--;\n\t\t\t\t*(pContext->config_path + len) = '\\0';\n\t\t\t}  // make sure the last char is not '/'\n\n\t\t\tsnprintf(full_filename, sizeof(full_filename), \\\n\t\t\t\t\"%s/%s\", pContext->config_path, szFilename);\n\n\t\t\tpLast = strrchr(szFilename, '/');\n\t\t\t\n\t\t\tif (pLast != NULL)  // such as szFilename is \"data/xxx.conf\"\n\t\t\t{\n\t\t\t\tint tail_len;\n\t\t\t\ttail_len = pLast - szFilename;\n\t\t\t\t\n\t\t\t\tif (len + 1 + tail_len >= sizeof( \\\n\t\t\t\t\t\tpContext->config_path))\n\t\t\t\t{\n\t\t\t\t\tlogError(\"file: \"__FILE__\", line: %d, \"\\\n\t\t\t\t\t\t\"the path of the config \" \\\n\t\t\t\t\t\t\"file: %s is too long!\", \\\n\t\t\t\t\t\t__LINE__, szFilename);\n\t\t\t\t\treturn ENOSPC;\n\t\t\t\t}\n\n                *(pContext->config_path + len++) = '/';\n\t\t\t\tmemcpy(pContext->config_path + len, \\\n\t\t\t\t\tszFilename, tail_len);\n\t\t\t\tlen += tail_len;\n\t\t\t\t*(pContext->config_path + len) = '\\0';\n\t\t\t}\n\t\t}\n\t}\n\n    // now full_filename is the absolute path of conf file, pContext->config_path\n    // is the conf file directory\n\tresult = iniDoLoadFromFile(full_filename, pContext);\n\t\n\tif (result == 0)\n\t{\n\t\tiniSortItems(pContext);\n\t}\n\telse\n\t{\n\t\tiniFreeContext(pContext);\n\t}\n\n\treturn result;\n}\n\n// init the member of IniContext, such as init the hash member:pContext->sections\nstatic int iniInitContext(IniContext *pContext)\n{\n\tint result;\n\n\tmemset(pContext, 0, sizeof(IniContext));\n\tpContext->current_section = &pContext->global; //指向global,用于保存全局key,value对\n\t\n\tif ((result=hash_init(&pContext->sections, Time33Hash, 32, 0.75)) != 0) //hash数组初始化，Time33Hash为hash函数，32为容量，0.75为负载因子\n\t{\n\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"hash_init fail, errno: %d, error info: %s\", \\\n\t\t\t__LINE__, result, STRERROR(result));\n\t}\n\n\treturn result;\n}\n\nhash函数如下：\n#define TIME33_HASH_FUNC(init_value) \\\n\tint nHash; \\\n\tunsigned char *pKey; \\\n\tunsigned char *pEnd; \\\n \\\n\tnHash = init_value; \\\n\tpEnd = (unsigned char *)key + key_len; \\\n\tfor (pKey = (unsigned char *)key; pKey != pEnd; pKey++) \\\n\t{ \\\n\t\tnHash += (nHash << 5) + (*pKey); \\\n\t} \\\n \\\n\treturn nHash; \\\n\n\n// get a int value according to the key value\nint Time33Hash(const void *key, const int key_len)\n{\n\tTIME33_HASH_FUNC(0)\n}\n\n#define hash_init(pHash, hash_func, capacity, load_factor) \\\n\thash_init_ex(pHash, hash_func, capacity, load_factor, 0, false)\n\n// 参数依次为：要初始化的hash数组，hash函数，容量，负载因子（当前保存的项数/capacity）,hash数组能用的最大字节数，保存value的空间是否已经在外部被分配了\nint hash_init_ex(HashArray *pHash, HashFunc hash_func, \\\n\t\tconst unsigned int capacity, const double load_factor, \\\n\t\tconst int64_t max_bytes, const bool bMallocValue)\n{\n\tunsigned int *pprime;\n\tunsigned int *prime_end;\n\tint result;\n\n\tmemset(pHash, 0, sizeof(HashArray));\n\tprime_end = prime_array + PRIME_ARRAY_SIZE;  // 素数数组\n\t\n\tfor (pprime = prime_array; pprime!=prime_end; pprime++)\n\t{\n\t\tif ( *pprime > capacity ) //找到第一个大于容量的素数\n\t\t{\n\t\t\tpHash->capacity = pprime;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (pHash->capacity == NULL)\n\t{\n\t\treturn EINVAL;\n\t}\n\n\tif ((result=_hash_alloc_buckets(pHash, 0)) != 0) //分配桶\n\t{\n\t\treturn result;\n\t}\n\n\tpHash->hash_func = hash_func;\n\tpHash->max_bytes = max_bytes; //hash数组能够使用的最大字节数\n\tpHash->is_malloc_value = bMallocValue;  // default is false，保存key,value中的value数据时的空间是否已经在外部被分配\n\n    // load_factor default is 0.75\n\tif (load_factor >= 0.00 && load_factor <= 1.00)\n\t{\n\t\tpHash->load_factor = load_factor;\n\t}\n\telse\n\t{\n\t\tpHash->load_factor = 0.50;\n\t}\n\n\treturn 0;\n}\n\n// 素数数组\nstatic unsigned int prime_array[] = {\n    1,              /* 0 */\n    3,              /* 1 */\n    17,             /* 2 */\n    37,             /* 3 */\n    79,             /* 4 */\n    163,            /* 5 */\n    331,            /* 6 */\n    673,            /* 7 */\n    1361,           /* 8 */\n    2729,           /* 9 */\n    5471,           /* 10 */\n    10949,          /* 11 */\n    21911,          /* 12 */\n    43853,          /* 13 */\n    87719,          /* 14 */\n    175447,         /* 15 */\n    350899,         /* 16 */\n    701819,         /* 17 */\n    1403641,        /* 18 */\n    2807303,        /* 19 */\n    5614657,        /* 20 */\n    11229331,       /* 21 */\n    22458671,       /* 22 */\n    44917381,       /* 23 */\n    89834777,       /* 24 */\n    179669557,      /* 25 */\n    359339171,      /* 26 */\n    718678369,      /* 27 */\n    1437356741,     /* 28 */\n    2147483647      /* 29 (largest signed int prime) */\n};\n\n#define PRIME_ARRAY_SIZE  30\n\n// allocate the space of hash array\nstatic int _hash_alloc_buckets(HashArray *pHash, const unsigned int old_capacity)\n{\n\tsize_t bytes;\n\n\tbytes = sizeof(HashData *) * (*pHash->capacity);\n\t\n\tif (pHash->max_bytes > 0 && pHash->bytes_used+bytes > pHash->max_bytes)\n\t{\n\t\treturn ENOSPC; // no more memory in device \n\t}\n\n\tpHash->buckets = (HashData **)malloc(bytes);\n\t\n\tif (pHash->buckets == NULL)\n\t{\n\t\treturn ENOMEM;\n\t}\n\n\tmemset(pHash->buckets, 0, bytes); // sizeof(HashData *) * old_capacity为旧数组的大小\n\tpHash->bytes_used += bytes - sizeof(HashData *) * old_capacity; //bytes为新大小，减去旧数组大小则为新增大小\n\n\treturn 0;\n}\n\n\n\nstatic int iniDoLoadFromFile(const char *szFilename, \\\n\t\tIniContext *pContext)\n{\n\tchar *content;\n\tint result;\n\tint http_status;\n\tint content_len;\n\tint64_t file_size;\n\tchar error_info[512];\n\n\tif (strncasecmp(szFilename, \"http://\", 7) == 0) // 是否为http://xxx.xx.xx/xx1/xx.conf形式\n\t{\n\t    // szFilename: http://xx1.xx2.xx3/haha/dir/xxx.conf\n\t\tif ((result=get_url_content(szFilename, 10, 60, &http_status, \\   \n\t\t\t\t&content, &content_len, error_info)) != 0)  //get_url_content函数发送http请求获得文件内容\n\t\t{\n\t\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\t\"get_url_content fail, \" \\\n\t\t\t\t\"url: %s, error info: %s\", \\\n\t\t\t\t__LINE__, szFilename, error_info);\n\t\t\treturn result;\n\t\t}\n\n\t\tif (http_status != 200) // means http response status is not correct\n\t\t{\n\t\t\tfree(content);\n\t\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\t\"HTTP status code: %d != 200, url: %s\", \\\n\t\t\t\t__LINE__, http_status, szFilename);\n\t\t\treturn EINVAL;\n\t\t}\n\t\t\n\t}\n\telse\n\t{\n\t\tif ((result=getFileContent(szFilename, &content, \\\n\t\t\t\t&file_size)) != 0)\n\t\t{\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tresult = iniLoadItemsFromBuffer(content, pContext);\n\tfree(content);\n\n\treturn result;\n}\n\n\nint get_url_content(const char *url, const int connect_timeout, \\\n\tconst int network_timeout, int *http_status, \\\n\tchar **content, int *content_len, char *error_info)\n{\n    *content = NULL;\n    return get_url_content_ex(url, strlen(url), connect_timeout, network_timeout,\n            http_status, content, content_len, error_info);\n}\n\n/*\nget the content of url, the func will send http request and recv http response\n// connect_timeout is 10 default\n// network_timeout is 60 default\nhttp_status用于保存http响应报文的状态，如http 1.1 200 ok中的200\ncontent和content_len用于保存内容和长度\nerror_info用于保存错误信息\n*/\nint get_url_content_ex(const char *url, const int url_len,\n        const int connect_timeout, const int network_timeout,\n        int *http_status, char **content, int *content_len, char *error_info)\n{\n\tchar domain_name[256];\n\tchar ip_addr[IP_ADDRESS_SIZE];\n\tchar out_buff[4096];\n\tint domain_len;\n\tint out_len;\n\tint alloc_size;\n\tint recv_bytes;\n\tint result;\n\tint sock;\n\tint port;\n    bool bNeedAlloc;\n\tconst char *pDomain;\n\tconst char *pContent;\n\tconst char *pURI;\n\tchar *pPort;\n\tchar *pSpace;\n\n\t*http_status = 0;\n\t\n    if (*content == NULL)\n    {\n        bNeedAlloc = true;\n        alloc_size = 64 * 1024;\n    }\n    else\n    {\n        bNeedAlloc = false;\n        alloc_size = *content_len - 1;\n    }\n\t\n\t*content_len = 0;\n\t\n    if (url_len > sizeof(out_buff) - 128)\n    {\n\t\tsprintf(error_info, \"file: \"__FILE__\", line: %d, \"\n                \"url too long, url length: %d > %d\", __LINE__,\n                url_len, (int)(sizeof(out_buff) - 128));\n\n\t\treturn ENAMETOOLONG;\n    }\n\n\tif (url_len <= 7 || strncasecmp(url, \"http://\", 7) != 0)\n\t{\n\t\tsprintf(error_info, \"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"invalid url.\", __LINE__);\n\t\treturn EINVAL;\n\t}\n\n\tpDomain = url + 7;\n\tpURI = strchr(pDomain, '/');\n\t\n\tif (pURI == NULL)\n\t{\n\t\tdomain_len = url_len - 7;\n\t\tpURI = \"/\";\n\t}\n\telse\n\t{\n\t\tdomain_len = pURI - pDomain;\n\t}\n\n\tif (domain_len >= sizeof(domain_name))\n\t{\n\t\tsprintf(error_info, \"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"domain is too large, exceed %d.\", \\\n\t\t\t__LINE__, (int)sizeof(domain_name));\n\t\treturn EINVAL;\n\t}\n\n\tmemcpy(domain_name, pDomain, domain_len);\n\t*(domain_name + domain_len) = '\\0';\n\tpPort = strchr(domain_name, ':');\n\t\n\tif (pPort == NULL)\n\t{\n\t\tport = 80;\n\t}\n\telse\n\t{\n\t\t*pPort = '\\0';\n\t\tport = atoi(pPort + 1);\n\t}\n\n\tif (getIpaddrByName(domain_name, ip_addr, \\\n\t\tsizeof(ip_addr)) == INADDR_NONE)\n\t{\n\t\tsprintf(error_info, \"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"resolve domain \\\"%s\\\" fail.\", \\\n\t\t\t__LINE__, domain_name);\n\t\treturn EINVAL;\n\t}\n\n\tsock = socket(AF_INET, SOCK_STREAM, 0);\n\t\n\tif(sock < 0)\n\t{\n\t\tsprintf(error_info, \"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"socket create failed, errno: %d, \" \\\n\t\t\t\"error info: %s\", __LINE__, \\\n\t\t\terrno, STRERROR(errno));\n\t\treturn errno != 0 ? errno : EPERM;\n\t}\n\n\tif ((result=connectserverbyip_nb_auto(sock, ip_addr, port, \\\n\t\t\tconnect_timeout)) != 0)\n\t{\n\t\tclose(sock);\n\n\t\tsprintf(error_info, \"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"connect to %s:%d fail, errno: %d, \" \\\n\t\t\t\"error info: %s\", __LINE__, domain_name, \\\n\t\t\tport, result, STRERROR(result));\n\n\t\treturn result;\n\t}\n\n\tout_len = snprintf(out_buff, sizeof(out_buff), \\\n\t\t\"GET %s HTTP/1.0\\r\\n\" \\\n\t\t\"Host: %s:%d\\r\\n\" \\\n\t\t\"Connection: close\\r\\n\" \\\n\t\t\"\\r\\n\", pURI, domain_name, port);\n\t// we have Connection: close means: the peer will shutdown the socket when it has finished sending data\n\t// send http request \n\tif ((result=tcpsenddata(sock, out_buff, out_len, network_timeout)) != 0)\n\t{\n\t\tclose(sock);\n\n\t\tsprintf(error_info, \"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"send data to %s:%d fail, errno: %d, \" \\\n\t\t\t\"error info: %s\", __LINE__, domain_name, \\\n\t\t\tport, result, STRERROR(result));\n\n\t\treturn result;\n\t}\n\n    if (bNeedAlloc)\n    {\n        *content = (char *)malloc(alloc_size + 1);\n\t\t\n        if (*content == NULL)\n        {\n            close(sock);\n            result = errno != 0 ? errno : ENOMEM;\n\n            sprintf(error_info, \"file: \"__FILE__\", line: %d, \" \\\n                    \"malloc %d bytes fail, errno: %d, \" \\\n                    \"error info: %s\", __LINE__, alloc_size + 1, \\\n                    result, STRERROR(result));\n\n            return result;\n        }\n    }\n\n\tdo\n\t{\n\t\trecv_bytes = alloc_size - *content_len; // recv_bytes: left space to recv data\n\t\t\n\t\tif (recv_bytes <= 0)\n\t\t{\n            if (bNeedAlloc)\n            {\n                alloc_size *= 2;\n                *content = (char *)realloc(*content, alloc_size + 1);\n\t\t\t\t\n                if (*content == NULL)\n                {\n                    *content_len = 0;\n                    close(sock);\n                    result = errno != 0 ? errno : ENOMEM;\n\n                    sprintf(error_info, \"file: \"__FILE__\", line: %d, \" \\\n                            \"realloc %d bytes fail, errno: %d, \" \\\n                            \"error info: %s\", __LINE__, \\\n                            alloc_size + 1, \\\n                            result, STRERROR(result));\n\n                    return result;\n                }\n\n                recv_bytes = alloc_size - *content_len;\n            }\n            else\n            {\n                    sprintf(error_info, \"file: \"__FILE__\", line: %d, \" \\\n                            \"buffer size: %d is too small\", \\\n                            __LINE__, alloc_size);\n                    return ENOSPC;\n            }\n\t\t\t\n\t\t}\n\n\t\tresult = tcprecvdata_ex(sock, *content + *content_len, \\\n\t\t\t\trecv_bytes, network_timeout, &recv_bytes);\n\n\t\t*content_len += recv_bytes;\n\t} while (result == 0);\n\n    do\n    {\n        if (result == ENOTCONN) // means the peer has shutdowned the socket\n        {\n            result = 0;   // success value\n        }\n        else \n\t{\n            sprintf(error_info, \"file: \"__FILE__\", line: %d, \" \\\n                    \"recv data from %s:%d fail, errno: %d, \" \\\n                    \"error info: %s\", __LINE__, domain_name, \\\n                    port, result, STRERROR(result));\n\n            break;\n        }\n\n        *(*content + *content_len) = '\\0';\n        pContent = strstr(*content, \"\\r\\n\\r\\n\");\n\t\t\n        if (pContent == NULL)\n        {\n            sprintf(error_info, \"file: \"__FILE__\", line: %d, \" \\\n                    \"response data from %s:%d is invalid\", \\\n                    __LINE__, domain_name, port);\n\n            result = EINVAL;\n            break;\n        }\n\n        pContent += 4;   // pointer to the next line\n        pSpace = strchr(*content, ' ');\n\t\t\n        if (pSpace == NULL || pSpace >= pContent)\n        {\n            sprintf(error_info, \"file: \"__FILE__\", line: %d, \" \\\n                    \"response data from %s:%d is invalid\", \\\n                    __LINE__, domain_name, port);\n\n            result = EINVAL;\n            break;\n        }\n\n        *http_status = atoi(pSpace + 1);  // http response status: such as http/1.1 200 ok\n        *content_len -= pContent - *content;  // minus the length of status line: http/1.1 200 ok\n        memcpy(*content, pContent, *content_len);  // remove the status line\n        *(*content + *content_len) = '\\0';\n        *error_info = '\\0';\n    } while (0);\n\n\tclose(sock);\n\t\n    if (result != 0 && bNeedAlloc)  // result !=0: means error occured\n    {\n        free(*content);\n        *content = NULL;\n        *content_len = 0;\n    }\n\n\treturn result;\n}\n\n// return the string ip addr by ip name(maybe is digital ip addr or domain addr)\nin_addr_t getIpaddrByName(const char *name, char *buff, const int bufferSize)\n{\n\tstruct in_addr ip_addr;\n\tstruct hostent *ent;\n\tin_addr_t **addr_list;\n\n\tif ((*name >= '0' && *name <= '9') &&   // name is the digital ip address \n\t\tinet_pton(AF_INET, name, &ip_addr) == 1)  // success\n\t{\n\t\tif (buff != NULL)\n\t\t{\n\t\t\tsnprintf(buff, bufferSize, \"%s\", name);\n\t\t}\n\t\t\n\t\treturn ip_addr.s_addr;\n\t}\n\n\tent = gethostbyname(name);\n\t\n\tif (ent == NULL)\n\t{\n\t\treturn INADDR_NONE;\n\t}\n\n    addr_list = (in_addr_t **)ent->h_addr_list;\n\t\n\tif (addr_list[0] == NULL)\n\t{\n\t\treturn INADDR_NONE;\n\t}\n\n\tmemset(&ip_addr, 0, sizeof(ip_addr));\n\tip_addr.s_addr = *(addr_list[0]);\n\t\n\tif (buff != NULL)\n\t{\n\t\tif (inet_ntop(AF_INET, &ip_addr, buff, bufferSize) == NULL)\n\t\t{\n\t\t\t*buff = '\\0';\n\t\t}\n\t}\n\n\treturn ip_addr.s_addr;\n}\n\n\n/** connect to server by non-block mode, auto detect socket block mode\n *  parameters:\n *          sock: the socket, can be block mode\n *          server_ip: ip address of the server\n *          server_port: port of the server\n *          timeout: connect timeout in seconds\n *  return: error no, 0 success, != 0 fail\n*/\n#define connectserverbyip_nb_auto(sock, server_ip, server_port, timeout) \\\n\tconnectserverbyip_nb_ex(sock, server_ip, server_port, timeout, true)\n\n// connect the server by ip , return 0 stands for connect succeed\nint connectserverbyip_nb_ex(int sock, const char *server_ip, \\\n\t\tconst short server_port, const int timeout, \\\n\t\tconst bool auto_detect)\n{\n\tint result;\n\tint flags;\n\tbool needRestore;\n\tsocklen_t len;\n\n#ifdef USE_SELECT\n\tfd_set rset;\n\tfd_set wset;\n\tstruct timeval tval;\n#else\n\tstruct pollfd pollfds;\n#endif\n\n\tstruct sockaddr_in addr;\n\tstruct sockaddr_in6 addr6;\n    void *dest;\n    int size;\n\n    memset(&addr, 0, sizeof(struct sockaddr_in));\n    memset(&addr6, 0, sizeof(struct sockaddr_in6));\n\n    if ((result=setsockaddrbyip(server_ip, server_port, &addr, &addr6,\n                    &dest, &size)) != 0)\n    {\n        return result;\n    }\n\n\tif (auto_detect)\n\t{\n\t\tflags = fcntl(sock, F_GETFL, 0);\n\t\t\n\t\tif (flags < 0)\n\t\t{\n\t\t\treturn errno != 0 ? errno : EACCES;\n\t\t}\n\n\t\tif ((flags & O_NONBLOCK) == 0)\n\t\t{\n\t\t\tif (fcntl(sock, F_SETFL, flags | O_NONBLOCK) < 0)\n\t\t\t{\n\t\t\t\treturn errno != 0 ? errno : EACCES;\n\t\t\t}\n\n\t\t\tneedRestore = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tneedRestore = false;\n\t\t}\n\t}\n\telse\n\t{\n\t\tneedRestore = false;\n\t\tflags = 0;\n\t}\n\n\tdo\n\t{\n\t\tif (connect(sock, (const struct sockaddr*)dest, size) < 0)\n\t\t{\n\t\t\tresult = errno != 0 ? errno : EINPROGRESS;\n\t\t\t\n\t\t\tif (result != EINPROGRESS)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse  // connect return 0: success, -1: failure\n\t\t{\n\t\t\tresult = 0;\n\t\t\tbreak;\n\t\t}\n\n        // after call connect, we call select or poll to get error if error occurs\n\n#ifdef USE_SELECT\n\t\tFD_ZERO(&rset);\n\t\tFD_ZERO(&wset);\n\t\tFD_SET(sock, &rset);\n\t\tFD_SET(sock, &wset);\n\t\ttval.tv_sec = timeout;\n\t\ttval.tv_usec = 0;\n\t\t\n\t\tresult = select(sock+1, &rset, &wset, NULL, \\\n\t\t\t\ttimeout > 0 ? &tval : NULL);\n#else\n\t\tpollfds.fd = sock;\n\t\tpollfds.events = POLLIN | POLLOUT;\n\t\tresult = poll(&pollfds, 1, 1000 * timeout);\n#endif\n\n\t\tif (result == 0)\n\t\t{\n\t\t\tresult = ETIMEDOUT;\n\t\t\tbreak;\n\t\t}\n\t\telse if (result < 0)\n\t\t{\n\t\t\tresult = errno != 0 ? errno : EINTR;\n\t\t\tbreak;\n\t\t}\n\n\t\t// means return value > 0\n\t\tlen = sizeof(result);\n\n\t\t// getsockopt: 0: success, -1:failure\n\t\tif (getsockopt(sock, SOL_SOCKET, SO_ERROR, &result, &len) < 0)\n\t\t{\n\t\t\tresult = errno != 0 ? errno : EACCES; // means failure\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\t\n\t} while (0);\n\n\tif (needRestore)\n\t{\n\t\tfcntl(sock, F_SETFL, flags);\n\t}\n  \n\treturn result;\n}\n\n\n\n/*\nget the content of filename, which is saved to *buff, the size of filename is saved to file_size\n*/\nint getFileContent(const char *filename, char **buff, int64_t *file_size)\n{\n\tint fd;\n\n    if (!isFile(filename))\n    {\n\t\t*buff = NULL;\n\t\t*file_size = 0;\n\t\tlogError(\"file: \"__FILE__\", line: %d, \"\n                \"%s is not a regular file\", __LINE__, filename);\n        return EINVAL;\n    }\n\n\tfd = open(filename, O_RDONLY);\n\t\n\tif (fd < 0)\n\t{\n\t\t*buff = NULL;\n\t\t*file_size = 0;\n\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"open file %s fail, \" \\\n\t\t\t\"errno: %d, error info: %s\", __LINE__, \\\n\t\t\tfilename, errno, STRERROR(errno));\n\t\treturn errno != 0 ? errno : ENOENT;\n\t}\n\n\tif ((*file_size=lseek(fd, 0, SEEK_END)) < 0)\n\t{\n\t\t*buff = NULL;\n\t\t*file_size = 0;\n\t\tclose(fd);\n\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"lseek file %s fail, \" \\\n\t\t\t\"errno: %d, error info: %s\", __LINE__, \\\n\t\t\tfilename, errno, STRERROR(errno));\n\t\treturn errno != 0 ? errno : EIO;\n\t}\n\n\t*buff = (char *)malloc(*file_size + 1);\n\t\n\tif (*buff == NULL)\n\t{\n\t\t*file_size = 0;\n\t\tclose(fd);\n\n\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"malloc %d bytes fail\", __LINE__, \\\n\t\t\t(int)(*file_size + 1));\n\t\treturn errno != 0 ? errno : ENOMEM;\n\t}\n\n\tif (lseek(fd, 0, SEEK_SET) < 0)\n\t{\n\t\t*buff = NULL;\n\t\t*file_size = 0;\n\t\tclose(fd);\n\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"lseek file %s fail, \" \\\n\t\t\t\"errno: %d, error info: %s\", __LINE__, \\\n\t\t\tfilename, errno, STRERROR(errno));\n\t\treturn errno != 0 ? errno : EIO;\n\t}\n\t\n\tif (read(fd, *buff, *file_size) != *file_size)\n\t{\n\t\tfree(*buff);\n\t\t*buff = NULL;\n\t\t*file_size = 0;\n\t\tclose(fd);\n\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"read from file %s fail, \" \\\n\t\t\t\"errno: %d, error info: %s\", __LINE__, \\\n\t\t\tfilename, errno, STRERROR(errno));\n\t\treturn errno != 0 ? errno : EIO;\n\t}\n\n\t(*buff)[*file_size] = '\\0';\n\tclose(fd);\n\n\treturn 0;\n}\n\nstatic int iniLoadItemsFromBuffer(char *content, IniContext *pContext)\n{\n    char *pContent;\n    char *new_content;\n    int content_len;\n    int new_content_len;\n\n    new_content = content;\n    new_content_len = strlen(content);\n\n    do\n    {\n        pContent = new_content; // after get rid of first #@if, process left #@if\n        content_len = new_content_len;\n\t\t\n        if ((new_content=iniProccessIf(pContent, content_len,\n                        pContext, &new_content_len)) == NULL)\n        {\n            return ENOMEM;\n        }\n\n\t\t\n    } while (new_content != pContent);\n\n    do\n    {\n        pContent = new_content;\n        content_len = new_content_len;\n\t\t\n        if ((new_content=iniProccessFor(pContent, content_len,\n                        pContext, &new_content_len)) == NULL)\n        {\n            return ENOMEM;\n\t\t\n        }\n    } while (new_content != pContent);  // loop processing\n\n    return iniDoLoadItemsFromBuffer(new_content, pContext);\n\t\n}\n\n/*\nfunction: reslove the content, and get rid of #@if and #@endif, save to new buffer\nreturnd by iniProcessIf, such as:\ncontent is:\n#@if xxx\n...abc\n#@endif\n...def\n\nnew buffer is: \n...abc\n...def\nreturned by iniProcessIf\n\n该函数看不懂感觉可以略过不看\n*/\nstatic char *iniProccessIf(char *content, const int content_len,\n        IniContext *pContext, int *new_content_len)\n{\n    char *pStart;\n    char *pEnd;\n    char *pCondition;\n    char *pElse;\n    char *pIfPart;\n    char *pElsePart;\n    int conditionLen;\n    int ifPartLen;\n    int elsePartLen;\n    int copyLen;\n    char *newContent;\n    char *pDest;\n\n    *new_content_len = content_len;\n\t\n    pStart = strstr(content, _PREPROCESS_TAG_STR_IF);\n\t\n    if (pStart == NULL)\n    {\n        return content;\n    }\n\t\n    pCondition = pStart + _PREPROCESS_TAG_LEN_IF;\n    pIfPart = strchr(pCondition, '\\n');\n\t\n    if (pIfPart == NULL)\n    {\n        return content;\n    }\n\t\n    conditionLen = pIfPart - pCondition;\n\n    pEnd = strstr(pIfPart, _PREPROCESS_TAG_STR_ENDIF);\n\t\n    if (pEnd == NULL)\n    {\n        return content;\n    }\n\n    pElse = strstr(pIfPart, _PREPROCESS_TAG_STR_ELSE);\n\t\n    if (pElse == NULL || pElse > pEnd)\n    {\n        ifPartLen = pEnd - pIfPart;\n        pElsePart = NULL;\n        elsePartLen = 0;\n    }\n    else\n    {\n        ifPartLen = pElse - pIfPart;\n        pElsePart = strchr(pElse + _PREPROCESS_TAG_LEN_ELSE, '\\n');\n\t\t\n        if (pElsePart == NULL)\n        {\n            return content;\n        }\n\n        elsePartLen = pEnd - pElsePart;\n    }\n\n    newContent = iniAllocContent(pContext, content_len); // newContent is the buffer address\n\t\n    if (newContent == NULL)\n    {\n        return NULL;\n    }\n\n    pDest = newContent;\n    copyLen = pStart - content;\n\t\n    if (copyLen > 0)\n    {\n        memcpy(pDest, content, copyLen);\n        pDest += copyLen;\n    }\n\n    if (iniCalcCondition(pCondition, conditionLen))\n    {\n        if (ifPartLen > 0)\n        {\n            memcpy(pDest, pIfPart, ifPartLen);\n            pDest += ifPartLen;\n        }\n    }\n    else\n    {\n        if (elsePartLen > 0)\n        {\n            memcpy(pDest, pElsePart, elsePartLen);\n            pDest += elsePartLen;\n        }\n    }\n\n    copyLen = (content + content_len) - (pEnd + _PREPROCESS_TAG_LEN_ENDIF);\n\t\n    if (copyLen > 0)\n    {\n        memcpy(pDest, pEnd + _PREPROCESS_TAG_LEN_ENDIF, copyLen);\n        pDest += copyLen;\n    }\n\n    *pDest = '\\0';   \n    *new_content_len = pDest - newContent;\n    return newContent;\n}\n\n/* process the for block: #@for  ... #@endfor\nget rid of the #@endfor, #@for, and expand the for loop which replace {$i} with the real value\nand saved to new buffer returned by iniProcessFor\n该函数与上一个函数类似\n\n*/\nstatic char *iniProccessFor(char *content, const int content_len,\n        IniContext *pContext, int *new_content_len)\n{\n    char *pStart;\n    char *pEnd;\n    char *pForRange;\n    char *pForBlock;\n    char *id;\n    char tag[80];\n    char value[16];\n    int idLen;\n    int rangeLen;\n    int forBlockLen;\n    int start;\n    int end;\n    int step;\n    int count;\n    int i;\n    int copyLen;\n    int tagLen;\n    int valueLen;\n    char *newContent;\n    char *pDest;\n\n    *new_content_len = content_len;\n    pStart = strstr(content, _PREPROCESS_TAG_STR_FOR);\n\t\n    if (pStart == NULL)\n    {\n        return content;\n    }\n\t\n    pForRange = pStart + _PREPROCESS_TAG_LEN_FOR; // for condition begin\n    pForBlock = strchr(pForRange, '\\n');  // for block begin\n\t\n    if (pForBlock == NULL)\n    {\n        return content;\n    }\n\t\n    rangeLen = pForBlock - pForRange;\n\n    pEnd = strstr(pForBlock, _PREPROCESS_TAG_STR_ENDFOR);\n\t\n    if (pEnd == NULL)\n    {\n        return content;\n    }\n\t\n    forBlockLen = pEnd - pForBlock;  // for block len\n\n    if (iniParseForRange(pForRange, rangeLen, &id, &idLen,\n                &start, &end, &step) != 0)\n    {\n        return NULL;\n    }\n\t\n    if (step == 0)\n    {\n\t\tlogWarning(\"file: \"__FILE__\", line: %d, \"\n                \"invalid step: %d for range: %.*s\", __LINE__,\n                step, rangeLen, pForRange);\n        return NULL;\n    }\n\t\n    count = (end - start) / step;  // how many steps\n\t\n    if (count < 0)\n    {\n\t\tlogWarning(\"file: \"__FILE__\", line: %d, \"\n                \"invalid step: %d for range: %.*s\", __LINE__,\n                step, rangeLen, pForRange);\n        return NULL;\n    }\n\n    newContent = iniAllocContent(pContext, content_len + (forBlockLen + 16) * count);\n\t\n    if (newContent == NULL)\n    {\n        return NULL;\n    }\n\n    pDest = newContent;  // newContent is the buffer addr to stored for block content\n    copyLen = pStart - content;\n\t\n    if (copyLen > 0)\n    {\n        memcpy(pDest, content, copyLen);\n        pDest += copyLen;\n    }\n\n\t// id=\"i\", idLen=1, tag will be \"{$i}\", tagLen will be 4 = strlen(\"{$i}\")\n    tagLen = sprintf(tag, \"{$%.*s}\", idLen, id);\n\t// tagLen is the variable length\n\t\n    for (i=start; i<=end; i+=step)\n    {\n        char *p;\n        char *pRemain;\n        int remainLen;\n\n        valueLen = sprintf(value, \"%d\", i);\n\n        pRemain = pForBlock;\n        remainLen = forBlockLen;\n\t\t\n        while (remainLen >= tagLen)\n        {\n            p = (char *)memmem(pRemain, remainLen, tag, tagLen);\n\t\t\t\n            if (p == NULL)\n            {\n                memcpy(pDest, pRemain, remainLen);\n                pDest += remainLen;\n                break;\n            }\n\n            copyLen = p - pRemain;\n\t\t\t\n            if (copyLen > 0)\n            {\n                memcpy(pDest, pRemain, copyLen);\n                pDest += copyLen;\n            }\n\t\t\t\n            memcpy(pDest, value, valueLen);\n            pDest += valueLen;\n\n            pRemain = p + tagLen;\n            remainLen -= copyLen + tagLen;\n        }\n    }\n\n    copyLen = (content + content_len) - (pEnd + _PREPROCESS_TAG_LEN_ENDFOR);\n\t\n    if (copyLen > 0)\n    {\n        memcpy(pDest, pEnd + _PREPROCESS_TAG_LEN_ENDFOR, copyLen);\n        pDest += copyLen;\n    }\n\n    *pDest = '\\0';\n    *new_content_len = pDest - newContent;\n    return newContent;\n}\n\n//alloc space for the length of content_len, return the buffer addr\nstatic char *iniAllocContent(IniContext *pContext, const int content_len)\n{\n    char *buff;\n    DynamicContents *pDynamicContents;\n    pDynamicContents = iniAllocDynamicContent(pContext);\n\t\n    if (pDynamicContents == NULL)\n    {\n        logError(\"file: \"__FILE__\", line: %d, \"\n                \"malloc dynamic contents fail\", __LINE__);\n        return NULL;\n    }\n\n\t// default: pDynamicContents->count = 0, pDynamicContents->alloc_count=0\n    if (pDynamicContents->count >= pDynamicContents->alloc_count)\n    {\n        int alloc_count;\n        int bytes;\n        char **contents;\n\t\t\n        if (pDynamicContents->alloc_count == 0)\n        {\n            alloc_count = 8;\n        }\n        else\n        {\n            alloc_count = pDynamicContents->alloc_count * 2;\n        }\n\t\t\n        bytes = sizeof(char *) * alloc_count;\n        contents = (char **)malloc(bytes);\n\t\t\n        if (contents == NULL)\n        {\n            logError(\"file: \"__FILE__\", line: %d, \"\n                    \"malloc %d bytes fail\", __LINE__, bytes);\n            return NULL;\n        }\n\t\t\n        memset(contents, 0, bytes);\n\t\t\n        if (pDynamicContents->count > 0)\n        {\n            memcpy(contents, pDynamicContents->contents,\n                    sizeof(char *) * pDynamicContents->count);\n            free(pDynamicContents->contents);\n        }\n\t\t\n        pDynamicContents->contents = contents;\n        pDynamicContents->alloc_count = alloc_count;\n    }\n\n    buff = malloc(content_len);\n\t\n    if (buff == NULL)\n    {\n        logError(\"file: \"__FILE__\", line: %d, \"\n                \"malloc %d bytes fail\", __LINE__, content_len);\n        return NULL;\n    }\n\t\n    pDynamicContents->contents[pDynamicContents->count++] = buff;\n    return buff;\n}\n\n// find pContext in g_dynamic_contents, if find: return, or add pContext to g_dynamic_contents\nstatic DynamicContents *iniAllocDynamicContent(IniContext *pContext)\n{\n    int i;\n\t\n    if (g_dynamic_contents[g_dynamic_content_index].context == pContext)\n    {\n        return &g_dynamic_contents[g_dynamic_content_index].dynamicContents;\n    }\n\n    if (g_dynamic_content_count > 0)\n    {\n        for (i=0; i<_MAX_DYNAMIC_CONTENTS; i++)\n        {\n            if (g_dynamic_contents[i].context == pContext)\n            {\n                g_dynamic_content_index = i;\n                return &g_dynamic_contents[g_dynamic_content_index].dynamicContents;\n            }\n        }\n    }\n\n    if (g_dynamic_content_count == _MAX_DYNAMIC_CONTENTS)\n    {\n        return NULL;\n    }\n\n    for (i=0; i<_MAX_DYNAMIC_CONTENTS; i++)\n    {\n        if (!g_dynamic_contents[i].used)\n        {\n            g_dynamic_contents[i].used = true;\n            g_dynamic_contents[i].context = pContext;\n            g_dynamic_content_index = i;\n            g_dynamic_content_count++;\n            return &g_dynamic_contents[g_dynamic_content_index].dynamicContents;\n        }\n    }\n\n    return NULL;\n}\n\n\n\n/*\nfunction: resolve the format:\n%{LOCAL_IP} in [10.0.11.89,10.0.11.99]\n%{LOCAL_HOST} in [10.0.11.89,10.0.11.99]\nand compare g_local_host_ip_addrs array, check every elem in g_local_host_ip_addrs is\nwhether exists in [10.0.11.89,10.0.11.99] or not, exists return true or return false\n*/\nstatic bool iniCalcCondition(char *condition, const int condition_len)\n{\n    /*\n     * current only support %{VARIABLE} in [x,y,..]\n     * support variables are: LOCAL_IP and LOCAL_HOST\n     * such as: %{LOCAL_IP} in [10.0.11.89,10.0.11.99]\n     **/\n#define _PREPROCESS_VARIABLE_TYPE_LOCAL_IP   1\n#define _PREPROCESS_VARIABLE_TYPE_LOCAL_HOST 2\n#define _PREPROCESS_MAX_LIST_VALUE_COUNT    32\n    char *p;\n    char *pEnd;\n    char *pSquareEnd;\n    char *values[_PREPROCESS_MAX_LIST_VALUE_COUNT];\n    int varType;\n    int count;\n    int i;\n\n    pEnd = condition + condition_len;\n    p = pEnd - 1;\n\t\n    while (p > condition && (*p == ' ' || *p == '\\t'))\n    {\n        p--;\n    }\n\t\n    if (*p != ']')\n    {\n\t\tlogWarning(\"file: \"__FILE__\", line: %d, \"\n                \"expect \\\"]\\\", condition: %.*s\", __LINE__,\n                condition_len, condition);\n        return false;\n    }\n\t\n    pSquareEnd = p;\n\n    p = condition;\n\t\n    while (p < pEnd && (*p == ' ' || *p == '\\t'))\n    {\n        p++;\n    }\n\n    if (pEnd - p < 12)\n    {\n\t\tlogWarning(\"file: \"__FILE__\", line: %d, \"\n                \"unkown condition: %.*s\", __LINE__,\n                condition_len, condition);\n        return false;\n    }\n\n    if (memcmp(p, _PREPROCESS_VARIABLE_STR_LOCAL_IP,\n                _PREPROCESS_VARIABLE_LEN_LOCAL_IP) == 0)\n    {\n        varType = _PREPROCESS_VARIABLE_TYPE_LOCAL_IP;\n        p += _PREPROCESS_VARIABLE_LEN_LOCAL_IP;\n    }\n    else if (memcmp(p, _PREPROCESS_VARIABLE_STR_LOCAL_HOST,\n                _PREPROCESS_VARIABLE_LEN_LOCAL_HOST) == 0)\n    {\n        varType = _PREPROCESS_VARIABLE_TYPE_LOCAL_HOST;\n        p += _PREPROCESS_VARIABLE_LEN_LOCAL_HOST;\n    }\n    else\n    {\n\t\tlogWarning(\"file: \"__FILE__\", line: %d, \"\n                \"unkown condition: %.*s\", __LINE__,\n                condition_len, condition);\n        return false;\n    }\n\n    while (p < pEnd && (*p == ' ' || *p == '\\t'))\n    {\n        p++;\n    }\n\t\n    if (pEnd - p < 4 || memcmp(p, \"in\", 2) != 0)\n    {\n\t\tlogWarning(\"file: \"__FILE__\", line: %d, \"\n                \"expect \\\"in\\\", condition: %.*s\", __LINE__,\n                condition_len, condition);\n        return false;\n    }\n\t\n    p += 2;  //skip in\n\n    while (p < pEnd && (*p == ' ' || *p == '\\t'))\n    {\n        p++;\n    }\n\t\n    if (*p != '[')\n    {\n\t\tlogWarning(\"file: \"__FILE__\", line: %d, \"\n                \"expect \\\"[\\\", condition: %.*s\", __LINE__,\n                condition_len, condition);\n        return false;\n    }\n\n    *pSquareEnd = '\\0';\n    count = splitEx(p + 1, ',', values, _PREPROCESS_MAX_LIST_VALUE_COUNT);\n\t\n    for (i=0; i<count; i++)\n    {\n        values[i] = trim(values[i]);\n    }\n\t\n    if (varType == _PREPROCESS_VARIABLE_TYPE_LOCAL_HOST)\n    {\n        char host[128];\n\t\t\n        if (gethostname(host, sizeof(host)) != 0)\n        {\n            logWarning(\"file: \"__FILE__\", line: %d, \"\n                    \"call gethostname fail, \"\n                    \"errno: %d, error info: %s\", __LINE__,\n                    errno, STRERROR(errno));\n            return false;\n        }\n\t\t\n        return iniMatchValue(host, values, count);\n    }\n    else\n    {\n        const char *local_ip;\n        local_ip = get_first_local_ip();\n\t\t\n        while (local_ip != NULL)\n        {\n            if (iniMatchValue(local_ip, values, count))\n            {\n                return true;\n            }\n\t\t\t\n            local_ip = get_next_local_ip(local_ip);\n        }\n    }\n\n    return false;\n}\n\n\n// find target in array: values, if find return true, else return false\nstatic bool iniMatchValue(const char *target, char **values, const int count)\n{\n    int i;\n    for (i=0; i<count; i++)\n    {\n        if (strcmp(target, values[i]) == 0)\n        {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n// get a integer from str ended by pEnd, nlen is the length of integer\nstatic char *iniGetInteger(char *str, char *pEnd, int *nlen)\n{\n    char *p;\n    char *pNumber;\n\n    p = str;\n\t\n    while (p < pEnd && (*p == ' ' || *p == '\\t'))\n    {\n        p++;\n    }\n\n    pNumber = p;\n\t\n    while (p < pEnd && (*p >= '0' && *p <= '9'))\n    {\n        p++;\n    }\n\n    *nlen = p - pNumber;\n    return pNumber;\n}\n\n// parse the format: #@for i from 0 to 15 step 1\n// *id pointer to i, idLen=1, start=0, end=15, step=1\nstatic int iniParseForRange(char *range, const int range_len,\n        char **id, int *idLen, int *start, int *end, int *step)\n{\n    /**\n     *\n     * #@for i from 0 to 15 step 1\n     */\n\n\n    char *p;\n    char *pEnd;\n    char *pNumber;\n    int nlen;\n\n    pEnd = range + range_len;\n    p = range;\n\t\n    while (p < pEnd && (*p == ' ' || *p == '\\t'))\n    {\n        p++;\n    }\n\n    if (pEnd - p < 10)\n    {\n\t\tlogWarning(\"file: \"__FILE__\", line: %d, \"\n                \"unkown for range: %.*s\", __LINE__,\n                range_len, range);\n        return EINVAL;\n    }\n\n    *id = p;\n\t\n    while (p < pEnd && !(*p == ' ' || *p == '\\t'))\n    {\n        p++;\n    }\n\t\n    *idLen = p - *id;\n\t\n    if (*idLen == 0 || *idLen > 64)\n    {\n\t\tlogWarning(\"file: \"__FILE__\", line: %d, \"\n                \"invalid for range: %.*s\", __LINE__,\n                range_len, range);\n        return EINVAL;\n    }\n\n    if (pEnd - p < 8)\n    {\n\t\tlogWarning(\"file: \"__FILE__\", line: %d, \"\n                \"invalid for range: %.*s\", __LINE__,\n                range_len, range);\n        return EINVAL;\n    }\n\n    p++;\n\t\n    while (p < pEnd && (*p == ' ' || *p == '\\t'))\n    {\n        p++;\n    }\n\t\n    if (!(memcmp(p, _PREPROCESS_TAG_STR_FOR_FROM,\n                    _PREPROCESS_TAG_LEN_FOR_FROM) == 0 &&\n                (*(p+_PREPROCESS_TAG_LEN_FOR_FROM) == ' ' ||\n                 *(p+_PREPROCESS_TAG_LEN_FOR_FROM) == '\\t')))\n    {\n\t\tlogWarning(\"file: \"__FILE__\", line: %d, \"\n                \"invalid for range: %.*s\", __LINE__,\n                range_len, range);\n        return EINVAL;\n    }\n\t\n    p += _PREPROCESS_TAG_LEN_FOR_FROM + 1;\n    pNumber = iniGetInteger(p, pEnd, &nlen);\n\t\n    if (nlen == 0)\n    {\n\t\tlogWarning(\"file: \"__FILE__\", line: %d, \"\n                \"invalid for range: %.*s\", __LINE__,\n                range_len, range);\n        return EINVAL;\n    }\n\t\n    *start = atoi(pNumber);  //atoi meets non-numbers will stop transfer\n    p = pNumber + nlen;\n\n    if (pEnd - p < 4 || !(*p == ' ' || *p == '\\t'))\n    {\n\t\tlogWarning(\"file: \"__FILE__\", line: %d, \"\n                \"invalid for range: %.*s\", __LINE__,\n                range_len, range);\n        return EINVAL;\n    }\n\t\n    p++;\n\t\n    while (p < pEnd && (*p == ' ' || *p == '\\t'))\n    {\n        p++;\n    }\n\t\n    if (!(memcmp(p, _PREPROCESS_TAG_STR_FOR_TO,\n                    _PREPROCESS_TAG_LEN_FOR_TO) == 0 &&\n                (*(p+_PREPROCESS_TAG_LEN_FOR_TO) == ' ' ||\n                 *(p+_PREPROCESS_TAG_LEN_FOR_TO) == '\\t')))\n    {\n\t\tlogWarning(\"file: \"__FILE__\", line: %d, \"\n                \"unkown for range: %.*s\", __LINE__,\n                range_len, range);\n        return EINVAL;\n    }\n\t\n    p += _PREPROCESS_TAG_LEN_FOR_TO + 1;\n    pNumber = iniGetInteger(p, pEnd, &nlen);\n\t\n    if (nlen == 0)\n    {\n\t\tlogWarning(\"file: \"__FILE__\", line: %d, \"\n                \"invalid for range: %.*s\", __LINE__,\n                range_len, range);\n        return EINVAL;\n    }\n\t\n    *end = atoi(pNumber);\n    p = pNumber + nlen;\n\n    if (p == pEnd) // default step is set to 1\n    {\n        *step = 1;\n        return 0;\n    }\n\n    if (!(*p == ' ' || *p == '\\t'))\n    {\n\t\tlogWarning(\"file: \"__FILE__\", line: %d, \"\n                \"invalid for range: %.*s\", __LINE__,\n                range_len, range);\n        return EINVAL;\n    }\n\t\n    while (p < pEnd && (*p == ' ' || *p == '\\t'))\n    {\n        p++;\n    }\n\t\n    if (!(memcmp(p, _PREPROCESS_TAG_STR_FOR_STEP,\n                    _PREPROCESS_TAG_LEN_FOR_STEP) == 0 &&\n                (*(p+_PREPROCESS_TAG_LEN_FOR_STEP) == ' ' ||\n                 *(p+_PREPROCESS_TAG_LEN_FOR_STEP) == '\\t')))\n    {\n\t\tlogWarning(\"file: \"__FILE__\", line: %d, \"\n                \"unkown for range: %.*s\", __LINE__,\n                range_len, range);\n        return EINVAL;\n    }\n\t\n    p += _PREPROCESS_TAG_LEN_FOR_STEP + 1;\n    pNumber = iniGetInteger(p, pEnd, &nlen);\n\t\n    if (nlen == 0)\n    {\n\t\tlogWarning(\"file: \"__FILE__\", line: %d, \"\n                \"invalid for range: %.*s\", __LINE__,\n                range_len, range);\n        return EINVAL;\n    }\n\t\n    *step = atoi(pNumber);\n    p = pNumber + nlen;\n\t\n    while (p < pEnd && (*p == ' ' || *p == '\\t'))\n    {\n        p++;\n    }\n\t\n    if (p != pEnd)\n    {\n\t\tlogWarning(\"file: \"__FILE__\", line: %d, \"\n                \"invalid for range: %.*s\", __LINE__,\n                range_len, range);\n        return EINVAL;\n    }\n\n    return 0;\n}\n\n\n\n// content is the conf file content which has been preProcessed\n// return 0: success\nstatic int iniDoLoadItemsFromBuffer(char *content, IniContext *pContext)\n{\n    AnnotationMap *pAnnoMap;\n\tIniSection *pSection;\n\tIniItem *pItem;\n\tchar *pLine;\n\tchar *pLastEnd;\n\tchar *pEqualChar;\n    char *pItemName;\n    char *pAnnoItemLine;\n\tchar *pIncludeFilename;\n    char *pItemValues[100];\n    char pFuncName[FAST_INI_ITEM_NAME_LEN + 1];\n\tchar full_filename[MAX_PATH_SIZE];\n    int i;\n\tint nLineLen;\n\tint nNameLen;\n    int nItemCnt;\n\tint nValueLen;\n\tint result;\n    int isAnnotation;\n\n\tresult = 0;\n    pAnnoItemLine = NULL;\n    isAnnotation = 0;\n    *pFuncName = '\\0';\n\tpLastEnd = content - 1;\n\tpSection = pContext->current_section;\n    pItem = pSection->items + pSection->count;\n\n\twhile (pLastEnd != NULL)\n\t{\n\t\tpLine = pLastEnd + 1;  // pointer to the begin of a line\n\t\tpLastEnd = strchr(pLine, '\\n'); // pointer to the end of a line\n\t\t\n\t\tif (pLastEnd != NULL)\n\t\t{\n\t\t\t*pLastEnd = '\\0';\n\t\t}\n\n        if (isAnnotation && pLine != pAnnoItemLine)\n        {\n            logWarning(\"file: \"__FILE__\", line: %d, \" \\\n                \"the @function annotation line \" \\\n                \"must follow by key=value line!\", __LINE__);\n            isAnnotation = 0;\n        }\n\n\t\tif (*pLine == '#' && \\\n\t\t\tstrncasecmp(pLine+1, \"include\", 7) == 0 && \\\n\t\t\t(*(pLine+8) == ' ' || *(pLine+8) == '\\t'))\n\t\t{\n\t\t\tpIncludeFilename = strdup(pLine + 9);\n\t\t\t\n\t\t\tif (pIncludeFilename == NULL)\n\t\t\t{\n\t\t\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\t\t\"strdup %d bytes fail\", __LINE__, \\\n\t\t\t\t\t(int)strlen(pLine + 9) + 1);\n\t\t\t\tresult = errno != 0 ? errno : ENOMEM;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\ttrim(pIncludeFilename);\n\t\t\t\n\t\t\tif (strncasecmp(pIncludeFilename, \"http://\", 7) == 0)\n\t\t\t{\n\t\t\t\tsnprintf(full_filename, sizeof(full_filename),\\\n\t\t\t\t\t\"%s\", pIncludeFilename);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (*pIncludeFilename == '/')\n\t\t\t\t{\n\t\t\t\tsnprintf(full_filename, sizeof(full_filename), \\\n\t\t\t\t\t\"%s\", pIncludeFilename);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\tsnprintf(full_filename, sizeof(full_filename), \\\n\t\t\t\t\t\"%s/%s\", pContext->config_path, \\\n\t\t\t\t\t pIncludeFilename);\n\t\t\t\t}\n\n\t\t\t\tif (!fileExists(full_filename))\n\t\t\t\t{\n\t\t\t\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\t\t\t\"include file \\\"%s\\\" not exists, \" \\\n\t\t\t\t\t\t\"line: \\\"%s\\\"\", __LINE__, \\\n\t\t\t\t\t\tpIncludeFilename, pLine);\n\t\t\t\t\tfree(pIncludeFilename);\n\t\t\t\t\tresult = ENOENT;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t\n\t\t\t}\n\n            pContext->current_section = &pContext->global;\n\t\t\tresult = iniDoLoadFromFile(full_filename, pContext); // call again\n\t\t\t\n\t\t\tif (result != 0)\n\t\t\t{\n\t\t\t\tfree(pIncludeFilename);\n\t\t\t\tbreak;\n\t\t\t}\n\n            pContext->current_section = &pContext->global; // 将当前处理的section指向pContext->global\n\t\t\tpSection = pContext->current_section;\n            pItem = pSection->items + pSection->count;  //must re-asign\n\n\t\t\tfree(pIncludeFilename);\n\t\t\tcontinue;\n\t\t}\n        else if ((*pLine == '#' && \\\n            strncasecmp(pLine+1, \"@function\", 9) == 0 && \\\n            (*(pLine+10) == ' ' || *(pLine+10) == '\\t')))  // 是否是@function annotation\n        {\n            if (!pContext->ignore_annotation) \n\t\t\t{\n                nNameLen = strlen(pLine + 11);\n\t\t\t\t\n                if (nNameLen > FAST_INI_ITEM_NAME_LEN)\n                {\n                    nNameLen = FAST_INI_ITEM_NAME_LEN;\n                }\n\t\t\t\t\n                memcpy(pFuncName, pLine + 11, nNameLen);\n                pFuncName[nNameLen] = '\\0';\n                trim(pFuncName);\n\t\t\t\t\n                if ((int)strlen(pFuncName) > 0)\n                {\n                    isAnnotation = 1;\n                    pAnnoItemLine = pLastEnd + 1;\n                }\n                else\n                {\n                    logWarning(\"file: \"__FILE__\", line: %d, \" \\\n                            \"the function name of annotation line is empty\", \\\n                            __LINE__);\n                }\n\t\t\t\t\n            }\n\t\t\t\n            continue;\n\t\t\t\n        }\n\n\t\ttrim(pLine);\n\t\t\n\t\tif (*pLine == '#' || *pLine == '\\0') \n\t\t{\n\t\t\tcontinue;\n\t\t}\n\n\t\tnLineLen = strlen(pLine);\n\t\t\n\t\tif (*pLine == '[' && *(pLine + (nLineLen - 1)) == ']') //section\n\t\t{\n\t\t\tchar *section_name;\n\t\t\tint section_len;\n\n\t\t\t*(pLine + (nLineLen - 1)) = '\\0';\n\t\t\tsection_name = pLine + 1; //skip [\n\n\t\t\ttrim(section_name);\n\t\t\t\n\t\t\tif (*section_name == '\\0') //global section\n\t\t\t{\n\t\t\t\tpContext->current_section = &pContext->global;\n\t\t\t\tpSection = pContext->current_section;\n                pItem = pSection->items + pSection->count;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tsection_len = strlen(section_name);\n\t\t\tpSection = (IniSection *)hash_find(&pContext->sections,\\\n\t\t\t\t\tsection_name, section_len);\n\t\t\t\n\t\t\tif (pSection == NULL)  // not find\n\t\t\t{\n\t\t\t\tpSection = (IniSection *)malloc(sizeof(IniSection));\n\t\t\t\t\n\t\t\t\tif (pSection == NULL)\n\t\t\t\t{\n\t\t\t\t\tresult = errno != 0 ? errno : ENOMEM;\n\t\t\t\t\tlogError(\"file: \"__FILE__\", line: %d, \"\\\n\t\t\t\t\t\t\"malloc %d bytes fail, \" \\\n\t\t\t\t\t\t\"errno: %d, error info: %s\", \\\n\t\t\t\t\t\t__LINE__, \\\n\t\t\t\t\t\t(int)sizeof(IniSection), \\\n\t\t\t\t\t\tresult, STRERROR(result));\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tmemset(pSection, 0, sizeof(IniSection));\n\t\t\t\tresult = hash_insert(&pContext->sections, \\\n\t\t\t\t\t  section_name, section_len, pSection);\n\t\t\t\t\n\t\t\t\tif (result < 0)\n\t\t\t\t{\n\t\t\t\t\tresult *= -1;\n\t\t\t\t\tlogError(\"file: \"__FILE__\", line: %d, \"\\\n\t\t\t\t\t\t\"insert into hash table fail, \"\\\n\t\t\t\t\t\t\"errno: %d, error info: %s\", \\\n\t\t\t\t\t\t__LINE__, result, \\\n\t\t\t\t\t\tSTRERROR(result));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpContext->current_section = pSection; \n                        pItem = pSection->items + pSection->count;\n\t\t\tcontinue;\n\t\t}\n\n\t\tpEqualChar = strchr(pLine, '=');\n\t\t\n\t\tif (pEqualChar == NULL)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\n\t\tnNameLen = pEqualChar - pLine;\n\t\tnValueLen = strlen(pLine) - (nNameLen + 1); // means we can not have ' ' or '\\t' before '=' and after '='\n\t\t\n\t\tif (nNameLen > FAST_INI_ITEM_NAME_LEN)\n\t\t{\n\t\t\tnNameLen = FAST_INI_ITEM_NAME_LEN;\n\t\t}\n\n\t\tif (nValueLen > FAST_INI_ITEM_VALUE_LEN)\n\t\t{\n\t\t\tnValueLen = FAST_INI_ITEM_VALUE_LEN;\n\t\t}\n\n\t\tif (pSection->count >= pSection->alloc_count)\n        {\n            result = remallocSection(pSection, &pItem);\n\t\t\t\n            if (result)\n            {\n                break;\n            }\n\t\t}\n\n\t\tmemcpy(pItem->name, pLine, nNameLen);\n\t\tmemcpy(pItem->value, pEqualChar + 1, nValueLen); // means we can not have ' ' or '\\t' before '=' and after '='\n\n\t\ttrim(pItem->name);  // it allow has space before or after '='\n\t\ttrim(pItem->value);\n\n        if (isAnnotation) // access the global variable: g_annotataionMap and make some process\n        {\n            isAnnotation = 0;\n\n            if (g_annotataionMap == NULL)\n            {\n                logWarning(\"file: \"__FILE__\", line: %d, \" \\\n                    \"not set annotataionMap and (%s) will use \" \\\n                    \"the item value (%s)\", __LINE__, pItem->name,\n                    pItem->value);\n\t\t\t\t\n                pSection->count++;\n                pItem++;\n                continue;\n            }\n\n            nItemCnt = -1;\n            pAnnoMap = g_annotataionMap;\n\t\t\t\n            while (pAnnoMap->func_name)\n            {\n                if (strcmp(pFuncName, pAnnoMap->func_name) == 0)\n                {\n                    if (pAnnoMap->func_init)\n                    {\n                        pAnnoMap->func_init();\n                    }\n\n                    if (pAnnoMap->func_get)\n                    {\n                        nItemCnt = pAnnoMap->func_get(pItem->value, pItemValues, 100);\n                    }\n\t\t\t\t\t\n                    break;\n                }\n\t\t\t\t\n                pAnnoMap++;\n            }\n\n            if (nItemCnt == -1)\n            {\n                logWarning(\"file: \"__FILE__\", line: %d, \" \\\n                    \"not found corresponding annotation function: %s, \" \\\n                    \"\\\"%s\\\" will use the item value \\\"%s\\\"\", __LINE__,\n                    pFuncName, pItem->name, pItem->value);\n                pSection->count++;\n                pItem++;\n                continue;\n            }\n            else if (nItemCnt == 0)\n            {\n                logWarning(\"file: \"__FILE__\", line: %d, \" \\\n                    \"annotation function %s execute fail, \" \\\n                    \"\\\"%s\\\" will use the item value \\\"%s\\\"\", __LINE__,\n                    pFuncName, pItem->name, pItem->value);\n                pSection->count++;\n                pItem++;\n                continue;\n            }\n\n            pItemName = pItem->name;\n            nNameLen = strlen(pItemName);\n\t\t\t\n            for (i = 0; i < nItemCnt; i++)\n            {\n                nValueLen = strlen(pItemValues[i]);\n\t\t\t\t\n                if (nValueLen > FAST_INI_ITEM_VALUE_LEN)\n                {\n                    nValueLen = FAST_INI_ITEM_VALUE_LEN;\n                }\n\t\t\t\t\n                memcpy(pItem->name, pItemName, nNameLen);\n                memcpy(pItem->value, pItemValues[i], nValueLen);\n                pItem->value[nValueLen] = '\\0';\n                pSection->count++;\n                pItem++;\n\t\t\t\t\n                if (pSection->count >= pSection->alloc_count)\n                {\n                    result = remallocSection(pSection, &pItem);\n\t\t\t\t\t\n                    if (result)\n                    {\n                        break;\n                    }\n                }\n\t\t\t\t\n            }\n            continue;\n        }\n\n\t\tpSection->count++;\n\t\tpItem++;\n\t}\n\n\n    // result is 0 means has not error occured\n    \n    if (result == 0 && isAnnotation)\n    {\n        logWarning(\"file: \"__FILE__\", line: %d, \" \\\n            \"the @function annotation line \" \\\n            \"must follow by key=value line!\", __LINE__);\n    }\n\n\treturn result; \n}\n\n// get the rid of white space from the left and right of pStr\nchar *trim(char *pStr)\n{\n\ttrim_right(pStr);\n\ttrim_left(pStr);\n\treturn pStr;\n}\n\n//get rid of the white space from the left of pStr\nchar *trim_left(char *pStr)\n{\n\tchar *p;\n\tchar *pEnd;\n\tint nDestLen;\n\n\tpEnd = pStr + strlen(pStr);\n\t\n\tfor (p=pStr; p<pEnd; p++)\n\t{\n\t\tif (!(' ' == *p|| '\\n' == *p || '\\r' == *p || '\\t' == *p))\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif ( p == pStr)\n\t{\n\t\treturn pStr;\n\t}\n\t\n\tnDestLen = (pEnd - p) + 1; //including \\0\n\tmemmove(pStr, p, nDestLen);\n\n\treturn pStr;\n}\n\n\n// get rid of the white space from the right of pStr\nchar *trim_right(char *pStr)\n{\n\tint len;\n\tchar *p;\n\tchar *pEnd;\n\n\tlen = strlen(pStr);\n\t\n\tif (len == 0)\n\t{\n\t\treturn pStr;\n\t}\n\n\tpEnd = pStr + len - 1;\n\t\n\tfor (p = pEnd;  p>=pStr; p--)\n\t{\n\t\tif (!(' ' == *p || '\\n' == *p || '\\r' == *p || '\\t' == *p))\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (p != pEnd)\n\t{\n\t\t*(p+1) = '\\0';\n\t}\n\n\treturn pStr;\n}\n\n\nbool fileExists(const char *filename)\n{\n\treturn access(filename, 0) == 0;\n}\n\n// allocate enough space for section\nstatic int remallocSection(IniSection *pSection, IniItem **pItem)\n{\n    int bytes, result;\n    IniItem *pNew;\n\n    if (pSection->alloc_count == 0)\n    {\n        pSection->alloc_count = _INIT_ALLOC_ITEM_COUNT;\n    }\n    else\n    {\n        pSection->alloc_count *= 2;\n    }\n\t\n    bytes = sizeof(IniItem) * pSection->alloc_count;\n    pNew = (IniItem *)malloc(bytes);\n\t\n    if (pNew == NULL)\n    {\n        logError(\"file: \"__FILE__\", line: %d, \" \\\n            \"malloc %d bytes fail\", __LINE__, bytes);\n        result = errno != 0 ? errno : ENOMEM;\n        return result;\n    }\n\n    if (pSection->count > 0)\n    {\n        memcpy(pNew, pSection->items,\n                sizeof(IniItem) * pSection->count);\n        free(pSection->items);\n    }\n\n    pSection->items = pNew;\n    *pItem = pSection->items + pSection->count;\n\t\n    memset(*pItem, 0, sizeof(IniItem) * \\\n        (pSection->alloc_count - pSection->count));\n\n    return 0;\n}\n\nvoid *hash_find(HashArray *pHash, const void *key, const int key_len)\n{\n\tunsigned int hash_code;\n\tHashData **ppBucket;\n\tHashData *hash_data;\n\n\thash_code = pHash->hash_func(key, key_len);\n\tppBucket = pHash->buckets + (hash_code % (*pHash->capacity));\n\n\tHASH_LOCK(pHash, ppBucket - pHash->buckets)\n\thash_data = _chain_find_entry(ppBucket, key, key_len, hash_code);\n\tHASH_UNLOCK(pHash, ppBucket - pHash->buckets)\n\n\tif (hash_data != NULL)\n\t{\n\t\treturn hash_data->value;\n\t}\n\telse\n\t{\n\t\treturn NULL;\n\t}\n}\n\n#define HASH_LOCK(pHash, index) \\\n\tif (pHash->lock_count > 0) \\\n\t{ \\\n\t\tpthread_mutex_lock(pHash->locks + (index) % pHash->lock_count); \\\n\t}\n\n#define HASH_UNLOCK(pHash, index) \\\n\tif (pHash->lock_count > 0) \\\n\t{ \\\n\t\tpthread_mutex_unlock(pHash->locks + (index) % pHash->lock_count); \\\n\t}\n\nstatic HashData *_chain_find_entry(HashData **ppBucket, const void *key, \\\n\t\tconst int key_len, const unsigned int hash_code)\n{\n\tHashData *hash_data;\n\n\thash_data = *ppBucket;\n\t\n\twhile (hash_data != NULL)\n\t{\n\t\tif (key_len == hash_data->key_len && \\\n\t\t\tmemcmp(key, hash_data->key, key_len) == 0)\n\t\t{\n\t\t\treturn hash_data;\n\t\t}\n\n\t\thash_data = hash_data->next;\n\t}\n\n\treturn NULL;\n}\n\n#define hash_insert(pHash, key, key_len, value) \\\n\thash_insert_ex(pHash, key, key_len, value, 0, true)\n\nint hash_insert_ex(HashArray *pHash, const void *key, const int key_len, \\\n\t\tvoid *value, const int value_len, const bool needLock)\n{\n\tunsigned int hash_code;\n\tHashData **ppBucket;\n\tHashData *hash_data;\n\tHashData *previous;\n\tchar *pBuff;\n\tint bytes;\n\tint malloc_value_size;\n\n\thash_code = pHash->hash_func(key, key_len);\n\tppBucket = pHash->buckets + (hash_code % (*pHash->capacity));\n\n\tprevious = NULL;\n\n\tif (needLock)\n\t{\n\t\tHASH_LOCK(pHash, ppBucket - pHash->buckets)\n\t}\n\n\thash_data = *ppBucket;\n\t\n\twhile (hash_data != NULL)\n\t{\n\t\tif (key_len == hash_data->key_len && \\\n\t\t\tmemcmp(key, hash_data->key, key_len) == 0)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\n\t\tprevious = hash_data;\n\t\thash_data = hash_data->next;\n\t\t\n\t}\n\n\tif (hash_data != NULL) //exists\n\t{\n\t\tif (!pHash->is_malloc_value)\n\t\t{\n\t\t\thash_data->value_len = value_len;\n\t\t\thash_data->value = (char *)value;\n\t\t\t\n\t\t\tif (needLock)\n\t\t\t{\n\t\t\t\tHASH_UNLOCK(pHash, ppBucket - pHash->buckets)\n\t\t\t}\n\t\t\t\n\t\t\treturn 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (hash_data->malloc_value_size >= value_len && \\\n\t\t\t\t(hash_data->malloc_value_size <= 128 ||\n\t\t\t\t hash_data->malloc_value_size / 2 < value_len))\n\t\t\t{\n\t\t\t\thash_data->value_len = value_len;\n\t\t\t\tmemcpy(hash_data->value, value, value_len);\n\t\t\t\t\n\t\t\t\tif (needLock)\n\t\t\t\t{\n\t\t\t\t\tHASH_UNLOCK(pHash, ppBucket - pHash->buckets)\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tDELETE_FROM_BUCKET(pHash, ppBucket, previous, hash_data)\n\t\t}\n\t}\n\t\n\tif (needLock)\n\t{\n\t\tHASH_UNLOCK(pHash, ppBucket - pHash->buckets)\n\t}\n\n\tif (!pHash->is_malloc_value)\n\t{\n\t\tmalloc_value_size = 0;\n\t}\n\telse\n\t{\n\t\tmalloc_value_size = MEM_ALIGN(value_len);\n\t}\n\n\tbytes = CALC_NODE_MALLOC_BYTES(key_len, malloc_value_size);\n\t\n\tif (pHash->max_bytes > 0 && pHash->bytes_used+bytes > pHash->max_bytes)\n\t{\n\t\treturn -ENOSPC;\n\t}\n\n\tpBuff = (char *)malloc(bytes);\n\t\n\tif (pBuff == NULL)\n\t{\n\t\treturn -ENOMEM;\n\t}\n\n\tpHash->bytes_used += bytes;\n\n\thash_data = (HashData *)pBuff;\n\thash_data->malloc_value_size = malloc_value_size;\n\n\thash_data->key_len = key_len;\n\tmemcpy(hash_data->key, key, key_len);\n#ifdef HASH_STORE_HASH_CODE\n\thash_data->hash_code = hash_code;  // save the hash code for next use, it need not calculate again when next use\n#endif\n\thash_data->value_len = value_len;\n\n\tif (!pHash->is_malloc_value) // means the buffer of value is allocated in outer space, rather than beening allocated in the end of the key buffer\n\t{\n\t\thash_data->value = (char *)value;\n\t}\n\telse\n\t{\n\t\thash_data->value = hash_data->key + hash_data->key_len;\n\t\tmemcpy(hash_data->value, value, value_len);\n\t}\n\n\tif (needLock)\n\t{\n\t\tHASH_LOCK(pHash, ppBucket - pHash->buckets)\n\t\tADD_TO_BUCKET(pHash, ppBucket, hash_data)\n\t\tHASH_UNLOCK(pHash, ppBucket - pHash->buckets)\n\t}\n\telse\n\t{\n\t\tADD_TO_BUCKET(pHash, ppBucket, hash_data)\n\t}\n\n\tif (pHash->load_factor >= 0.10 && (double)pHash->item_count /\n\t\t(double)*pHash->capacity >= pHash->load_factor)\n\t{\n\t\t_rehash(pHash);  // rehash \n\t}\n\n\treturn 1;\n}\n\n// delete a hash_data from pHash\n#define DELETE_FROM_BUCKET(pHash, ppBucket, previous, hash_data) \\\n\tif (previous == NULL) \\\n\t{ \\\n\t\t*ppBucket = hash_data->next; \\\n\t} \\\n\telse \\\n\t{ \\\n\t\tprevious->next = hash_data->next; \\\n\t} \\\n\tpHash->item_count--; \\\n\tpHash->bytes_used -= CALC_NODE_MALLOC_BYTES(hash_data->key_len, \\\n\t\t\t\thash_data->malloc_value_size); \\\n\tfree(hash_data);\n\n\n#define MEM_ALIGN(x)  (((x) + 7) & (~7))\n\n#define CALC_NODE_MALLOC_BYTES(key_len, value_size) \\\n\t\tsizeof(HashData) + key_len + value_size\n\n\n#define ADD_TO_BUCKET(pHash, ppBucket, hash_data) \\\n\thash_data->next = *ppBucket; \\\n\t*ppBucket = hash_data; \\\n\tpHash->item_count++;\n\nstatic int _rehash(HashArray *pHash)\n{\n\tint result;\n\tunsigned int *pOldCapacity;\n\n\tpOldCapacity = pHash->capacity;\n\t\n\tif (pHash->is_malloc_capacity)\n\t{\n\t\tunsigned int *pprime;\n\t\tunsigned int *prime_end;\n\n\t\tpHash->capacity = NULL;\n\n\t\tprime_end = prime_array + PRIME_ARRAY_SIZE;\n\t\t\n\t\tfor (pprime = prime_array; pprime!=prime_end; pprime++)\n\t\t{\n\t\t\tif (*pprime > *pOldCapacity)\n\t\t\t{\n\t\t\t\tpHash->capacity = pprime;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tpHash->capacity++;\n\t}\n\n\tif ((result=_rehash1(pHash, *pOldCapacity, pHash->capacity)) != 0)\n\t{\n\t\tpHash->capacity = pOldCapacity;  //rollback\n\t}\n\telse\n\t{\n\t\tif (pHash->is_malloc_capacity)\n\t\t{\n\t\t\tfree(pOldCapacity);\n\t\t\tpHash->is_malloc_capacity = false;\n\t\t}\n\t}\n\n\t/*printf(\"rehash, old_capacity=%d, new_capacity=%d\\n\", \\\n\t\told_capacity, *pHash->capacity);\n\t*/\n\treturn result;\n}\n\n\n// rehash by new size: *new_capacity\nstatic int _rehash1(HashArray *pHash, const int old_capacity, \\\n\t\tunsigned int *new_capacity)\n{\n\tHashData **old_buckets;\n\tHashData **ppBucket;\n\tHashData **bucket_end;\n\tHashData *hash_data;\n\tHashData *pNext;\n\tint result;\n\n\told_buckets = pHash->buckets;\n\tpHash->capacity = new_capacity;\n\t\n\tif ((result=_hash_alloc_buckets(pHash, old_capacity)) != 0)\n\t{\n\t\tpHash->buckets = old_buckets;\n\t\treturn result;\n\t}\n\n\t//printf(\"old: %d, new: %d\\n\", old_capacity, *pHash->capacity);\n\n\tpHash->item_count = 0;\n\tbucket_end = old_buckets + old_capacity;\n\t\n\tfor (ppBucket=old_buckets; ppBucket<bucket_end; ppBucket++)\n\t{\n\t\tif (*ppBucket == NULL)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\n\t\thash_data = *ppBucket;\n\t\t\n\t\twhile (hash_data != NULL)\n\t\t{\n\t\t\tpNext = hash_data->next;\n\n\t\t\tADD_TO_BUCKET(pHash, (pHash->buckets + \\\n\t\t\t\t(HASH_CODE(pHash, hash_data) % \\\n\t\t\t\t(*pHash->capacity))), hash_data)\n\n\t\t\thash_data = pNext;\n\t\t}\n\t}\n\n\tfree(old_buckets);\n\treturn 0;\n}\n\n\nchar *iniGetStrValue(const char *szSectionName, const char *szItemName, \\\n\t\tIniContext *pContext)\n{\n\tIniItem targetItem;\n\tIniSection *pSection;\n\tIniItem *pItem;\n\n\tINI_FIND_ITEM(szSectionName, szItemName, pContext, pSection, \\\n\t\t\ttargetItem, pItem, NULL)\n\n\tif (pItem == NULL)\n\t{\n\t\treturn NULL;\n\t}\n\telse\n\t{\n\t\treturn pItem->value;\n\t}\n}\n\n#define INI_FIND_ITEM(szSectionName, szItemName, pContext, pSection, \\\n\t\t\ttargetItem, pItem, return_val) \\\n\tif (szSectionName == NULL || *szSectionName == '\\0') \\\n\t{ \\\n\t\tpSection = &pContext->global; \\\n\t} \\\n\telse \\\n\t{ \\\n\t\tpSection = (IniSection *)hash_find(&pContext->sections, \\\n\t\t\t\tszSectionName, strlen(szSectionName)); \\\n\t\tif (pSection == NULL) \\\n\t\t{ \\\n\t\t\treturn return_val; \\\n\t\t} \\\n\t} \\\n\t\\\n\tif (pSection->count <= 0) \\\n\t{ \\\n\t\treturn return_val; \\\n\t} \\\n\t\\\n\tsnprintf(targetItem.name, sizeof(targetItem.name), \"%s\", szItemName); \\\n\tpItem = (IniItem *)bsearch(&targetItem, pSection->items, \\\n\t\t\tpSection->count, sizeof(IniItem), iniCompareByItemName); // 二分查找\n\n\n\nstatic void iniSortItems(IniContext *pContext)\n{\n\tif (pContext->global.count > 1)\n\t{\n\t\tqsort(pContext->global.items, pContext->global.count, \\\n\t\t\tsizeof(IniItem), iniCompareByItemName);\n\t}\n\n\thash_walk(&pContext->sections, iniSortHashData, NULL);\n}\n\n\nstatic int iniCompareByItemName(const void *p1, const void *p2)\n{\n\treturn strcmp(((IniItem *)p1)->name, ((IniItem *)p2)->name);\n}\n\nint hash_walk(HashArray *pHash, HashWalkFunc walkFunc, void *args)\n{\n\tHashData **ppBucket;\n\tHashData **bucket_end;\n\tHashData *hash_data;\n\tint index;\n\tint result;\n\n\tindex = 0;\n\tbucket_end = pHash->buckets + (*pHash->capacity);\n\t\n\tfor (ppBucket=pHash->buckets; ppBucket<bucket_end; ppBucket++)\n\t{\n\t\thash_data = *ppBucket;\n\t\t\n\t\twhile (hash_data != NULL)\n\t\t{\n\t\t\tresult = walkFunc(index, hash_data, args);\n\t\t\t\n\t\t\tif (result != 0)\n\t\t\t{\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\tindex++;\n\t\t\thash_data = hash_data->next;\n\t\t}\n\t}\n\n\treturn 0;\n}\n\nvoid iniFreeContext(IniContext *pContext)\n{\n\tif (pContext == NULL)\n\t{\n\t\treturn;\n\t}\n\n\tif (pContext->global.items != NULL)\n\t{\n\t\tfree(pContext->global.items);\n\t\tmemset(&pContext->global, 0, sizeof(IniSection));\n\t}\n\n\thash_walk(&pContext->sections, iniFreeHashData, NULL);\n\thash_destroy(&pContext->sections);\n\n    iniFreeDynamicContent(pContext);\n}\n\nvoid hash_destroy(HashArray *pHash)\n{\n\tHashData **ppBucket;\n\tHashData **bucket_end;\n\tHashData *pNode;\n\tHashData *pDelete;\n\n\tif (pHash == NULL || pHash->buckets == NULL)\n\t{\n\t\treturn;\n\t}\n\n\tbucket_end = pHash->buckets + (*pHash->capacity);\n\t\n\tfor (ppBucket=pHash->buckets; ppBucket<bucket_end; ppBucket++)\n\t{\n\t\tpNode = *ppBucket;\n\t\t\n\t\twhile (pNode != NULL)\n\t\t{\n\t\t\tpDelete = pNode;\n\t\t\tpNode = pNode->next;\n\t\t\tfree(pDelete);\n\t\t}\n\t}\n\n\tfree(pHash->buckets);\n\tpHash->buckets = NULL;\n\t\n\tif (pHash->is_malloc_capacity)\n\t{\n\t\tfree(pHash->capacity);\n\t\tpHash->capacity = NULL;\n\t\tpHash->is_malloc_capacity = false;\n\t}\n\n\tpHash->item_count = 0;\n\tpHash->bytes_used = 0;\n}\n\nstatic void iniFreeDynamicContent(IniContext *pContext)\n{\n    CDCPair *pCDCPair;\n    DynamicContents *pDynamicContents;\n    int i;\n\n    if (g_dynamic_content_count == 0)\n    {\n        return;\n    }\n\n    if (g_dynamic_contents[g_dynamic_content_index].context == pContext)\n    {\n        pCDCPair = g_dynamic_contents + g_dynamic_content_index;\n    }\n    else\n    {\n        pCDCPair = NULL;\n\t\t\n        for (i=0; i<_MAX_DYNAMIC_CONTENTS; i++)\n        {\n            if (g_dynamic_contents[i].context == pContext)\n            {\n                pCDCPair = g_dynamic_contents + i;\n                break;\n            }\n        }\n\t\t\n        if (pCDCPair == NULL)\n        {\n            return;\n        }\n    }\n\n    pCDCPair->used = false;\n    pCDCPair->context = NULL;\n    pDynamicContents = &pCDCPair->dynamicContents;\n\t\n    if (pDynamicContents->contents != NULL)\n    {\n        for (i=0; i<pDynamicContents->count; i++)\n        {\n            if (pDynamicContents->contents[i] != NULL)\n            {\n                free(pDynamicContents->contents[i]);\n            }\n        }\n\t\t\n        free(pDynamicContents->contents);\n        pDynamicContents->contents = NULL;\n    }\n\t\n    pDynamicContents->alloc_count = 0;\n    pDynamicContents->count = 0;\n    g_dynamic_content_count--;\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/fastdfs配置文件解析模块.md","raw":"---\ntitle: fastdfs配置文件解析模块\ndate: 2016-11-06 19:11:20\ncategories: \"fastdfs\"\ntags: [fastdfs]\n---\n\n\n### 加载配置文件解析\n配置文件有： storage.conf,tracker.conf,mod_fastdfs.conf,http.conf等，配置文件中还可以用#include包含其他配置文件，\n如#include http.conf。该配置文件解析模块就是读取这些配置文件，然后解析保存，方便得到其中的值。\n如：\nresult=iniLoadFromFileEx(filename, &iniContext, true)\npBasePath = iniGetStrValue(NULL, \"base_path\", &iniContext); //该函数就可以得到配置文件中base_path的值\n<!--more-->\n\n相关参考：[http://slucx.blog.chinaunix.net/uid-29504236-id-4369694.html](http://slucx.blog.chinaunix.net/uid-29504236-id-4369694.html)\n\n### 1. 相关数据结构\n```\ntypedef struct\n{\n\tIniSection global;  //保存全局key,value对\n\tHashArray sections;  //key is session name, and value is IniSection,这里hash数组用来保存[group1]下隶属于group1的<key,value>对\n\tIniSection *current_section; //for load from ini file，当前正在处理的IniSection\n\tchar config_path[MAX_PATH_SIZE];  //save the config filepath, such as conf file is /etc/data/xxx.conf, config_path is /etc/data\n\n    bool ignore_annotation; // 是否忽略注解，看代码时可以略过不看\n} IniContext;\n\n\ntypedef struct\n{\n\tIniItem *items;\n\tint count;  //item count\n\tint alloc_count;\n} IniSection;\n\ntypedef struct\n{\n\tchar name[FAST_INI_ITEM_NAME_LEN + 1];\n\tchar value[FAST_INI_ITEM_VALUE_LEN + 1];\n} IniItem;\n\n\ntypedef struct tagHashArray\n{\n\tHashData **buckets;\n\tHashFunc hash_func; // default is Time33Hash func\n\tint item_count;  // is all the item saved in buckets\n\tunsigned int *capacity; // pointer to prime global aarray, see hash_init_ex func\n\tdouble load_factor;\n\tint64_t max_bytes; // means the max size of space which can be used in hashArray\n\tint64_t bytes_used; // means the size of have been used, is the *capacity * sizeof(HashData *)，为已经使用的字节数\n\tbool is_malloc_capacity;\n\t// is_malloc_value is true: means the buffer of value is allocated in outer space, rather than beening allocated in the end of the key buffer\n\tbool is_malloc_value;  // it means hashArray whether  malloc space for value or not, default is false\n\t                       \n\tunsigned int lock_count;\n\tpthread_mutex_t *locks;\n} HashArray;\n\ntypedef struct tagHashData\n{\n\tint key_len;\n\tint value_len;\n\tint malloc_value_size;\n\n#ifdef HASH_STORE_HASH_CODE\n\tunsigned int hash_code;\n#endif\n\n\tchar *value;\n\tstruct tagHashData *next;\n\tchar key[0];\n} HashData;   // 元素\n\ntypedef int (*HashFunc) (const void *key, const int key_len);\n\nstatic CDCPair g_dynamic_contents[_MAX_DYNAMIC_CONTENTS] = {{false, NULL, {0, 0, NULL}}}; //用一个全局数组来保存已经解析过的文件\ntypedef struct {\n    bool used;\n    IniContext *context;\n    DynamicContents dynamicContents;\n} CDCPair;\n```\n\n其中的sections是一个hash数组，用到的hash函数默认为Time33Hash函数\n进行hash插入时，具体见hash_insert函数：\nhash_code = pHash->hash_func(key, key_len);\nppBucket = pHash->buckets + (hash_code % (*pHash->capacity));\n\nkey是section_name, key_len是section_len，而\nsection_name, section_len为\"[]\"包围的字符串，见iniDoLoadItemsFromBuffer函数\n如： [group1], section_name, section_len分别为group1和6\nmod_fastdfs.conf文件中有：\n```\n#[group1]\n#group_name=group1\n#storage_server_port=23000\n#store_path_count=2\n#store_path0=/home/yuqing/fastdfs\n#store_path1=/home/yuqing/fastdfs1\n```\n这里的group1就为section_name, section_len是6，此时current_section会指向一个新分配的IniSection，接着会将读取得到的\ngroup_name等<key,value>对插入到current_section中去，然后插入到hash数组中去。\n配置文件模块其实就是读取配置文件，然后初始化IniContext结构体。\n\n### 2. 下面讲解各个函数\n```\n调用路径如下：\niniLoadFromFile -> iniLoadFromFileEx -> iniInitContext、iniDoLoadFromFile、iniSortItems、iniFreeContext\niniInitContext -> hash_init\nhash_init->hash_init_ex->_hash_alloc_buckets\n```\n\n```\nint iniLoadFromFile(const char *szFilename, IniContext *pContext)\n{\n    return iniLoadFromFileEx(szFilename, pContext, false);\n}\n\nint iniLoadFromFileEx(const char *szFilename, IniContext *pContext,\n    bool ignore_annotation) // annotation is 注释, such as symbol = /* */\n{\n\tint result;\n\tint len;\n\tchar *pLast;\n\tchar full_filename[MAX_PATH_SIZE]; //保存完整文件名路径\n\n\tif ((result=iniInitContext(pContext)) != 0)\n\t{\n\t\treturn result;\n\t}\n\n        pContext->ignore_annotation = ignore_annotation; //default is true\n\n\tif (strncasecmp(szFilename, \"http://\", 7) == 0) // szFilename可以为类似： http://www.abc.com/sdfs/xxx.conf\n\t{\n\t\t*pContext->config_path = '\\0';\n\t\tsnprintf(full_filename, sizeof(full_filename),\"%s\",szFilename); \n\t}\n\telse\n\t{\n\t\tif (*szFilename == '/') // szFilename is the absolute path\n\t\t{\n\t\t\tpLast = strrchr(szFilename, '/'); //从后面开始查找第一个字符'/'\n\t\t\tlen = pLast - szFilename;\n\t\t\t\n\t\t\tif (len >= sizeof(pContext->config_path))\n\t\t\t{\n\t\t\t\tlogError(\"file: \"__FILE__\", line: %d, \"\\\n\t\t\t\t\t\"the path of the config file: %s is \" \\\n\t\t\t\t\t\"too long!\", __LINE__, szFilename);\n\t\t\t\treturn ENOSPC;\n\t\t\t}\n\n\t\t\tmemcpy(pContext->config_path, szFilename, len);\n\t\t\t*(pContext->config_path + len) = '\\0';\n\t\t\tsnprintf(full_filename, sizeof(full_filename), \\\n\t\t\t\t\"%s\", szFilename);\n\t\t}\n\t\telse  // 表明是从当前路径下的文件名，szFilename is the conf file name or is current_dir/xxx1/xxx2/xxx.conf\n\t\t{\n\t\t\tmemset(pContext->config_path, 0, \\\n\t\t\t\tsizeof(pContext->config_path));\n\t\t\t\n\t\t\tif (getcwd(pContext->config_path, sizeof( \\\n\t\t\t\tpContext->config_path)) == NULL)  //getcwd函数为得到当前目录\n\t\t\t{\n\t\t\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\t\t\"getcwd fail, errno: %d, \" \\\n\t\t\t\t\t\"error info: %s\", \\\n\t\t\t\t\t__LINE__, errno, STRERROR(errno));\n\t\t\t\treturn errno != 0 ? errno : EPERM;\n\t\t\t}\n\n\t\t\tlen = strlen(pContext->config_path);\n\t\t\t\n\t\t\tif (len > 0 && pContext->config_path[len - 1] == '/')\n\t\t\t{\n\t\t\t\tlen--;\n\t\t\t\t*(pContext->config_path + len) = '\\0';\n\t\t\t}  // make sure the last char is not '/'\n\n\t\t\tsnprintf(full_filename, sizeof(full_filename), \\\n\t\t\t\t\"%s/%s\", pContext->config_path, szFilename);\n\n\t\t\tpLast = strrchr(szFilename, '/');\n\t\t\t\n\t\t\tif (pLast != NULL)  // such as szFilename is \"data/xxx.conf\"\n\t\t\t{\n\t\t\t\tint tail_len;\n\t\t\t\ttail_len = pLast - szFilename;\n\t\t\t\t\n\t\t\t\tif (len + 1 + tail_len >= sizeof( \\\n\t\t\t\t\t\tpContext->config_path))\n\t\t\t\t{\n\t\t\t\t\tlogError(\"file: \"__FILE__\", line: %d, \"\\\n\t\t\t\t\t\t\"the path of the config \" \\\n\t\t\t\t\t\t\"file: %s is too long!\", \\\n\t\t\t\t\t\t__LINE__, szFilename);\n\t\t\t\t\treturn ENOSPC;\n\t\t\t\t}\n\n                *(pContext->config_path + len++) = '/';\n\t\t\t\tmemcpy(pContext->config_path + len, \\\n\t\t\t\t\tszFilename, tail_len);\n\t\t\t\tlen += tail_len;\n\t\t\t\t*(pContext->config_path + len) = '\\0';\n\t\t\t}\n\t\t}\n\t}\n\n    // now full_filename is the absolute path of conf file, pContext->config_path\n    // is the conf file directory\n\tresult = iniDoLoadFromFile(full_filename, pContext);\n\t\n\tif (result == 0)\n\t{\n\t\tiniSortItems(pContext);\n\t}\n\telse\n\t{\n\t\tiniFreeContext(pContext);\n\t}\n\n\treturn result;\n}\n\n// init the member of IniContext, such as init the hash member:pContext->sections\nstatic int iniInitContext(IniContext *pContext)\n{\n\tint result;\n\n\tmemset(pContext, 0, sizeof(IniContext));\n\tpContext->current_section = &pContext->global; //指向global,用于保存全局key,value对\n\t\n\tif ((result=hash_init(&pContext->sections, Time33Hash, 32, 0.75)) != 0) //hash数组初始化，Time33Hash为hash函数，32为容量，0.75为负载因子\n\t{\n\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"hash_init fail, errno: %d, error info: %s\", \\\n\t\t\t__LINE__, result, STRERROR(result));\n\t}\n\n\treturn result;\n}\n\nhash函数如下：\n#define TIME33_HASH_FUNC(init_value) \\\n\tint nHash; \\\n\tunsigned char *pKey; \\\n\tunsigned char *pEnd; \\\n \\\n\tnHash = init_value; \\\n\tpEnd = (unsigned char *)key + key_len; \\\n\tfor (pKey = (unsigned char *)key; pKey != pEnd; pKey++) \\\n\t{ \\\n\t\tnHash += (nHash << 5) + (*pKey); \\\n\t} \\\n \\\n\treturn nHash; \\\n\n\n// get a int value according to the key value\nint Time33Hash(const void *key, const int key_len)\n{\n\tTIME33_HASH_FUNC(0)\n}\n\n#define hash_init(pHash, hash_func, capacity, load_factor) \\\n\thash_init_ex(pHash, hash_func, capacity, load_factor, 0, false)\n\n// 参数依次为：要初始化的hash数组，hash函数，容量，负载因子（当前保存的项数/capacity）,hash数组能用的最大字节数，保存value的空间是否已经在外部被分配了\nint hash_init_ex(HashArray *pHash, HashFunc hash_func, \\\n\t\tconst unsigned int capacity, const double load_factor, \\\n\t\tconst int64_t max_bytes, const bool bMallocValue)\n{\n\tunsigned int *pprime;\n\tunsigned int *prime_end;\n\tint result;\n\n\tmemset(pHash, 0, sizeof(HashArray));\n\tprime_end = prime_array + PRIME_ARRAY_SIZE;  // 素数数组\n\t\n\tfor (pprime = prime_array; pprime!=prime_end; pprime++)\n\t{\n\t\tif ( *pprime > capacity ) //找到第一个大于容量的素数\n\t\t{\n\t\t\tpHash->capacity = pprime;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (pHash->capacity == NULL)\n\t{\n\t\treturn EINVAL;\n\t}\n\n\tif ((result=_hash_alloc_buckets(pHash, 0)) != 0) //分配桶\n\t{\n\t\treturn result;\n\t}\n\n\tpHash->hash_func = hash_func;\n\tpHash->max_bytes = max_bytes; //hash数组能够使用的最大字节数\n\tpHash->is_malloc_value = bMallocValue;  // default is false，保存key,value中的value数据时的空间是否已经在外部被分配\n\n    // load_factor default is 0.75\n\tif (load_factor >= 0.00 && load_factor <= 1.00)\n\t{\n\t\tpHash->load_factor = load_factor;\n\t}\n\telse\n\t{\n\t\tpHash->load_factor = 0.50;\n\t}\n\n\treturn 0;\n}\n\n// 素数数组\nstatic unsigned int prime_array[] = {\n    1,              /* 0 */\n    3,              /* 1 */\n    17,             /* 2 */\n    37,             /* 3 */\n    79,             /* 4 */\n    163,            /* 5 */\n    331,            /* 6 */\n    673,            /* 7 */\n    1361,           /* 8 */\n    2729,           /* 9 */\n    5471,           /* 10 */\n    10949,          /* 11 */\n    21911,          /* 12 */\n    43853,          /* 13 */\n    87719,          /* 14 */\n    175447,         /* 15 */\n    350899,         /* 16 */\n    701819,         /* 17 */\n    1403641,        /* 18 */\n    2807303,        /* 19 */\n    5614657,        /* 20 */\n    11229331,       /* 21 */\n    22458671,       /* 22 */\n    44917381,       /* 23 */\n    89834777,       /* 24 */\n    179669557,      /* 25 */\n    359339171,      /* 26 */\n    718678369,      /* 27 */\n    1437356741,     /* 28 */\n    2147483647      /* 29 (largest signed int prime) */\n};\n\n#define PRIME_ARRAY_SIZE  30\n\n// allocate the space of hash array\nstatic int _hash_alloc_buckets(HashArray *pHash, const unsigned int old_capacity)\n{\n\tsize_t bytes;\n\n\tbytes = sizeof(HashData *) * (*pHash->capacity);\n\t\n\tif (pHash->max_bytes > 0 && pHash->bytes_used+bytes > pHash->max_bytes)\n\t{\n\t\treturn ENOSPC; // no more memory in device \n\t}\n\n\tpHash->buckets = (HashData **)malloc(bytes);\n\t\n\tif (pHash->buckets == NULL)\n\t{\n\t\treturn ENOMEM;\n\t}\n\n\tmemset(pHash->buckets, 0, bytes); // sizeof(HashData *) * old_capacity为旧数组的大小\n\tpHash->bytes_used += bytes - sizeof(HashData *) * old_capacity; //bytes为新大小，减去旧数组大小则为新增大小\n\n\treturn 0;\n}\n\n\n\nstatic int iniDoLoadFromFile(const char *szFilename, \\\n\t\tIniContext *pContext)\n{\n\tchar *content;\n\tint result;\n\tint http_status;\n\tint content_len;\n\tint64_t file_size;\n\tchar error_info[512];\n\n\tif (strncasecmp(szFilename, \"http://\", 7) == 0) // 是否为http://xxx.xx.xx/xx1/xx.conf形式\n\t{\n\t    // szFilename: http://xx1.xx2.xx3/haha/dir/xxx.conf\n\t\tif ((result=get_url_content(szFilename, 10, 60, &http_status, \\   \n\t\t\t\t&content, &content_len, error_info)) != 0)  //get_url_content函数发送http请求获得文件内容\n\t\t{\n\t\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\t\"get_url_content fail, \" \\\n\t\t\t\t\"url: %s, error info: %s\", \\\n\t\t\t\t__LINE__, szFilename, error_info);\n\t\t\treturn result;\n\t\t}\n\n\t\tif (http_status != 200) // means http response status is not correct\n\t\t{\n\t\t\tfree(content);\n\t\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\t\"HTTP status code: %d != 200, url: %s\", \\\n\t\t\t\t__LINE__, http_status, szFilename);\n\t\t\treturn EINVAL;\n\t\t}\n\t\t\n\t}\n\telse\n\t{\n\t\tif ((result=getFileContent(szFilename, &content, \\\n\t\t\t\t&file_size)) != 0)\n\t\t{\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tresult = iniLoadItemsFromBuffer(content, pContext);\n\tfree(content);\n\n\treturn result;\n}\n\n\nint get_url_content(const char *url, const int connect_timeout, \\\n\tconst int network_timeout, int *http_status, \\\n\tchar **content, int *content_len, char *error_info)\n{\n    *content = NULL;\n    return get_url_content_ex(url, strlen(url), connect_timeout, network_timeout,\n            http_status, content, content_len, error_info);\n}\n\n/*\nget the content of url, the func will send http request and recv http response\n// connect_timeout is 10 default\n// network_timeout is 60 default\nhttp_status用于保存http响应报文的状态，如http 1.1 200 ok中的200\ncontent和content_len用于保存内容和长度\nerror_info用于保存错误信息\n*/\nint get_url_content_ex(const char *url, const int url_len,\n        const int connect_timeout, const int network_timeout,\n        int *http_status, char **content, int *content_len, char *error_info)\n{\n\tchar domain_name[256];\n\tchar ip_addr[IP_ADDRESS_SIZE];\n\tchar out_buff[4096];\n\tint domain_len;\n\tint out_len;\n\tint alloc_size;\n\tint recv_bytes;\n\tint result;\n\tint sock;\n\tint port;\n    bool bNeedAlloc;\n\tconst char *pDomain;\n\tconst char *pContent;\n\tconst char *pURI;\n\tchar *pPort;\n\tchar *pSpace;\n\n\t*http_status = 0;\n\t\n    if (*content == NULL)\n    {\n        bNeedAlloc = true;\n        alloc_size = 64 * 1024;\n    }\n    else\n    {\n        bNeedAlloc = false;\n        alloc_size = *content_len - 1;\n    }\n\t\n\t*content_len = 0;\n\t\n    if (url_len > sizeof(out_buff) - 128)\n    {\n\t\tsprintf(error_info, \"file: \"__FILE__\", line: %d, \"\n                \"url too long, url length: %d > %d\", __LINE__,\n                url_len, (int)(sizeof(out_buff) - 128));\n\n\t\treturn ENAMETOOLONG;\n    }\n\n\tif (url_len <= 7 || strncasecmp(url, \"http://\", 7) != 0)\n\t{\n\t\tsprintf(error_info, \"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"invalid url.\", __LINE__);\n\t\treturn EINVAL;\n\t}\n\n\tpDomain = url + 7;\n\tpURI = strchr(pDomain, '/');\n\t\n\tif (pURI == NULL)\n\t{\n\t\tdomain_len = url_len - 7;\n\t\tpURI = \"/\";\n\t}\n\telse\n\t{\n\t\tdomain_len = pURI - pDomain;\n\t}\n\n\tif (domain_len >= sizeof(domain_name))\n\t{\n\t\tsprintf(error_info, \"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"domain is too large, exceed %d.\", \\\n\t\t\t__LINE__, (int)sizeof(domain_name));\n\t\treturn EINVAL;\n\t}\n\n\tmemcpy(domain_name, pDomain, domain_len);\n\t*(domain_name + domain_len) = '\\0';\n\tpPort = strchr(domain_name, ':');\n\t\n\tif (pPort == NULL)\n\t{\n\t\tport = 80;\n\t}\n\telse\n\t{\n\t\t*pPort = '\\0';\n\t\tport = atoi(pPort + 1);\n\t}\n\n\tif (getIpaddrByName(domain_name, ip_addr, \\\n\t\tsizeof(ip_addr)) == INADDR_NONE)\n\t{\n\t\tsprintf(error_info, \"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"resolve domain \\\"%s\\\" fail.\", \\\n\t\t\t__LINE__, domain_name);\n\t\treturn EINVAL;\n\t}\n\n\tsock = socket(AF_INET, SOCK_STREAM, 0);\n\t\n\tif(sock < 0)\n\t{\n\t\tsprintf(error_info, \"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"socket create failed, errno: %d, \" \\\n\t\t\t\"error info: %s\", __LINE__, \\\n\t\t\terrno, STRERROR(errno));\n\t\treturn errno != 0 ? errno : EPERM;\n\t}\n\n\tif ((result=connectserverbyip_nb_auto(sock, ip_addr, port, \\\n\t\t\tconnect_timeout)) != 0)\n\t{\n\t\tclose(sock);\n\n\t\tsprintf(error_info, \"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"connect to %s:%d fail, errno: %d, \" \\\n\t\t\t\"error info: %s\", __LINE__, domain_name, \\\n\t\t\tport, result, STRERROR(result));\n\n\t\treturn result;\n\t}\n\n\tout_len = snprintf(out_buff, sizeof(out_buff), \\\n\t\t\"GET %s HTTP/1.0\\r\\n\" \\\n\t\t\"Host: %s:%d\\r\\n\" \\\n\t\t\"Connection: close\\r\\n\" \\\n\t\t\"\\r\\n\", pURI, domain_name, port);\n\t// we have Connection: close means: the peer will shutdown the socket when it has finished sending data\n\t// send http request \n\tif ((result=tcpsenddata(sock, out_buff, out_len, network_timeout)) != 0)\n\t{\n\t\tclose(sock);\n\n\t\tsprintf(error_info, \"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"send data to %s:%d fail, errno: %d, \" \\\n\t\t\t\"error info: %s\", __LINE__, domain_name, \\\n\t\t\tport, result, STRERROR(result));\n\n\t\treturn result;\n\t}\n\n    if (bNeedAlloc)\n    {\n        *content = (char *)malloc(alloc_size + 1);\n\t\t\n        if (*content == NULL)\n        {\n            close(sock);\n            result = errno != 0 ? errno : ENOMEM;\n\n            sprintf(error_info, \"file: \"__FILE__\", line: %d, \" \\\n                    \"malloc %d bytes fail, errno: %d, \" \\\n                    \"error info: %s\", __LINE__, alloc_size + 1, \\\n                    result, STRERROR(result));\n\n            return result;\n        }\n    }\n\n\tdo\n\t{\n\t\trecv_bytes = alloc_size - *content_len; // recv_bytes: left space to recv data\n\t\t\n\t\tif (recv_bytes <= 0)\n\t\t{\n            if (bNeedAlloc)\n            {\n                alloc_size *= 2;\n                *content = (char *)realloc(*content, alloc_size + 1);\n\t\t\t\t\n                if (*content == NULL)\n                {\n                    *content_len = 0;\n                    close(sock);\n                    result = errno != 0 ? errno : ENOMEM;\n\n                    sprintf(error_info, \"file: \"__FILE__\", line: %d, \" \\\n                            \"realloc %d bytes fail, errno: %d, \" \\\n                            \"error info: %s\", __LINE__, \\\n                            alloc_size + 1, \\\n                            result, STRERROR(result));\n\n                    return result;\n                }\n\n                recv_bytes = alloc_size - *content_len;\n            }\n            else\n            {\n                    sprintf(error_info, \"file: \"__FILE__\", line: %d, \" \\\n                            \"buffer size: %d is too small\", \\\n                            __LINE__, alloc_size);\n                    return ENOSPC;\n            }\n\t\t\t\n\t\t}\n\n\t\tresult = tcprecvdata_ex(sock, *content + *content_len, \\\n\t\t\t\trecv_bytes, network_timeout, &recv_bytes);\n\n\t\t*content_len += recv_bytes;\n\t} while (result == 0);\n\n    do\n    {\n        if (result == ENOTCONN) // means the peer has shutdowned the socket\n        {\n            result = 0;   // success value\n        }\n        else \n\t{\n            sprintf(error_info, \"file: \"__FILE__\", line: %d, \" \\\n                    \"recv data from %s:%d fail, errno: %d, \" \\\n                    \"error info: %s\", __LINE__, domain_name, \\\n                    port, result, STRERROR(result));\n\n            break;\n        }\n\n        *(*content + *content_len) = '\\0';\n        pContent = strstr(*content, \"\\r\\n\\r\\n\");\n\t\t\n        if (pContent == NULL)\n        {\n            sprintf(error_info, \"file: \"__FILE__\", line: %d, \" \\\n                    \"response data from %s:%d is invalid\", \\\n                    __LINE__, domain_name, port);\n\n            result = EINVAL;\n            break;\n        }\n\n        pContent += 4;   // pointer to the next line\n        pSpace = strchr(*content, ' ');\n\t\t\n        if (pSpace == NULL || pSpace >= pContent)\n        {\n            sprintf(error_info, \"file: \"__FILE__\", line: %d, \" \\\n                    \"response data from %s:%d is invalid\", \\\n                    __LINE__, domain_name, port);\n\n            result = EINVAL;\n            break;\n        }\n\n        *http_status = atoi(pSpace + 1);  // http response status: such as http/1.1 200 ok\n        *content_len -= pContent - *content;  // minus the length of status line: http/1.1 200 ok\n        memcpy(*content, pContent, *content_len);  // remove the status line\n        *(*content + *content_len) = '\\0';\n        *error_info = '\\0';\n    } while (0);\n\n\tclose(sock);\n\t\n    if (result != 0 && bNeedAlloc)  // result !=0: means error occured\n    {\n        free(*content);\n        *content = NULL;\n        *content_len = 0;\n    }\n\n\treturn result;\n}\n\n// return the string ip addr by ip name(maybe is digital ip addr or domain addr)\nin_addr_t getIpaddrByName(const char *name, char *buff, const int bufferSize)\n{\n\tstruct in_addr ip_addr;\n\tstruct hostent *ent;\n\tin_addr_t **addr_list;\n\n\tif ((*name >= '0' && *name <= '9') &&   // name is the digital ip address \n\t\tinet_pton(AF_INET, name, &ip_addr) == 1)  // success\n\t{\n\t\tif (buff != NULL)\n\t\t{\n\t\t\tsnprintf(buff, bufferSize, \"%s\", name);\n\t\t}\n\t\t\n\t\treturn ip_addr.s_addr;\n\t}\n\n\tent = gethostbyname(name);\n\t\n\tif (ent == NULL)\n\t{\n\t\treturn INADDR_NONE;\n\t}\n\n    addr_list = (in_addr_t **)ent->h_addr_list;\n\t\n\tif (addr_list[0] == NULL)\n\t{\n\t\treturn INADDR_NONE;\n\t}\n\n\tmemset(&ip_addr, 0, sizeof(ip_addr));\n\tip_addr.s_addr = *(addr_list[0]);\n\t\n\tif (buff != NULL)\n\t{\n\t\tif (inet_ntop(AF_INET, &ip_addr, buff, bufferSize) == NULL)\n\t\t{\n\t\t\t*buff = '\\0';\n\t\t}\n\t}\n\n\treturn ip_addr.s_addr;\n}\n\n\n/** connect to server by non-block mode, auto detect socket block mode\n *  parameters:\n *          sock: the socket, can be block mode\n *          server_ip: ip address of the server\n *          server_port: port of the server\n *          timeout: connect timeout in seconds\n *  return: error no, 0 success, != 0 fail\n*/\n#define connectserverbyip_nb_auto(sock, server_ip, server_port, timeout) \\\n\tconnectserverbyip_nb_ex(sock, server_ip, server_port, timeout, true)\n\n// connect the server by ip , return 0 stands for connect succeed\nint connectserverbyip_nb_ex(int sock, const char *server_ip, \\\n\t\tconst short server_port, const int timeout, \\\n\t\tconst bool auto_detect)\n{\n\tint result;\n\tint flags;\n\tbool needRestore;\n\tsocklen_t len;\n\n#ifdef USE_SELECT\n\tfd_set rset;\n\tfd_set wset;\n\tstruct timeval tval;\n#else\n\tstruct pollfd pollfds;\n#endif\n\n\tstruct sockaddr_in addr;\n\tstruct sockaddr_in6 addr6;\n    void *dest;\n    int size;\n\n    memset(&addr, 0, sizeof(struct sockaddr_in));\n    memset(&addr6, 0, sizeof(struct sockaddr_in6));\n\n    if ((result=setsockaddrbyip(server_ip, server_port, &addr, &addr6,\n                    &dest, &size)) != 0)\n    {\n        return result;\n    }\n\n\tif (auto_detect)\n\t{\n\t\tflags = fcntl(sock, F_GETFL, 0);\n\t\t\n\t\tif (flags < 0)\n\t\t{\n\t\t\treturn errno != 0 ? errno : EACCES;\n\t\t}\n\n\t\tif ((flags & O_NONBLOCK) == 0)\n\t\t{\n\t\t\tif (fcntl(sock, F_SETFL, flags | O_NONBLOCK) < 0)\n\t\t\t{\n\t\t\t\treturn errno != 0 ? errno : EACCES;\n\t\t\t}\n\n\t\t\tneedRestore = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tneedRestore = false;\n\t\t}\n\t}\n\telse\n\t{\n\t\tneedRestore = false;\n\t\tflags = 0;\n\t}\n\n\tdo\n\t{\n\t\tif (connect(sock, (const struct sockaddr*)dest, size) < 0)\n\t\t{\n\t\t\tresult = errno != 0 ? errno : EINPROGRESS;\n\t\t\t\n\t\t\tif (result != EINPROGRESS)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse  // connect return 0: success, -1: failure\n\t\t{\n\t\t\tresult = 0;\n\t\t\tbreak;\n\t\t}\n\n        // after call connect, we call select or poll to get error if error occurs\n\n#ifdef USE_SELECT\n\t\tFD_ZERO(&rset);\n\t\tFD_ZERO(&wset);\n\t\tFD_SET(sock, &rset);\n\t\tFD_SET(sock, &wset);\n\t\ttval.tv_sec = timeout;\n\t\ttval.tv_usec = 0;\n\t\t\n\t\tresult = select(sock+1, &rset, &wset, NULL, \\\n\t\t\t\ttimeout > 0 ? &tval : NULL);\n#else\n\t\tpollfds.fd = sock;\n\t\tpollfds.events = POLLIN | POLLOUT;\n\t\tresult = poll(&pollfds, 1, 1000 * timeout);\n#endif\n\n\t\tif (result == 0)\n\t\t{\n\t\t\tresult = ETIMEDOUT;\n\t\t\tbreak;\n\t\t}\n\t\telse if (result < 0)\n\t\t{\n\t\t\tresult = errno != 0 ? errno : EINTR;\n\t\t\tbreak;\n\t\t}\n\n\t\t// means return value > 0\n\t\tlen = sizeof(result);\n\n\t\t// getsockopt: 0: success, -1:failure\n\t\tif (getsockopt(sock, SOL_SOCKET, SO_ERROR, &result, &len) < 0)\n\t\t{\n\t\t\tresult = errno != 0 ? errno : EACCES; // means failure\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\t\n\t} while (0);\n\n\tif (needRestore)\n\t{\n\t\tfcntl(sock, F_SETFL, flags);\n\t}\n  \n\treturn result;\n}\n\n\n\n/*\nget the content of filename, which is saved to *buff, the size of filename is saved to file_size\n*/\nint getFileContent(const char *filename, char **buff, int64_t *file_size)\n{\n\tint fd;\n\n    if (!isFile(filename))\n    {\n\t\t*buff = NULL;\n\t\t*file_size = 0;\n\t\tlogError(\"file: \"__FILE__\", line: %d, \"\n                \"%s is not a regular file\", __LINE__, filename);\n        return EINVAL;\n    }\n\n\tfd = open(filename, O_RDONLY);\n\t\n\tif (fd < 0)\n\t{\n\t\t*buff = NULL;\n\t\t*file_size = 0;\n\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"open file %s fail, \" \\\n\t\t\t\"errno: %d, error info: %s\", __LINE__, \\\n\t\t\tfilename, errno, STRERROR(errno));\n\t\treturn errno != 0 ? errno : ENOENT;\n\t}\n\n\tif ((*file_size=lseek(fd, 0, SEEK_END)) < 0)\n\t{\n\t\t*buff = NULL;\n\t\t*file_size = 0;\n\t\tclose(fd);\n\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"lseek file %s fail, \" \\\n\t\t\t\"errno: %d, error info: %s\", __LINE__, \\\n\t\t\tfilename, errno, STRERROR(errno));\n\t\treturn errno != 0 ? errno : EIO;\n\t}\n\n\t*buff = (char *)malloc(*file_size + 1);\n\t\n\tif (*buff == NULL)\n\t{\n\t\t*file_size = 0;\n\t\tclose(fd);\n\n\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"malloc %d bytes fail\", __LINE__, \\\n\t\t\t(int)(*file_size + 1));\n\t\treturn errno != 0 ? errno : ENOMEM;\n\t}\n\n\tif (lseek(fd, 0, SEEK_SET) < 0)\n\t{\n\t\t*buff = NULL;\n\t\t*file_size = 0;\n\t\tclose(fd);\n\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"lseek file %s fail, \" \\\n\t\t\t\"errno: %d, error info: %s\", __LINE__, \\\n\t\t\tfilename, errno, STRERROR(errno));\n\t\treturn errno != 0 ? errno : EIO;\n\t}\n\t\n\tif (read(fd, *buff, *file_size) != *file_size)\n\t{\n\t\tfree(*buff);\n\t\t*buff = NULL;\n\t\t*file_size = 0;\n\t\tclose(fd);\n\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\"read from file %s fail, \" \\\n\t\t\t\"errno: %d, error info: %s\", __LINE__, \\\n\t\t\tfilename, errno, STRERROR(errno));\n\t\treturn errno != 0 ? errno : EIO;\n\t}\n\n\t(*buff)[*file_size] = '\\0';\n\tclose(fd);\n\n\treturn 0;\n}\n\nstatic int iniLoadItemsFromBuffer(char *content, IniContext *pContext)\n{\n    char *pContent;\n    char *new_content;\n    int content_len;\n    int new_content_len;\n\n    new_content = content;\n    new_content_len = strlen(content);\n\n    do\n    {\n        pContent = new_content; // after get rid of first #@if, process left #@if\n        content_len = new_content_len;\n\t\t\n        if ((new_content=iniProccessIf(pContent, content_len,\n                        pContext, &new_content_len)) == NULL)\n        {\n            return ENOMEM;\n        }\n\n\t\t\n    } while (new_content != pContent);\n\n    do\n    {\n        pContent = new_content;\n        content_len = new_content_len;\n\t\t\n        if ((new_content=iniProccessFor(pContent, content_len,\n                        pContext, &new_content_len)) == NULL)\n        {\n            return ENOMEM;\n\t\t\n        }\n    } while (new_content != pContent);  // loop processing\n\n    return iniDoLoadItemsFromBuffer(new_content, pContext);\n\t\n}\n\n/*\nfunction: reslove the content, and get rid of #@if and #@endif, save to new buffer\nreturnd by iniProcessIf, such as:\ncontent is:\n#@if xxx\n...abc\n#@endif\n...def\n\nnew buffer is: \n...abc\n...def\nreturned by iniProcessIf\n\n该函数看不懂感觉可以略过不看\n*/\nstatic char *iniProccessIf(char *content, const int content_len,\n        IniContext *pContext, int *new_content_len)\n{\n    char *pStart;\n    char *pEnd;\n    char *pCondition;\n    char *pElse;\n    char *pIfPart;\n    char *pElsePart;\n    int conditionLen;\n    int ifPartLen;\n    int elsePartLen;\n    int copyLen;\n    char *newContent;\n    char *pDest;\n\n    *new_content_len = content_len;\n\t\n    pStart = strstr(content, _PREPROCESS_TAG_STR_IF);\n\t\n    if (pStart == NULL)\n    {\n        return content;\n    }\n\t\n    pCondition = pStart + _PREPROCESS_TAG_LEN_IF;\n    pIfPart = strchr(pCondition, '\\n');\n\t\n    if (pIfPart == NULL)\n    {\n        return content;\n    }\n\t\n    conditionLen = pIfPart - pCondition;\n\n    pEnd = strstr(pIfPart, _PREPROCESS_TAG_STR_ENDIF);\n\t\n    if (pEnd == NULL)\n    {\n        return content;\n    }\n\n    pElse = strstr(pIfPart, _PREPROCESS_TAG_STR_ELSE);\n\t\n    if (pElse == NULL || pElse > pEnd)\n    {\n        ifPartLen = pEnd - pIfPart;\n        pElsePart = NULL;\n        elsePartLen = 0;\n    }\n    else\n    {\n        ifPartLen = pElse - pIfPart;\n        pElsePart = strchr(pElse + _PREPROCESS_TAG_LEN_ELSE, '\\n');\n\t\t\n        if (pElsePart == NULL)\n        {\n            return content;\n        }\n\n        elsePartLen = pEnd - pElsePart;\n    }\n\n    newContent = iniAllocContent(pContext, content_len); // newContent is the buffer address\n\t\n    if (newContent == NULL)\n    {\n        return NULL;\n    }\n\n    pDest = newContent;\n    copyLen = pStart - content;\n\t\n    if (copyLen > 0)\n    {\n        memcpy(pDest, content, copyLen);\n        pDest += copyLen;\n    }\n\n    if (iniCalcCondition(pCondition, conditionLen))\n    {\n        if (ifPartLen > 0)\n        {\n            memcpy(pDest, pIfPart, ifPartLen);\n            pDest += ifPartLen;\n        }\n    }\n    else\n    {\n        if (elsePartLen > 0)\n        {\n            memcpy(pDest, pElsePart, elsePartLen);\n            pDest += elsePartLen;\n        }\n    }\n\n    copyLen = (content + content_len) - (pEnd + _PREPROCESS_TAG_LEN_ENDIF);\n\t\n    if (copyLen > 0)\n    {\n        memcpy(pDest, pEnd + _PREPROCESS_TAG_LEN_ENDIF, copyLen);\n        pDest += copyLen;\n    }\n\n    *pDest = '\\0';   \n    *new_content_len = pDest - newContent;\n    return newContent;\n}\n\n/* process the for block: #@for  ... #@endfor\nget rid of the #@endfor, #@for, and expand the for loop which replace {$i} with the real value\nand saved to new buffer returned by iniProcessFor\n该函数与上一个函数类似\n\n*/\nstatic char *iniProccessFor(char *content, const int content_len,\n        IniContext *pContext, int *new_content_len)\n{\n    char *pStart;\n    char *pEnd;\n    char *pForRange;\n    char *pForBlock;\n    char *id;\n    char tag[80];\n    char value[16];\n    int idLen;\n    int rangeLen;\n    int forBlockLen;\n    int start;\n    int end;\n    int step;\n    int count;\n    int i;\n    int copyLen;\n    int tagLen;\n    int valueLen;\n    char *newContent;\n    char *pDest;\n\n    *new_content_len = content_len;\n    pStart = strstr(content, _PREPROCESS_TAG_STR_FOR);\n\t\n    if (pStart == NULL)\n    {\n        return content;\n    }\n\t\n    pForRange = pStart + _PREPROCESS_TAG_LEN_FOR; // for condition begin\n    pForBlock = strchr(pForRange, '\\n');  // for block begin\n\t\n    if (pForBlock == NULL)\n    {\n        return content;\n    }\n\t\n    rangeLen = pForBlock - pForRange;\n\n    pEnd = strstr(pForBlock, _PREPROCESS_TAG_STR_ENDFOR);\n\t\n    if (pEnd == NULL)\n    {\n        return content;\n    }\n\t\n    forBlockLen = pEnd - pForBlock;  // for block len\n\n    if (iniParseForRange(pForRange, rangeLen, &id, &idLen,\n                &start, &end, &step) != 0)\n    {\n        return NULL;\n    }\n\t\n    if (step == 0)\n    {\n\t\tlogWarning(\"file: \"__FILE__\", line: %d, \"\n                \"invalid step: %d for range: %.*s\", __LINE__,\n                step, rangeLen, pForRange);\n        return NULL;\n    }\n\t\n    count = (end - start) / step;  // how many steps\n\t\n    if (count < 0)\n    {\n\t\tlogWarning(\"file: \"__FILE__\", line: %d, \"\n                \"invalid step: %d for range: %.*s\", __LINE__,\n                step, rangeLen, pForRange);\n        return NULL;\n    }\n\n    newContent = iniAllocContent(pContext, content_len + (forBlockLen + 16) * count);\n\t\n    if (newContent == NULL)\n    {\n        return NULL;\n    }\n\n    pDest = newContent;  // newContent is the buffer addr to stored for block content\n    copyLen = pStart - content;\n\t\n    if (copyLen > 0)\n    {\n        memcpy(pDest, content, copyLen);\n        pDest += copyLen;\n    }\n\n\t// id=\"i\", idLen=1, tag will be \"{$i}\", tagLen will be 4 = strlen(\"{$i}\")\n    tagLen = sprintf(tag, \"{$%.*s}\", idLen, id);\n\t// tagLen is the variable length\n\t\n    for (i=start; i<=end; i+=step)\n    {\n        char *p;\n        char *pRemain;\n        int remainLen;\n\n        valueLen = sprintf(value, \"%d\", i);\n\n        pRemain = pForBlock;\n        remainLen = forBlockLen;\n\t\t\n        while (remainLen >= tagLen)\n        {\n            p = (char *)memmem(pRemain, remainLen, tag, tagLen);\n\t\t\t\n            if (p == NULL)\n            {\n                memcpy(pDest, pRemain, remainLen);\n                pDest += remainLen;\n                break;\n            }\n\n            copyLen = p - pRemain;\n\t\t\t\n            if (copyLen > 0)\n            {\n                memcpy(pDest, pRemain, copyLen);\n                pDest += copyLen;\n            }\n\t\t\t\n            memcpy(pDest, value, valueLen);\n            pDest += valueLen;\n\n            pRemain = p + tagLen;\n            remainLen -= copyLen + tagLen;\n        }\n    }\n\n    copyLen = (content + content_len) - (pEnd + _PREPROCESS_TAG_LEN_ENDFOR);\n\t\n    if (copyLen > 0)\n    {\n        memcpy(pDest, pEnd + _PREPROCESS_TAG_LEN_ENDFOR, copyLen);\n        pDest += copyLen;\n    }\n\n    *pDest = '\\0';\n    *new_content_len = pDest - newContent;\n    return newContent;\n}\n\n//alloc space for the length of content_len, return the buffer addr\nstatic char *iniAllocContent(IniContext *pContext, const int content_len)\n{\n    char *buff;\n    DynamicContents *pDynamicContents;\n    pDynamicContents = iniAllocDynamicContent(pContext);\n\t\n    if (pDynamicContents == NULL)\n    {\n        logError(\"file: \"__FILE__\", line: %d, \"\n                \"malloc dynamic contents fail\", __LINE__);\n        return NULL;\n    }\n\n\t// default: pDynamicContents->count = 0, pDynamicContents->alloc_count=0\n    if (pDynamicContents->count >= pDynamicContents->alloc_count)\n    {\n        int alloc_count;\n        int bytes;\n        char **contents;\n\t\t\n        if (pDynamicContents->alloc_count == 0)\n        {\n            alloc_count = 8;\n        }\n        else\n        {\n            alloc_count = pDynamicContents->alloc_count * 2;\n        }\n\t\t\n        bytes = sizeof(char *) * alloc_count;\n        contents = (char **)malloc(bytes);\n\t\t\n        if (contents == NULL)\n        {\n            logError(\"file: \"__FILE__\", line: %d, \"\n                    \"malloc %d bytes fail\", __LINE__, bytes);\n            return NULL;\n        }\n\t\t\n        memset(contents, 0, bytes);\n\t\t\n        if (pDynamicContents->count > 0)\n        {\n            memcpy(contents, pDynamicContents->contents,\n                    sizeof(char *) * pDynamicContents->count);\n            free(pDynamicContents->contents);\n        }\n\t\t\n        pDynamicContents->contents = contents;\n        pDynamicContents->alloc_count = alloc_count;\n    }\n\n    buff = malloc(content_len);\n\t\n    if (buff == NULL)\n    {\n        logError(\"file: \"__FILE__\", line: %d, \"\n                \"malloc %d bytes fail\", __LINE__, content_len);\n        return NULL;\n    }\n\t\n    pDynamicContents->contents[pDynamicContents->count++] = buff;\n    return buff;\n}\n\n// find pContext in g_dynamic_contents, if find: return, or add pContext to g_dynamic_contents\nstatic DynamicContents *iniAllocDynamicContent(IniContext *pContext)\n{\n    int i;\n\t\n    if (g_dynamic_contents[g_dynamic_content_index].context == pContext)\n    {\n        return &g_dynamic_contents[g_dynamic_content_index].dynamicContents;\n    }\n\n    if (g_dynamic_content_count > 0)\n    {\n        for (i=0; i<_MAX_DYNAMIC_CONTENTS; i++)\n        {\n            if (g_dynamic_contents[i].context == pContext)\n            {\n                g_dynamic_content_index = i;\n                return &g_dynamic_contents[g_dynamic_content_index].dynamicContents;\n            }\n        }\n    }\n\n    if (g_dynamic_content_count == _MAX_DYNAMIC_CONTENTS)\n    {\n        return NULL;\n    }\n\n    for (i=0; i<_MAX_DYNAMIC_CONTENTS; i++)\n    {\n        if (!g_dynamic_contents[i].used)\n        {\n            g_dynamic_contents[i].used = true;\n            g_dynamic_contents[i].context = pContext;\n            g_dynamic_content_index = i;\n            g_dynamic_content_count++;\n            return &g_dynamic_contents[g_dynamic_content_index].dynamicContents;\n        }\n    }\n\n    return NULL;\n}\n\n\n\n/*\nfunction: resolve the format:\n%{LOCAL_IP} in [10.0.11.89,10.0.11.99]\n%{LOCAL_HOST} in [10.0.11.89,10.0.11.99]\nand compare g_local_host_ip_addrs array, check every elem in g_local_host_ip_addrs is\nwhether exists in [10.0.11.89,10.0.11.99] or not, exists return true or return false\n*/\nstatic bool iniCalcCondition(char *condition, const int condition_len)\n{\n    /*\n     * current only support %{VARIABLE} in [x,y,..]\n     * support variables are: LOCAL_IP and LOCAL_HOST\n     * such as: %{LOCAL_IP} in [10.0.11.89,10.0.11.99]\n     **/\n#define _PREPROCESS_VARIABLE_TYPE_LOCAL_IP   1\n#define _PREPROCESS_VARIABLE_TYPE_LOCAL_HOST 2\n#define _PREPROCESS_MAX_LIST_VALUE_COUNT    32\n    char *p;\n    char *pEnd;\n    char *pSquareEnd;\n    char *values[_PREPROCESS_MAX_LIST_VALUE_COUNT];\n    int varType;\n    int count;\n    int i;\n\n    pEnd = condition + condition_len;\n    p = pEnd - 1;\n\t\n    while (p > condition && (*p == ' ' || *p == '\\t'))\n    {\n        p--;\n    }\n\t\n    if (*p != ']')\n    {\n\t\tlogWarning(\"file: \"__FILE__\", line: %d, \"\n                \"expect \\\"]\\\", condition: %.*s\", __LINE__,\n                condition_len, condition);\n        return false;\n    }\n\t\n    pSquareEnd = p;\n\n    p = condition;\n\t\n    while (p < pEnd && (*p == ' ' || *p == '\\t'))\n    {\n        p++;\n    }\n\n    if (pEnd - p < 12)\n    {\n\t\tlogWarning(\"file: \"__FILE__\", line: %d, \"\n                \"unkown condition: %.*s\", __LINE__,\n                condition_len, condition);\n        return false;\n    }\n\n    if (memcmp(p, _PREPROCESS_VARIABLE_STR_LOCAL_IP,\n                _PREPROCESS_VARIABLE_LEN_LOCAL_IP) == 0)\n    {\n        varType = _PREPROCESS_VARIABLE_TYPE_LOCAL_IP;\n        p += _PREPROCESS_VARIABLE_LEN_LOCAL_IP;\n    }\n    else if (memcmp(p, _PREPROCESS_VARIABLE_STR_LOCAL_HOST,\n                _PREPROCESS_VARIABLE_LEN_LOCAL_HOST) == 0)\n    {\n        varType = _PREPROCESS_VARIABLE_TYPE_LOCAL_HOST;\n        p += _PREPROCESS_VARIABLE_LEN_LOCAL_HOST;\n    }\n    else\n    {\n\t\tlogWarning(\"file: \"__FILE__\", line: %d, \"\n                \"unkown condition: %.*s\", __LINE__,\n                condition_len, condition);\n        return false;\n    }\n\n    while (p < pEnd && (*p == ' ' || *p == '\\t'))\n    {\n        p++;\n    }\n\t\n    if (pEnd - p < 4 || memcmp(p, \"in\", 2) != 0)\n    {\n\t\tlogWarning(\"file: \"__FILE__\", line: %d, \"\n                \"expect \\\"in\\\", condition: %.*s\", __LINE__,\n                condition_len, condition);\n        return false;\n    }\n\t\n    p += 2;  //skip in\n\n    while (p < pEnd && (*p == ' ' || *p == '\\t'))\n    {\n        p++;\n    }\n\t\n    if (*p != '[')\n    {\n\t\tlogWarning(\"file: \"__FILE__\", line: %d, \"\n                \"expect \\\"[\\\", condition: %.*s\", __LINE__,\n                condition_len, condition);\n        return false;\n    }\n\n    *pSquareEnd = '\\0';\n    count = splitEx(p + 1, ',', values, _PREPROCESS_MAX_LIST_VALUE_COUNT);\n\t\n    for (i=0; i<count; i++)\n    {\n        values[i] = trim(values[i]);\n    }\n\t\n    if (varType == _PREPROCESS_VARIABLE_TYPE_LOCAL_HOST)\n    {\n        char host[128];\n\t\t\n        if (gethostname(host, sizeof(host)) != 0)\n        {\n            logWarning(\"file: \"__FILE__\", line: %d, \"\n                    \"call gethostname fail, \"\n                    \"errno: %d, error info: %s\", __LINE__,\n                    errno, STRERROR(errno));\n            return false;\n        }\n\t\t\n        return iniMatchValue(host, values, count);\n    }\n    else\n    {\n        const char *local_ip;\n        local_ip = get_first_local_ip();\n\t\t\n        while (local_ip != NULL)\n        {\n            if (iniMatchValue(local_ip, values, count))\n            {\n                return true;\n            }\n\t\t\t\n            local_ip = get_next_local_ip(local_ip);\n        }\n    }\n\n    return false;\n}\n\n\n// find target in array: values, if find return true, else return false\nstatic bool iniMatchValue(const char *target, char **values, const int count)\n{\n    int i;\n    for (i=0; i<count; i++)\n    {\n        if (strcmp(target, values[i]) == 0)\n        {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n// get a integer from str ended by pEnd, nlen is the length of integer\nstatic char *iniGetInteger(char *str, char *pEnd, int *nlen)\n{\n    char *p;\n    char *pNumber;\n\n    p = str;\n\t\n    while (p < pEnd && (*p == ' ' || *p == '\\t'))\n    {\n        p++;\n    }\n\n    pNumber = p;\n\t\n    while (p < pEnd && (*p >= '0' && *p <= '9'))\n    {\n        p++;\n    }\n\n    *nlen = p - pNumber;\n    return pNumber;\n}\n\n// parse the format: #@for i from 0 to 15 step 1\n// *id pointer to i, idLen=1, start=0, end=15, step=1\nstatic int iniParseForRange(char *range, const int range_len,\n        char **id, int *idLen, int *start, int *end, int *step)\n{\n    /**\n     *\n     * #@for i from 0 to 15 step 1\n     */\n\n\n    char *p;\n    char *pEnd;\n    char *pNumber;\n    int nlen;\n\n    pEnd = range + range_len;\n    p = range;\n\t\n    while (p < pEnd && (*p == ' ' || *p == '\\t'))\n    {\n        p++;\n    }\n\n    if (pEnd - p < 10)\n    {\n\t\tlogWarning(\"file: \"__FILE__\", line: %d, \"\n                \"unkown for range: %.*s\", __LINE__,\n                range_len, range);\n        return EINVAL;\n    }\n\n    *id = p;\n\t\n    while (p < pEnd && !(*p == ' ' || *p == '\\t'))\n    {\n        p++;\n    }\n\t\n    *idLen = p - *id;\n\t\n    if (*idLen == 0 || *idLen > 64)\n    {\n\t\tlogWarning(\"file: \"__FILE__\", line: %d, \"\n                \"invalid for range: %.*s\", __LINE__,\n                range_len, range);\n        return EINVAL;\n    }\n\n    if (pEnd - p < 8)\n    {\n\t\tlogWarning(\"file: \"__FILE__\", line: %d, \"\n                \"invalid for range: %.*s\", __LINE__,\n                range_len, range);\n        return EINVAL;\n    }\n\n    p++;\n\t\n    while (p < pEnd && (*p == ' ' || *p == '\\t'))\n    {\n        p++;\n    }\n\t\n    if (!(memcmp(p, _PREPROCESS_TAG_STR_FOR_FROM,\n                    _PREPROCESS_TAG_LEN_FOR_FROM) == 0 &&\n                (*(p+_PREPROCESS_TAG_LEN_FOR_FROM) == ' ' ||\n                 *(p+_PREPROCESS_TAG_LEN_FOR_FROM) == '\\t')))\n    {\n\t\tlogWarning(\"file: \"__FILE__\", line: %d, \"\n                \"invalid for range: %.*s\", __LINE__,\n                range_len, range);\n        return EINVAL;\n    }\n\t\n    p += _PREPROCESS_TAG_LEN_FOR_FROM + 1;\n    pNumber = iniGetInteger(p, pEnd, &nlen);\n\t\n    if (nlen == 0)\n    {\n\t\tlogWarning(\"file: \"__FILE__\", line: %d, \"\n                \"invalid for range: %.*s\", __LINE__,\n                range_len, range);\n        return EINVAL;\n    }\n\t\n    *start = atoi(pNumber);  //atoi meets non-numbers will stop transfer\n    p = pNumber + nlen;\n\n    if (pEnd - p < 4 || !(*p == ' ' || *p == '\\t'))\n    {\n\t\tlogWarning(\"file: \"__FILE__\", line: %d, \"\n                \"invalid for range: %.*s\", __LINE__,\n                range_len, range);\n        return EINVAL;\n    }\n\t\n    p++;\n\t\n    while (p < pEnd && (*p == ' ' || *p == '\\t'))\n    {\n        p++;\n    }\n\t\n    if (!(memcmp(p, _PREPROCESS_TAG_STR_FOR_TO,\n                    _PREPROCESS_TAG_LEN_FOR_TO) == 0 &&\n                (*(p+_PREPROCESS_TAG_LEN_FOR_TO) == ' ' ||\n                 *(p+_PREPROCESS_TAG_LEN_FOR_TO) == '\\t')))\n    {\n\t\tlogWarning(\"file: \"__FILE__\", line: %d, \"\n                \"unkown for range: %.*s\", __LINE__,\n                range_len, range);\n        return EINVAL;\n    }\n\t\n    p += _PREPROCESS_TAG_LEN_FOR_TO + 1;\n    pNumber = iniGetInteger(p, pEnd, &nlen);\n\t\n    if (nlen == 0)\n    {\n\t\tlogWarning(\"file: \"__FILE__\", line: %d, \"\n                \"invalid for range: %.*s\", __LINE__,\n                range_len, range);\n        return EINVAL;\n    }\n\t\n    *end = atoi(pNumber);\n    p = pNumber + nlen;\n\n    if (p == pEnd) // default step is set to 1\n    {\n        *step = 1;\n        return 0;\n    }\n\n    if (!(*p == ' ' || *p == '\\t'))\n    {\n\t\tlogWarning(\"file: \"__FILE__\", line: %d, \"\n                \"invalid for range: %.*s\", __LINE__,\n                range_len, range);\n        return EINVAL;\n    }\n\t\n    while (p < pEnd && (*p == ' ' || *p == '\\t'))\n    {\n        p++;\n    }\n\t\n    if (!(memcmp(p, _PREPROCESS_TAG_STR_FOR_STEP,\n                    _PREPROCESS_TAG_LEN_FOR_STEP) == 0 &&\n                (*(p+_PREPROCESS_TAG_LEN_FOR_STEP) == ' ' ||\n                 *(p+_PREPROCESS_TAG_LEN_FOR_STEP) == '\\t')))\n    {\n\t\tlogWarning(\"file: \"__FILE__\", line: %d, \"\n                \"unkown for range: %.*s\", __LINE__,\n                range_len, range);\n        return EINVAL;\n    }\n\t\n    p += _PREPROCESS_TAG_LEN_FOR_STEP + 1;\n    pNumber = iniGetInteger(p, pEnd, &nlen);\n\t\n    if (nlen == 0)\n    {\n\t\tlogWarning(\"file: \"__FILE__\", line: %d, \"\n                \"invalid for range: %.*s\", __LINE__,\n                range_len, range);\n        return EINVAL;\n    }\n\t\n    *step = atoi(pNumber);\n    p = pNumber + nlen;\n\t\n    while (p < pEnd && (*p == ' ' || *p == '\\t'))\n    {\n        p++;\n    }\n\t\n    if (p != pEnd)\n    {\n\t\tlogWarning(\"file: \"__FILE__\", line: %d, \"\n                \"invalid for range: %.*s\", __LINE__,\n                range_len, range);\n        return EINVAL;\n    }\n\n    return 0;\n}\n\n\n\n// content is the conf file content which has been preProcessed\n// return 0: success\nstatic int iniDoLoadItemsFromBuffer(char *content, IniContext *pContext)\n{\n    AnnotationMap *pAnnoMap;\n\tIniSection *pSection;\n\tIniItem *pItem;\n\tchar *pLine;\n\tchar *pLastEnd;\n\tchar *pEqualChar;\n    char *pItemName;\n    char *pAnnoItemLine;\n\tchar *pIncludeFilename;\n    char *pItemValues[100];\n    char pFuncName[FAST_INI_ITEM_NAME_LEN + 1];\n\tchar full_filename[MAX_PATH_SIZE];\n    int i;\n\tint nLineLen;\n\tint nNameLen;\n    int nItemCnt;\n\tint nValueLen;\n\tint result;\n    int isAnnotation;\n\n\tresult = 0;\n    pAnnoItemLine = NULL;\n    isAnnotation = 0;\n    *pFuncName = '\\0';\n\tpLastEnd = content - 1;\n\tpSection = pContext->current_section;\n    pItem = pSection->items + pSection->count;\n\n\twhile (pLastEnd != NULL)\n\t{\n\t\tpLine = pLastEnd + 1;  // pointer to the begin of a line\n\t\tpLastEnd = strchr(pLine, '\\n'); // pointer to the end of a line\n\t\t\n\t\tif (pLastEnd != NULL)\n\t\t{\n\t\t\t*pLastEnd = '\\0';\n\t\t}\n\n        if (isAnnotation && pLine != pAnnoItemLine)\n        {\n            logWarning(\"file: \"__FILE__\", line: %d, \" \\\n                \"the @function annotation line \" \\\n                \"must follow by key=value line!\", __LINE__);\n            isAnnotation = 0;\n        }\n\n\t\tif (*pLine == '#' && \\\n\t\t\tstrncasecmp(pLine+1, \"include\", 7) == 0 && \\\n\t\t\t(*(pLine+8) == ' ' || *(pLine+8) == '\\t'))\n\t\t{\n\t\t\tpIncludeFilename = strdup(pLine + 9);\n\t\t\t\n\t\t\tif (pIncludeFilename == NULL)\n\t\t\t{\n\t\t\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\t\t\"strdup %d bytes fail\", __LINE__, \\\n\t\t\t\t\t(int)strlen(pLine + 9) + 1);\n\t\t\t\tresult = errno != 0 ? errno : ENOMEM;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\ttrim(pIncludeFilename);\n\t\t\t\n\t\t\tif (strncasecmp(pIncludeFilename, \"http://\", 7) == 0)\n\t\t\t{\n\t\t\t\tsnprintf(full_filename, sizeof(full_filename),\\\n\t\t\t\t\t\"%s\", pIncludeFilename);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (*pIncludeFilename == '/')\n\t\t\t\t{\n\t\t\t\tsnprintf(full_filename, sizeof(full_filename), \\\n\t\t\t\t\t\"%s\", pIncludeFilename);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\tsnprintf(full_filename, sizeof(full_filename), \\\n\t\t\t\t\t\"%s/%s\", pContext->config_path, \\\n\t\t\t\t\t pIncludeFilename);\n\t\t\t\t}\n\n\t\t\t\tif (!fileExists(full_filename))\n\t\t\t\t{\n\t\t\t\t\tlogError(\"file: \"__FILE__\", line: %d, \" \\\n\t\t\t\t\t\t\"include file \\\"%s\\\" not exists, \" \\\n\t\t\t\t\t\t\"line: \\\"%s\\\"\", __LINE__, \\\n\t\t\t\t\t\tpIncludeFilename, pLine);\n\t\t\t\t\tfree(pIncludeFilename);\n\t\t\t\t\tresult = ENOENT;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t\n\t\t\t}\n\n            pContext->current_section = &pContext->global;\n\t\t\tresult = iniDoLoadFromFile(full_filename, pContext); // call again\n\t\t\t\n\t\t\tif (result != 0)\n\t\t\t{\n\t\t\t\tfree(pIncludeFilename);\n\t\t\t\tbreak;\n\t\t\t}\n\n            pContext->current_section = &pContext->global; // 将当前处理的section指向pContext->global\n\t\t\tpSection = pContext->current_section;\n            pItem = pSection->items + pSection->count;  //must re-asign\n\n\t\t\tfree(pIncludeFilename);\n\t\t\tcontinue;\n\t\t}\n        else if ((*pLine == '#' && \\\n            strncasecmp(pLine+1, \"@function\", 9) == 0 && \\\n            (*(pLine+10) == ' ' || *(pLine+10) == '\\t')))  // 是否是@function annotation\n        {\n            if (!pContext->ignore_annotation) \n\t\t\t{\n                nNameLen = strlen(pLine + 11);\n\t\t\t\t\n                if (nNameLen > FAST_INI_ITEM_NAME_LEN)\n                {\n                    nNameLen = FAST_INI_ITEM_NAME_LEN;\n                }\n\t\t\t\t\n                memcpy(pFuncName, pLine + 11, nNameLen);\n                pFuncName[nNameLen] = '\\0';\n                trim(pFuncName);\n\t\t\t\t\n                if ((int)strlen(pFuncName) > 0)\n                {\n                    isAnnotation = 1;\n                    pAnnoItemLine = pLastEnd + 1;\n                }\n                else\n                {\n                    logWarning(\"file: \"__FILE__\", line: %d, \" \\\n                            \"the function name of annotation line is empty\", \\\n                            __LINE__);\n                }\n\t\t\t\t\n            }\n\t\t\t\n            continue;\n\t\t\t\n        }\n\n\t\ttrim(pLine);\n\t\t\n\t\tif (*pLine == '#' || *pLine == '\\0') \n\t\t{\n\t\t\tcontinue;\n\t\t}\n\n\t\tnLineLen = strlen(pLine);\n\t\t\n\t\tif (*pLine == '[' && *(pLine + (nLineLen - 1)) == ']') //section\n\t\t{\n\t\t\tchar *section_name;\n\t\t\tint section_len;\n\n\t\t\t*(pLine + (nLineLen - 1)) = '\\0';\n\t\t\tsection_name = pLine + 1; //skip [\n\n\t\t\ttrim(section_name);\n\t\t\t\n\t\t\tif (*section_name == '\\0') //global section\n\t\t\t{\n\t\t\t\tpContext->current_section = &pContext->global;\n\t\t\t\tpSection = pContext->current_section;\n                pItem = pSection->items + pSection->count;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tsection_len = strlen(section_name);\n\t\t\tpSection = (IniSection *)hash_find(&pContext->sections,\\\n\t\t\t\t\tsection_name, section_len);\n\t\t\t\n\t\t\tif (pSection == NULL)  // not find\n\t\t\t{\n\t\t\t\tpSection = (IniSection *)malloc(sizeof(IniSection));\n\t\t\t\t\n\t\t\t\tif (pSection == NULL)\n\t\t\t\t{\n\t\t\t\t\tresult = errno != 0 ? errno : ENOMEM;\n\t\t\t\t\tlogError(\"file: \"__FILE__\", line: %d, \"\\\n\t\t\t\t\t\t\"malloc %d bytes fail, \" \\\n\t\t\t\t\t\t\"errno: %d, error info: %s\", \\\n\t\t\t\t\t\t__LINE__, \\\n\t\t\t\t\t\t(int)sizeof(IniSection), \\\n\t\t\t\t\t\tresult, STRERROR(result));\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tmemset(pSection, 0, sizeof(IniSection));\n\t\t\t\tresult = hash_insert(&pContext->sections, \\\n\t\t\t\t\t  section_name, section_len, pSection);\n\t\t\t\t\n\t\t\t\tif (result < 0)\n\t\t\t\t{\n\t\t\t\t\tresult *= -1;\n\t\t\t\t\tlogError(\"file: \"__FILE__\", line: %d, \"\\\n\t\t\t\t\t\t\"insert into hash table fail, \"\\\n\t\t\t\t\t\t\"errno: %d, error info: %s\", \\\n\t\t\t\t\t\t__LINE__, result, \\\n\t\t\t\t\t\tSTRERROR(result));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpContext->current_section = pSection; \n                        pItem = pSection->items + pSection->count;\n\t\t\tcontinue;\n\t\t}\n\n\t\tpEqualChar = strchr(pLine, '=');\n\t\t\n\t\tif (pEqualChar == NULL)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\n\t\tnNameLen = pEqualChar - pLine;\n\t\tnValueLen = strlen(pLine) - (nNameLen + 1); // means we can not have ' ' or '\\t' before '=' and after '='\n\t\t\n\t\tif (nNameLen > FAST_INI_ITEM_NAME_LEN)\n\t\t{\n\t\t\tnNameLen = FAST_INI_ITEM_NAME_LEN;\n\t\t}\n\n\t\tif (nValueLen > FAST_INI_ITEM_VALUE_LEN)\n\t\t{\n\t\t\tnValueLen = FAST_INI_ITEM_VALUE_LEN;\n\t\t}\n\n\t\tif (pSection->count >= pSection->alloc_count)\n        {\n            result = remallocSection(pSection, &pItem);\n\t\t\t\n            if (result)\n            {\n                break;\n            }\n\t\t}\n\n\t\tmemcpy(pItem->name, pLine, nNameLen);\n\t\tmemcpy(pItem->value, pEqualChar + 1, nValueLen); // means we can not have ' ' or '\\t' before '=' and after '='\n\n\t\ttrim(pItem->name);  // it allow has space before or after '='\n\t\ttrim(pItem->value);\n\n        if (isAnnotation) // access the global variable: g_annotataionMap and make some process\n        {\n            isAnnotation = 0;\n\n            if (g_annotataionMap == NULL)\n            {\n                logWarning(\"file: \"__FILE__\", line: %d, \" \\\n                    \"not set annotataionMap and (%s) will use \" \\\n                    \"the item value (%s)\", __LINE__, pItem->name,\n                    pItem->value);\n\t\t\t\t\n                pSection->count++;\n                pItem++;\n                continue;\n            }\n\n            nItemCnt = -1;\n            pAnnoMap = g_annotataionMap;\n\t\t\t\n            while (pAnnoMap->func_name)\n            {\n                if (strcmp(pFuncName, pAnnoMap->func_name) == 0)\n                {\n                    if (pAnnoMap->func_init)\n                    {\n                        pAnnoMap->func_init();\n                    }\n\n                    if (pAnnoMap->func_get)\n                    {\n                        nItemCnt = pAnnoMap->func_get(pItem->value, pItemValues, 100);\n                    }\n\t\t\t\t\t\n                    break;\n                }\n\t\t\t\t\n                pAnnoMap++;\n            }\n\n            if (nItemCnt == -1)\n            {\n                logWarning(\"file: \"__FILE__\", line: %d, \" \\\n                    \"not found corresponding annotation function: %s, \" \\\n                    \"\\\"%s\\\" will use the item value \\\"%s\\\"\", __LINE__,\n                    pFuncName, pItem->name, pItem->value);\n                pSection->count++;\n                pItem++;\n                continue;\n            }\n            else if (nItemCnt == 0)\n            {\n                logWarning(\"file: \"__FILE__\", line: %d, \" \\\n                    \"annotation function %s execute fail, \" \\\n                    \"\\\"%s\\\" will use the item value \\\"%s\\\"\", __LINE__,\n                    pFuncName, pItem->name, pItem->value);\n                pSection->count++;\n                pItem++;\n                continue;\n            }\n\n            pItemName = pItem->name;\n            nNameLen = strlen(pItemName);\n\t\t\t\n            for (i = 0; i < nItemCnt; i++)\n            {\n                nValueLen = strlen(pItemValues[i]);\n\t\t\t\t\n                if (nValueLen > FAST_INI_ITEM_VALUE_LEN)\n                {\n                    nValueLen = FAST_INI_ITEM_VALUE_LEN;\n                }\n\t\t\t\t\n                memcpy(pItem->name, pItemName, nNameLen);\n                memcpy(pItem->value, pItemValues[i], nValueLen);\n                pItem->value[nValueLen] = '\\0';\n                pSection->count++;\n                pItem++;\n\t\t\t\t\n                if (pSection->count >= pSection->alloc_count)\n                {\n                    result = remallocSection(pSection, &pItem);\n\t\t\t\t\t\n                    if (result)\n                    {\n                        break;\n                    }\n                }\n\t\t\t\t\n            }\n            continue;\n        }\n\n\t\tpSection->count++;\n\t\tpItem++;\n\t}\n\n\n    // result is 0 means has not error occured\n    \n    if (result == 0 && isAnnotation)\n    {\n        logWarning(\"file: \"__FILE__\", line: %d, \" \\\n            \"the @function annotation line \" \\\n            \"must follow by key=value line!\", __LINE__);\n    }\n\n\treturn result; \n}\n\n// get the rid of white space from the left and right of pStr\nchar *trim(char *pStr)\n{\n\ttrim_right(pStr);\n\ttrim_left(pStr);\n\treturn pStr;\n}\n\n//get rid of the white space from the left of pStr\nchar *trim_left(char *pStr)\n{\n\tchar *p;\n\tchar *pEnd;\n\tint nDestLen;\n\n\tpEnd = pStr + strlen(pStr);\n\t\n\tfor (p=pStr; p<pEnd; p++)\n\t{\n\t\tif (!(' ' == *p|| '\\n' == *p || '\\r' == *p || '\\t' == *p))\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif ( p == pStr)\n\t{\n\t\treturn pStr;\n\t}\n\t\n\tnDestLen = (pEnd - p) + 1; //including \\0\n\tmemmove(pStr, p, nDestLen);\n\n\treturn pStr;\n}\n\n\n// get rid of the white space from the right of pStr\nchar *trim_right(char *pStr)\n{\n\tint len;\n\tchar *p;\n\tchar *pEnd;\n\n\tlen = strlen(pStr);\n\t\n\tif (len == 0)\n\t{\n\t\treturn pStr;\n\t}\n\n\tpEnd = pStr + len - 1;\n\t\n\tfor (p = pEnd;  p>=pStr; p--)\n\t{\n\t\tif (!(' ' == *p || '\\n' == *p || '\\r' == *p || '\\t' == *p))\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (p != pEnd)\n\t{\n\t\t*(p+1) = '\\0';\n\t}\n\n\treturn pStr;\n}\n\n\nbool fileExists(const char *filename)\n{\n\treturn access(filename, 0) == 0;\n}\n\n// allocate enough space for section\nstatic int remallocSection(IniSection *pSection, IniItem **pItem)\n{\n    int bytes, result;\n    IniItem *pNew;\n\n    if (pSection->alloc_count == 0)\n    {\n        pSection->alloc_count = _INIT_ALLOC_ITEM_COUNT;\n    }\n    else\n    {\n        pSection->alloc_count *= 2;\n    }\n\t\n    bytes = sizeof(IniItem) * pSection->alloc_count;\n    pNew = (IniItem *)malloc(bytes);\n\t\n    if (pNew == NULL)\n    {\n        logError(\"file: \"__FILE__\", line: %d, \" \\\n            \"malloc %d bytes fail\", __LINE__, bytes);\n        result = errno != 0 ? errno : ENOMEM;\n        return result;\n    }\n\n    if (pSection->count > 0)\n    {\n        memcpy(pNew, pSection->items,\n                sizeof(IniItem) * pSection->count);\n        free(pSection->items);\n    }\n\n    pSection->items = pNew;\n    *pItem = pSection->items + pSection->count;\n\t\n    memset(*pItem, 0, sizeof(IniItem) * \\\n        (pSection->alloc_count - pSection->count));\n\n    return 0;\n}\n\nvoid *hash_find(HashArray *pHash, const void *key, const int key_len)\n{\n\tunsigned int hash_code;\n\tHashData **ppBucket;\n\tHashData *hash_data;\n\n\thash_code = pHash->hash_func(key, key_len);\n\tppBucket = pHash->buckets + (hash_code % (*pHash->capacity));\n\n\tHASH_LOCK(pHash, ppBucket - pHash->buckets)\n\thash_data = _chain_find_entry(ppBucket, key, key_len, hash_code);\n\tHASH_UNLOCK(pHash, ppBucket - pHash->buckets)\n\n\tif (hash_data != NULL)\n\t{\n\t\treturn hash_data->value;\n\t}\n\telse\n\t{\n\t\treturn NULL;\n\t}\n}\n\n#define HASH_LOCK(pHash, index) \\\n\tif (pHash->lock_count > 0) \\\n\t{ \\\n\t\tpthread_mutex_lock(pHash->locks + (index) % pHash->lock_count); \\\n\t}\n\n#define HASH_UNLOCK(pHash, index) \\\n\tif (pHash->lock_count > 0) \\\n\t{ \\\n\t\tpthread_mutex_unlock(pHash->locks + (index) % pHash->lock_count); \\\n\t}\n\nstatic HashData *_chain_find_entry(HashData **ppBucket, const void *key, \\\n\t\tconst int key_len, const unsigned int hash_code)\n{\n\tHashData *hash_data;\n\n\thash_data = *ppBucket;\n\t\n\twhile (hash_data != NULL)\n\t{\n\t\tif (key_len == hash_data->key_len && \\\n\t\t\tmemcmp(key, hash_data->key, key_len) == 0)\n\t\t{\n\t\t\treturn hash_data;\n\t\t}\n\n\t\thash_data = hash_data->next;\n\t}\n\n\treturn NULL;\n}\n\n#define hash_insert(pHash, key, key_len, value) \\\n\thash_insert_ex(pHash, key, key_len, value, 0, true)\n\nint hash_insert_ex(HashArray *pHash, const void *key, const int key_len, \\\n\t\tvoid *value, const int value_len, const bool needLock)\n{\n\tunsigned int hash_code;\n\tHashData **ppBucket;\n\tHashData *hash_data;\n\tHashData *previous;\n\tchar *pBuff;\n\tint bytes;\n\tint malloc_value_size;\n\n\thash_code = pHash->hash_func(key, key_len);\n\tppBucket = pHash->buckets + (hash_code % (*pHash->capacity));\n\n\tprevious = NULL;\n\n\tif (needLock)\n\t{\n\t\tHASH_LOCK(pHash, ppBucket - pHash->buckets)\n\t}\n\n\thash_data = *ppBucket;\n\t\n\twhile (hash_data != NULL)\n\t{\n\t\tif (key_len == hash_data->key_len && \\\n\t\t\tmemcmp(key, hash_data->key, key_len) == 0)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\n\t\tprevious = hash_data;\n\t\thash_data = hash_data->next;\n\t\t\n\t}\n\n\tif (hash_data != NULL) //exists\n\t{\n\t\tif (!pHash->is_malloc_value)\n\t\t{\n\t\t\thash_data->value_len = value_len;\n\t\t\thash_data->value = (char *)value;\n\t\t\t\n\t\t\tif (needLock)\n\t\t\t{\n\t\t\t\tHASH_UNLOCK(pHash, ppBucket - pHash->buckets)\n\t\t\t}\n\t\t\t\n\t\t\treturn 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (hash_data->malloc_value_size >= value_len && \\\n\t\t\t\t(hash_data->malloc_value_size <= 128 ||\n\t\t\t\t hash_data->malloc_value_size / 2 < value_len))\n\t\t\t{\n\t\t\t\thash_data->value_len = value_len;\n\t\t\t\tmemcpy(hash_data->value, value, value_len);\n\t\t\t\t\n\t\t\t\tif (needLock)\n\t\t\t\t{\n\t\t\t\t\tHASH_UNLOCK(pHash, ppBucket - pHash->buckets)\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tDELETE_FROM_BUCKET(pHash, ppBucket, previous, hash_data)\n\t\t}\n\t}\n\t\n\tif (needLock)\n\t{\n\t\tHASH_UNLOCK(pHash, ppBucket - pHash->buckets)\n\t}\n\n\tif (!pHash->is_malloc_value)\n\t{\n\t\tmalloc_value_size = 0;\n\t}\n\telse\n\t{\n\t\tmalloc_value_size = MEM_ALIGN(value_len);\n\t}\n\n\tbytes = CALC_NODE_MALLOC_BYTES(key_len, malloc_value_size);\n\t\n\tif (pHash->max_bytes > 0 && pHash->bytes_used+bytes > pHash->max_bytes)\n\t{\n\t\treturn -ENOSPC;\n\t}\n\n\tpBuff = (char *)malloc(bytes);\n\t\n\tif (pBuff == NULL)\n\t{\n\t\treturn -ENOMEM;\n\t}\n\n\tpHash->bytes_used += bytes;\n\n\thash_data = (HashData *)pBuff;\n\thash_data->malloc_value_size = malloc_value_size;\n\n\thash_data->key_len = key_len;\n\tmemcpy(hash_data->key, key, key_len);\n#ifdef HASH_STORE_HASH_CODE\n\thash_data->hash_code = hash_code;  // save the hash code for next use, it need not calculate again when next use\n#endif\n\thash_data->value_len = value_len;\n\n\tif (!pHash->is_malloc_value) // means the buffer of value is allocated in outer space, rather than beening allocated in the end of the key buffer\n\t{\n\t\thash_data->value = (char *)value;\n\t}\n\telse\n\t{\n\t\thash_data->value = hash_data->key + hash_data->key_len;\n\t\tmemcpy(hash_data->value, value, value_len);\n\t}\n\n\tif (needLock)\n\t{\n\t\tHASH_LOCK(pHash, ppBucket - pHash->buckets)\n\t\tADD_TO_BUCKET(pHash, ppBucket, hash_data)\n\t\tHASH_UNLOCK(pHash, ppBucket - pHash->buckets)\n\t}\n\telse\n\t{\n\t\tADD_TO_BUCKET(pHash, ppBucket, hash_data)\n\t}\n\n\tif (pHash->load_factor >= 0.10 && (double)pHash->item_count /\n\t\t(double)*pHash->capacity >= pHash->load_factor)\n\t{\n\t\t_rehash(pHash);  // rehash \n\t}\n\n\treturn 1;\n}\n\n// delete a hash_data from pHash\n#define DELETE_FROM_BUCKET(pHash, ppBucket, previous, hash_data) \\\n\tif (previous == NULL) \\\n\t{ \\\n\t\t*ppBucket = hash_data->next; \\\n\t} \\\n\telse \\\n\t{ \\\n\t\tprevious->next = hash_data->next; \\\n\t} \\\n\tpHash->item_count--; \\\n\tpHash->bytes_used -= CALC_NODE_MALLOC_BYTES(hash_data->key_len, \\\n\t\t\t\thash_data->malloc_value_size); \\\n\tfree(hash_data);\n\n\n#define MEM_ALIGN(x)  (((x) + 7) & (~7))\n\n#define CALC_NODE_MALLOC_BYTES(key_len, value_size) \\\n\t\tsizeof(HashData) + key_len + value_size\n\n\n#define ADD_TO_BUCKET(pHash, ppBucket, hash_data) \\\n\thash_data->next = *ppBucket; \\\n\t*ppBucket = hash_data; \\\n\tpHash->item_count++;\n\nstatic int _rehash(HashArray *pHash)\n{\n\tint result;\n\tunsigned int *pOldCapacity;\n\n\tpOldCapacity = pHash->capacity;\n\t\n\tif (pHash->is_malloc_capacity)\n\t{\n\t\tunsigned int *pprime;\n\t\tunsigned int *prime_end;\n\n\t\tpHash->capacity = NULL;\n\n\t\tprime_end = prime_array + PRIME_ARRAY_SIZE;\n\t\t\n\t\tfor (pprime = prime_array; pprime!=prime_end; pprime++)\n\t\t{\n\t\t\tif (*pprime > *pOldCapacity)\n\t\t\t{\n\t\t\t\tpHash->capacity = pprime;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tpHash->capacity++;\n\t}\n\n\tif ((result=_rehash1(pHash, *pOldCapacity, pHash->capacity)) != 0)\n\t{\n\t\tpHash->capacity = pOldCapacity;  //rollback\n\t}\n\telse\n\t{\n\t\tif (pHash->is_malloc_capacity)\n\t\t{\n\t\t\tfree(pOldCapacity);\n\t\t\tpHash->is_malloc_capacity = false;\n\t\t}\n\t}\n\n\t/*printf(\"rehash, old_capacity=%d, new_capacity=%d\\n\", \\\n\t\told_capacity, *pHash->capacity);\n\t*/\n\treturn result;\n}\n\n\n// rehash by new size: *new_capacity\nstatic int _rehash1(HashArray *pHash, const int old_capacity, \\\n\t\tunsigned int *new_capacity)\n{\n\tHashData **old_buckets;\n\tHashData **ppBucket;\n\tHashData **bucket_end;\n\tHashData *hash_data;\n\tHashData *pNext;\n\tint result;\n\n\told_buckets = pHash->buckets;\n\tpHash->capacity = new_capacity;\n\t\n\tif ((result=_hash_alloc_buckets(pHash, old_capacity)) != 0)\n\t{\n\t\tpHash->buckets = old_buckets;\n\t\treturn result;\n\t}\n\n\t//printf(\"old: %d, new: %d\\n\", old_capacity, *pHash->capacity);\n\n\tpHash->item_count = 0;\n\tbucket_end = old_buckets + old_capacity;\n\t\n\tfor (ppBucket=old_buckets; ppBucket<bucket_end; ppBucket++)\n\t{\n\t\tif (*ppBucket == NULL)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\n\t\thash_data = *ppBucket;\n\t\t\n\t\twhile (hash_data != NULL)\n\t\t{\n\t\t\tpNext = hash_data->next;\n\n\t\t\tADD_TO_BUCKET(pHash, (pHash->buckets + \\\n\t\t\t\t(HASH_CODE(pHash, hash_data) % \\\n\t\t\t\t(*pHash->capacity))), hash_data)\n\n\t\t\thash_data = pNext;\n\t\t}\n\t}\n\n\tfree(old_buckets);\n\treturn 0;\n}\n\n\nchar *iniGetStrValue(const char *szSectionName, const char *szItemName, \\\n\t\tIniContext *pContext)\n{\n\tIniItem targetItem;\n\tIniSection *pSection;\n\tIniItem *pItem;\n\n\tINI_FIND_ITEM(szSectionName, szItemName, pContext, pSection, \\\n\t\t\ttargetItem, pItem, NULL)\n\n\tif (pItem == NULL)\n\t{\n\t\treturn NULL;\n\t}\n\telse\n\t{\n\t\treturn pItem->value;\n\t}\n}\n\n#define INI_FIND_ITEM(szSectionName, szItemName, pContext, pSection, \\\n\t\t\ttargetItem, pItem, return_val) \\\n\tif (szSectionName == NULL || *szSectionName == '\\0') \\\n\t{ \\\n\t\tpSection = &pContext->global; \\\n\t} \\\n\telse \\\n\t{ \\\n\t\tpSection = (IniSection *)hash_find(&pContext->sections, \\\n\t\t\t\tszSectionName, strlen(szSectionName)); \\\n\t\tif (pSection == NULL) \\\n\t\t{ \\\n\t\t\treturn return_val; \\\n\t\t} \\\n\t} \\\n\t\\\n\tif (pSection->count <= 0) \\\n\t{ \\\n\t\treturn return_val; \\\n\t} \\\n\t\\\n\tsnprintf(targetItem.name, sizeof(targetItem.name), \"%s\", szItemName); \\\n\tpItem = (IniItem *)bsearch(&targetItem, pSection->items, \\\n\t\t\tpSection->count, sizeof(IniItem), iniCompareByItemName); // 二分查找\n\n\n\nstatic void iniSortItems(IniContext *pContext)\n{\n\tif (pContext->global.count > 1)\n\t{\n\t\tqsort(pContext->global.items, pContext->global.count, \\\n\t\t\tsizeof(IniItem), iniCompareByItemName);\n\t}\n\n\thash_walk(&pContext->sections, iniSortHashData, NULL);\n}\n\n\nstatic int iniCompareByItemName(const void *p1, const void *p2)\n{\n\treturn strcmp(((IniItem *)p1)->name, ((IniItem *)p2)->name);\n}\n\nint hash_walk(HashArray *pHash, HashWalkFunc walkFunc, void *args)\n{\n\tHashData **ppBucket;\n\tHashData **bucket_end;\n\tHashData *hash_data;\n\tint index;\n\tint result;\n\n\tindex = 0;\n\tbucket_end = pHash->buckets + (*pHash->capacity);\n\t\n\tfor (ppBucket=pHash->buckets; ppBucket<bucket_end; ppBucket++)\n\t{\n\t\thash_data = *ppBucket;\n\t\t\n\t\twhile (hash_data != NULL)\n\t\t{\n\t\t\tresult = walkFunc(index, hash_data, args);\n\t\t\t\n\t\t\tif (result != 0)\n\t\t\t{\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\tindex++;\n\t\t\thash_data = hash_data->next;\n\t\t}\n\t}\n\n\treturn 0;\n}\n\nvoid iniFreeContext(IniContext *pContext)\n{\n\tif (pContext == NULL)\n\t{\n\t\treturn;\n\t}\n\n\tif (pContext->global.items != NULL)\n\t{\n\t\tfree(pContext->global.items);\n\t\tmemset(&pContext->global, 0, sizeof(IniSection));\n\t}\n\n\thash_walk(&pContext->sections, iniFreeHashData, NULL);\n\thash_destroy(&pContext->sections);\n\n    iniFreeDynamicContent(pContext);\n}\n\nvoid hash_destroy(HashArray *pHash)\n{\n\tHashData **ppBucket;\n\tHashData **bucket_end;\n\tHashData *pNode;\n\tHashData *pDelete;\n\n\tif (pHash == NULL || pHash->buckets == NULL)\n\t{\n\t\treturn;\n\t}\n\n\tbucket_end = pHash->buckets + (*pHash->capacity);\n\t\n\tfor (ppBucket=pHash->buckets; ppBucket<bucket_end; ppBucket++)\n\t{\n\t\tpNode = *ppBucket;\n\t\t\n\t\twhile (pNode != NULL)\n\t\t{\n\t\t\tpDelete = pNode;\n\t\t\tpNode = pNode->next;\n\t\t\tfree(pDelete);\n\t\t}\n\t}\n\n\tfree(pHash->buckets);\n\tpHash->buckets = NULL;\n\t\n\tif (pHash->is_malloc_capacity)\n\t{\n\t\tfree(pHash->capacity);\n\t\tpHash->capacity = NULL;\n\t\tpHash->is_malloc_capacity = false;\n\t}\n\n\tpHash->item_count = 0;\n\tpHash->bytes_used = 0;\n}\n\nstatic void iniFreeDynamicContent(IniContext *pContext)\n{\n    CDCPair *pCDCPair;\n    DynamicContents *pDynamicContents;\n    int i;\n\n    if (g_dynamic_content_count == 0)\n    {\n        return;\n    }\n\n    if (g_dynamic_contents[g_dynamic_content_index].context == pContext)\n    {\n        pCDCPair = g_dynamic_contents + g_dynamic_content_index;\n    }\n    else\n    {\n        pCDCPair = NULL;\n\t\t\n        for (i=0; i<_MAX_DYNAMIC_CONTENTS; i++)\n        {\n            if (g_dynamic_contents[i].context == pContext)\n            {\n                pCDCPair = g_dynamic_contents + i;\n                break;\n            }\n        }\n\t\t\n        if (pCDCPair == NULL)\n        {\n            return;\n        }\n    }\n\n    pCDCPair->used = false;\n    pCDCPair->context = NULL;\n    pDynamicContents = &pCDCPair->dynamicContents;\n\t\n    if (pDynamicContents->contents != NULL)\n    {\n        for (i=0; i<pDynamicContents->count; i++)\n        {\n            if (pDynamicContents->contents[i] != NULL)\n            {\n                free(pDynamicContents->contents[i]);\n            }\n        }\n\t\t\n        free(pDynamicContents->contents);\n        pDynamicContents->contents = NULL;\n    }\n\t\n    pDynamicContents->alloc_count = 0;\n    pDynamicContents->count = 0;\n    g_dynamic_content_count--;\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"fastdfs配置文件解析模块","published":1,"updated":"2016-11-06T13:18:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwg2v9lh00146al8ew8d43ym","content":"<h3 id=\"加载配置文件解析\"><a href=\"#加载配置文件解析\" class=\"headerlink\" title=\"加载配置文件解析\"></a>加载配置文件解析</h3><p>配置文件有： storage.conf,tracker.conf,mod_fastdfs.conf,http.conf等，配置文件中还可以用#include包含其他配置文件，<br>如#include http.conf。该配置文件解析模块就是读取这些配置文件，然后解析保存，方便得到其中的值。<br>如：<br>result=iniLoadFromFileEx(filename, &amp;iniContext, true)<br>pBasePath = iniGetStrValue(NULL, “base_path”, &amp;iniContext); //该函数就可以得到配置文件中base_path的值<br><a id=\"more\"></a></p>\n<p>相关参考：<a href=\"http://slucx.blog.chinaunix.net/uid-29504236-id-4369694.html\" target=\"_blank\" rel=\"external\">http://slucx.blog.chinaunix.net/uid-29504236-id-4369694.html</a></p>\n<h3 id=\"1-相关数据结构\"><a href=\"#1-相关数据结构\" class=\"headerlink\" title=\"1. 相关数据结构\"></a>1. 相关数据结构</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span></div><div class=\"line\">&#123;</div><div class=\"line\">\tIniSection global;  <span class=\"comment\">//保存全局key,value对</span></div><div class=\"line\">\tHashArray sections;  <span class=\"comment\">//key is session name, and value is IniSection,这里hash数组用来保存[group1]下隶属于group1的&lt;key,value&gt;对</span></div><div class=\"line\">\tIniSection *current_section; <span class=\"comment\">//for load from ini file，当前正在处理的IniSection</span></div><div class=\"line\">\t<span class=\"keyword\">char</span> config_path[MAX_PATH_SIZE];  <span class=\"comment\">//save the config filepath, such as conf file is /etc/data/xxx.conf, config_path is /etc/data</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">bool</span> ignore_annotation; <span class=\"comment\">// 是否忽略注解，看代码时可以略过不看</span></div><div class=\"line\">&#125; IniContext;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span></div><div class=\"line\">&#123;</div><div class=\"line\">\tIniItem *items;</div><div class=\"line\">\t<span class=\"keyword\">int</span> count;  <span class=\"comment\">//item count</span></div><div class=\"line\">\t<span class=\"keyword\">int</span> alloc_count;</div><div class=\"line\">&#125; IniSection;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">char</span> name[FAST_INI_ITEM_NAME_LEN + <span class=\"number\">1</span>];</div><div class=\"line\">\t<span class=\"keyword\">char</span> value[FAST_INI_ITEM_VALUE_LEN + <span class=\"number\">1</span>];</div><div class=\"line\">&#125; IniItem;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> tagHashArray</div><div class=\"line\">&#123;</div><div class=\"line\">\tHashData **buckets;</div><div class=\"line\">\tHashFunc hash_func; <span class=\"comment\">// default is Time33Hash func</span></div><div class=\"line\">\t<span class=\"keyword\">int</span> item_count;  <span class=\"comment\">// is all the item saved in buckets</span></div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> *capacity; <span class=\"comment\">// pointer to prime global aarray, see hash_init_ex func</span></div><div class=\"line\">\t<span class=\"keyword\">double</span> load_factor;</div><div class=\"line\">\t<span class=\"keyword\">int64_t</span> max_bytes; <span class=\"comment\">// means the max size of space which can be used in hashArray</span></div><div class=\"line\">\t<span class=\"keyword\">int64_t</span> bytes_used; <span class=\"comment\">// means the size of have been used, is the *capacity * sizeof(HashData *)，为已经使用的字节数</span></div><div class=\"line\">\t<span class=\"keyword\">bool</span> is_malloc_capacity;</div><div class=\"line\">\t<span class=\"comment\">// is_malloc_value is true: means the buffer of value is allocated in outer space, rather than beening allocated in the end of the key buffer</span></div><div class=\"line\">\t<span class=\"keyword\">bool</span> is_malloc_value;  <span class=\"comment\">// it means hashArray whether  malloc space for value or not, default is false</span></div><div class=\"line\">\t                       </div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> lock_count;</div><div class=\"line\">\t<span class=\"keyword\">pthread_mutex_t</span> *locks;</div><div class=\"line\">&#125; HashArray;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> tagHashData</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> key_len;</div><div class=\"line\">\t<span class=\"keyword\">int</span> value_len;</div><div class=\"line\">\t<span class=\"keyword\">int</span> malloc_value_size;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> HASH_STORE_HASH_CODE</span></div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> hash_code;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">char</span> *value;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> tagHashData *next;</div><div class=\"line\">\t<span class=\"keyword\">char</span> key[<span class=\"number\">0</span>];</div><div class=\"line\">&#125; HashData;   <span class=\"comment\">// 元素</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">int</span> <span class=\"params\">(*HashFunc)</span> <span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *key, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> key_len)</span></span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">static</span> CDCPair g_dynamic_contents[_MAX_DYNAMIC_CONTENTS] = &#123;&#123;<span class=\"literal\">false</span>, <span class=\"literal\">NULL</span>, &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>&#125;&#125;&#125;; <span class=\"comment\">//用一个全局数组来保存已经解析过的文件</span></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">bool</span> used;</div><div class=\"line\">    IniContext *context;</div><div class=\"line\">    DynamicContents dynamicContents;</div><div class=\"line\">&#125; CDCPair;</div></pre></td></tr></table></figure>\n<p>其中的sections是一个hash数组，用到的hash函数默认为Time33Hash函数<br>进行hash插入时，具体见hash_insert函数：<br>hash_code = pHash-&gt;hash_func(key, key_len);<br>ppBucket = pHash-&gt;buckets + (hash_code % (*pHash-&gt;capacity));</p>\n<p>key是section_name, key_len是section_len，而<br>section_name, section_len为”[]”包围的字符串，见iniDoLoadItemsFromBuffer函数<br>如： [group1], section_name, section_len分别为group1和6<br>mod_fastdfs.conf文件中有：<br><figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#[group1]</span></div><div class=\"line\"><span class=\"meta\">#group_name=group1</span></div><div class=\"line\"><span class=\"meta\">#storage_server_port=23000</span></div><div class=\"line\"><span class=\"meta\">#store_path_count=2</span></div><div class=\"line\"><span class=\"meta\">#store_path0=/home/yuqing/fastdfs</span></div><div class=\"line\"><span class=\"meta\">#store_path1=/home/yuqing/fastdfs1</span></div></pre></td></tr></table></figure></p>\n<p>这里的group1就为section_name, section_len是6，此时current_section会指向一个新分配的IniSection，接着会将读取得到的<br>group_name等<key,value>对插入到current_section中去，然后插入到hash数组中去。<br>配置文件模块其实就是读取配置文件，然后初始化IniContext结构体。</key,value></p>\n<h3 id=\"2-下面讲解各个函数\"><a href=\"#2-下面讲解各个函数\" class=\"headerlink\" title=\"2. 下面讲解各个函数\"></a>2. 下面讲解各个函数</h3><figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">调用路径如下：</div><div class=\"line\"><span class=\"function\"><span class=\"title\">iniLoadFromFile</span> -&gt;</span> <span class=\"function\"><span class=\"title\">iniLoadFromFileEx</span> -&gt;</span> iniInitContext、iniDoLoadFromFile、iniSortItems、iniFreeContext</div><div class=\"line\"><span class=\"function\"><span class=\"title\">iniInitContext</span> -&gt;</span> hash_init</div><div class=\"line\"><span class=\"function\"><span class=\"title\">hash_init</span>-&gt;</span><span class=\"function\"><span class=\"title\">hash_init_ex</span>-&gt;</span>_hash_alloc_buckets</div></pre></td></tr></table></figure>\n<figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div><div class=\"line\">338</div><div class=\"line\">339</div><div class=\"line\">340</div><div class=\"line\">341</div><div class=\"line\">342</div><div class=\"line\">343</div><div class=\"line\">344</div><div class=\"line\">345</div><div class=\"line\">346</div><div class=\"line\">347</div><div class=\"line\">348</div><div class=\"line\">349</div><div class=\"line\">350</div><div class=\"line\">351</div><div class=\"line\">352</div><div class=\"line\">353</div><div class=\"line\">354</div><div class=\"line\">355</div><div class=\"line\">356</div><div class=\"line\">357</div><div class=\"line\">358</div><div class=\"line\">359</div><div class=\"line\">360</div><div class=\"line\">361</div><div class=\"line\">362</div><div class=\"line\">363</div><div class=\"line\">364</div><div class=\"line\">365</div><div class=\"line\">366</div><div class=\"line\">367</div><div class=\"line\">368</div><div class=\"line\">369</div><div class=\"line\">370</div><div class=\"line\">371</div><div class=\"line\">372</div><div class=\"line\">373</div><div class=\"line\">374</div><div class=\"line\">375</div><div class=\"line\">376</div><div class=\"line\">377</div><div class=\"line\">378</div><div class=\"line\">379</div><div class=\"line\">380</div><div class=\"line\">381</div><div class=\"line\">382</div><div class=\"line\">383</div><div class=\"line\">384</div><div class=\"line\">385</div><div class=\"line\">386</div><div class=\"line\">387</div><div class=\"line\">388</div><div class=\"line\">389</div><div class=\"line\">390</div><div class=\"line\">391</div><div class=\"line\">392</div><div class=\"line\">393</div><div class=\"line\">394</div><div class=\"line\">395</div><div class=\"line\">396</div><div class=\"line\">397</div><div class=\"line\">398</div><div class=\"line\">399</div><div class=\"line\">400</div><div class=\"line\">401</div><div class=\"line\">402</div><div class=\"line\">403</div><div class=\"line\">404</div><div class=\"line\">405</div><div class=\"line\">406</div><div class=\"line\">407</div><div class=\"line\">408</div><div class=\"line\">409</div><div class=\"line\">410</div><div class=\"line\">411</div><div class=\"line\">412</div><div class=\"line\">413</div><div class=\"line\">414</div><div class=\"line\">415</div><div class=\"line\">416</div><div class=\"line\">417</div><div class=\"line\">418</div><div class=\"line\">419</div><div class=\"line\">420</div><div class=\"line\">421</div><div class=\"line\">422</div><div class=\"line\">423</div><div class=\"line\">424</div><div class=\"line\">425</div><div class=\"line\">426</div><div class=\"line\">427</div><div class=\"line\">428</div><div class=\"line\">429</div><div class=\"line\">430</div><div class=\"line\">431</div><div class=\"line\">432</div><div class=\"line\">433</div><div class=\"line\">434</div><div class=\"line\">435</div><div class=\"line\">436</div><div class=\"line\">437</div><div class=\"line\">438</div><div class=\"line\">439</div><div class=\"line\">440</div><div class=\"line\">441</div><div class=\"line\">442</div><div class=\"line\">443</div><div class=\"line\">444</div><div class=\"line\">445</div><div class=\"line\">446</div><div class=\"line\">447</div><div class=\"line\">448</div><div class=\"line\">449</div><div class=\"line\">450</div><div class=\"line\">451</div><div class=\"line\">452</div><div class=\"line\">453</div><div class=\"line\">454</div><div class=\"line\">455</div><div class=\"line\">456</div><div class=\"line\">457</div><div class=\"line\">458</div><div class=\"line\">459</div><div class=\"line\">460</div><div class=\"line\">461</div><div class=\"line\">462</div><div class=\"line\">463</div><div class=\"line\">464</div><div class=\"line\">465</div><div class=\"line\">466</div><div class=\"line\">467</div><div class=\"line\">468</div><div class=\"line\">469</div><div class=\"line\">470</div><div class=\"line\">471</div><div class=\"line\">472</div><div class=\"line\">473</div><div class=\"line\">474</div><div class=\"line\">475</div><div class=\"line\">476</div><div class=\"line\">477</div><div class=\"line\">478</div><div class=\"line\">479</div><div class=\"line\">480</div><div class=\"line\">481</div><div class=\"line\">482</div><div class=\"line\">483</div><div class=\"line\">484</div><div class=\"line\">485</div><div class=\"line\">486</div><div class=\"line\">487</div><div class=\"line\">488</div><div class=\"line\">489</div><div class=\"line\">490</div><div class=\"line\">491</div><div class=\"line\">492</div><div class=\"line\">493</div><div class=\"line\">494</div><div class=\"line\">495</div><div class=\"line\">496</div><div class=\"line\">497</div><div class=\"line\">498</div><div class=\"line\">499</div><div class=\"line\">500</div><div class=\"line\">501</div><div class=\"line\">502</div><div class=\"line\">503</div><div class=\"line\">504</div><div class=\"line\">505</div><div class=\"line\">506</div><div class=\"line\">507</div><div class=\"line\">508</div><div class=\"line\">509</div><div class=\"line\">510</div><div class=\"line\">511</div><div class=\"line\">512</div><div class=\"line\">513</div><div class=\"line\">514</div><div class=\"line\">515</div><div class=\"line\">516</div><div class=\"line\">517</div><div class=\"line\">518</div><div class=\"line\">519</div><div class=\"line\">520</div><div class=\"line\">521</div><div class=\"line\">522</div><div class=\"line\">523</div><div class=\"line\">524</div><div class=\"line\">525</div><div class=\"line\">526</div><div class=\"line\">527</div><div class=\"line\">528</div><div class=\"line\">529</div><div class=\"line\">530</div><div class=\"line\">531</div><div class=\"line\">532</div><div class=\"line\">533</div><div class=\"line\">534</div><div class=\"line\">535</div><div class=\"line\">536</div><div class=\"line\">537</div><div class=\"line\">538</div><div class=\"line\">539</div><div class=\"line\">540</div><div class=\"line\">541</div><div class=\"line\">542</div><div class=\"line\">543</div><div class=\"line\">544</div><div class=\"line\">545</div><div class=\"line\">546</div><div class=\"line\">547</div><div class=\"line\">548</div><div class=\"line\">549</div><div class=\"line\">550</div><div class=\"line\">551</div><div class=\"line\">552</div><div class=\"line\">553</div><div class=\"line\">554</div><div class=\"line\">555</div><div class=\"line\">556</div><div class=\"line\">557</div><div class=\"line\">558</div><div class=\"line\">559</div><div class=\"line\">560</div><div class=\"line\">561</div><div class=\"line\">562</div><div class=\"line\">563</div><div class=\"line\">564</div><div class=\"line\">565</div><div class=\"line\">566</div><div class=\"line\">567</div><div class=\"line\">568</div><div class=\"line\">569</div><div class=\"line\">570</div><div class=\"line\">571</div><div class=\"line\">572</div><div class=\"line\">573</div><div class=\"line\">574</div><div class=\"line\">575</div><div class=\"line\">576</div><div class=\"line\">577</div><div class=\"line\">578</div><div class=\"line\">579</div><div class=\"line\">580</div><div class=\"line\">581</div><div class=\"line\">582</div><div class=\"line\">583</div><div class=\"line\">584</div><div class=\"line\">585</div><div class=\"line\">586</div><div class=\"line\">587</div><div class=\"line\">588</div><div class=\"line\">589</div><div class=\"line\">590</div><div class=\"line\">591</div><div class=\"line\">592</div><div class=\"line\">593</div><div class=\"line\">594</div><div class=\"line\">595</div><div class=\"line\">596</div><div class=\"line\">597</div><div class=\"line\">598</div><div class=\"line\">599</div><div class=\"line\">600</div><div class=\"line\">601</div><div class=\"line\">602</div><div class=\"line\">603</div><div class=\"line\">604</div><div class=\"line\">605</div><div class=\"line\">606</div><div class=\"line\">607</div><div class=\"line\">608</div><div class=\"line\">609</div><div class=\"line\">610</div><div class=\"line\">611</div><div class=\"line\">612</div><div class=\"line\">613</div><div class=\"line\">614</div><div class=\"line\">615</div><div class=\"line\">616</div><div class=\"line\">617</div><div class=\"line\">618</div><div class=\"line\">619</div><div class=\"line\">620</div><div class=\"line\">621</div><div class=\"line\">622</div><div class=\"line\">623</div><div class=\"line\">624</div><div class=\"line\">625</div><div class=\"line\">626</div><div class=\"line\">627</div><div class=\"line\">628</div><div class=\"line\">629</div><div class=\"line\">630</div><div class=\"line\">631</div><div class=\"line\">632</div><div class=\"line\">633</div><div class=\"line\">634</div><div class=\"line\">635</div><div class=\"line\">636</div><div class=\"line\">637</div><div class=\"line\">638</div><div class=\"line\">639</div><div class=\"line\">640</div><div class=\"line\">641</div><div class=\"line\">642</div><div class=\"line\">643</div><div class=\"line\">644</div><div class=\"line\">645</div><div class=\"line\">646</div><div class=\"line\">647</div><div class=\"line\">648</div><div class=\"line\">649</div><div class=\"line\">650</div><div class=\"line\">651</div><div class=\"line\">652</div><div class=\"line\">653</div><div class=\"line\">654</div><div class=\"line\">655</div><div class=\"line\">656</div><div class=\"line\">657</div><div class=\"line\">658</div><div class=\"line\">659</div><div class=\"line\">660</div><div class=\"line\">661</div><div class=\"line\">662</div><div class=\"line\">663</div><div class=\"line\">664</div><div class=\"line\">665</div><div class=\"line\">666</div><div class=\"line\">667</div><div class=\"line\">668</div><div class=\"line\">669</div><div class=\"line\">670</div><div class=\"line\">671</div><div class=\"line\">672</div><div class=\"line\">673</div><div class=\"line\">674</div><div class=\"line\">675</div><div class=\"line\">676</div><div class=\"line\">677</div><div class=\"line\">678</div><div class=\"line\">679</div><div class=\"line\">680</div><div class=\"line\">681</div><div class=\"line\">682</div><div class=\"line\">683</div><div class=\"line\">684</div><div class=\"line\">685</div><div class=\"line\">686</div><div class=\"line\">687</div><div class=\"line\">688</div><div class=\"line\">689</div><div class=\"line\">690</div><div class=\"line\">691</div><div class=\"line\">692</div><div class=\"line\">693</div><div class=\"line\">694</div><div class=\"line\">695</div><div class=\"line\">696</div><div class=\"line\">697</div><div class=\"line\">698</div><div class=\"line\">699</div><div class=\"line\">700</div><div class=\"line\">701</div><div class=\"line\">702</div><div class=\"line\">703</div><div class=\"line\">704</div><div class=\"line\">705</div><div class=\"line\">706</div><div class=\"line\">707</div><div class=\"line\">708</div><div class=\"line\">709</div><div class=\"line\">710</div><div class=\"line\">711</div><div class=\"line\">712</div><div class=\"line\">713</div><div class=\"line\">714</div><div class=\"line\">715</div><div class=\"line\">716</div><div class=\"line\">717</div><div class=\"line\">718</div><div class=\"line\">719</div><div class=\"line\">720</div><div class=\"line\">721</div><div class=\"line\">722</div><div class=\"line\">723</div><div class=\"line\">724</div><div class=\"line\">725</div><div class=\"line\">726</div><div class=\"line\">727</div><div class=\"line\">728</div><div class=\"line\">729</div><div class=\"line\">730</div><div class=\"line\">731</div><div class=\"line\">732</div><div class=\"line\">733</div><div class=\"line\">734</div><div class=\"line\">735</div><div class=\"line\">736</div><div class=\"line\">737</div><div class=\"line\">738</div><div class=\"line\">739</div><div class=\"line\">740</div><div class=\"line\">741</div><div class=\"line\">742</div><div class=\"line\">743</div><div class=\"line\">744</div><div class=\"line\">745</div><div class=\"line\">746</div><div class=\"line\">747</div><div class=\"line\">748</div><div class=\"line\">749</div><div class=\"line\">750</div><div class=\"line\">751</div><div class=\"line\">752</div><div class=\"line\">753</div><div class=\"line\">754</div><div class=\"line\">755</div><div class=\"line\">756</div><div class=\"line\">757</div><div class=\"line\">758</div><div class=\"line\">759</div><div class=\"line\">760</div><div class=\"line\">761</div><div class=\"line\">762</div><div class=\"line\">763</div><div class=\"line\">764</div><div class=\"line\">765</div><div class=\"line\">766</div><div class=\"line\">767</div><div class=\"line\">768</div><div class=\"line\">769</div><div class=\"line\">770</div><div class=\"line\">771</div><div class=\"line\">772</div><div class=\"line\">773</div><div class=\"line\">774</div><div class=\"line\">775</div><div class=\"line\">776</div><div class=\"line\">777</div><div class=\"line\">778</div><div class=\"line\">779</div><div class=\"line\">780</div><div class=\"line\">781</div><div class=\"line\">782</div><div class=\"line\">783</div><div class=\"line\">784</div><div class=\"line\">785</div><div class=\"line\">786</div><div class=\"line\">787</div><div class=\"line\">788</div><div class=\"line\">789</div><div class=\"line\">790</div><div class=\"line\">791</div><div class=\"line\">792</div><div class=\"line\">793</div><div class=\"line\">794</div><div class=\"line\">795</div><div class=\"line\">796</div><div class=\"line\">797</div><div class=\"line\">798</div><div class=\"line\">799</div><div class=\"line\">800</div><div class=\"line\">801</div><div class=\"line\">802</div><div class=\"line\">803</div><div class=\"line\">804</div><div class=\"line\">805</div><div class=\"line\">806</div><div class=\"line\">807</div><div class=\"line\">808</div><div class=\"line\">809</div><div class=\"line\">810</div><div class=\"line\">811</div><div class=\"line\">812</div><div class=\"line\">813</div><div class=\"line\">814</div><div class=\"line\">815</div><div class=\"line\">816</div><div class=\"line\">817</div><div class=\"line\">818</div><div class=\"line\">819</div><div class=\"line\">820</div><div class=\"line\">821</div><div class=\"line\">822</div><div class=\"line\">823</div><div class=\"line\">824</div><div class=\"line\">825</div><div class=\"line\">826</div><div class=\"line\">827</div><div class=\"line\">828</div><div class=\"line\">829</div><div class=\"line\">830</div><div class=\"line\">831</div><div class=\"line\">832</div><div class=\"line\">833</div><div class=\"line\">834</div><div class=\"line\">835</div><div class=\"line\">836</div><div class=\"line\">837</div><div class=\"line\">838</div><div class=\"line\">839</div><div class=\"line\">840</div><div class=\"line\">841</div><div class=\"line\">842</div><div class=\"line\">843</div><div class=\"line\">844</div><div class=\"line\">845</div><div class=\"line\">846</div><div class=\"line\">847</div><div class=\"line\">848</div><div class=\"line\">849</div><div class=\"line\">850</div><div class=\"line\">851</div><div class=\"line\">852</div><div class=\"line\">853</div><div class=\"line\">854</div><div class=\"line\">855</div><div class=\"line\">856</div><div class=\"line\">857</div><div class=\"line\">858</div><div class=\"line\">859</div><div class=\"line\">860</div><div class=\"line\">861</div><div class=\"line\">862</div><div class=\"line\">863</div><div class=\"line\">864</div><div class=\"line\">865</div><div class=\"line\">866</div><div class=\"line\">867</div><div class=\"line\">868</div><div class=\"line\">869</div><div class=\"line\">870</div><div class=\"line\">871</div><div class=\"line\">872</div><div class=\"line\">873</div><div class=\"line\">874</div><div class=\"line\">875</div><div class=\"line\">876</div><div class=\"line\">877</div><div class=\"line\">878</div><div class=\"line\">879</div><div class=\"line\">880</div><div class=\"line\">881</div><div class=\"line\">882</div><div class=\"line\">883</div><div class=\"line\">884</div><div class=\"line\">885</div><div class=\"line\">886</div><div class=\"line\">887</div><div class=\"line\">888</div><div class=\"line\">889</div><div class=\"line\">890</div><div class=\"line\">891</div><div class=\"line\">892</div><div class=\"line\">893</div><div class=\"line\">894</div><div class=\"line\">895</div><div class=\"line\">896</div><div class=\"line\">897</div><div class=\"line\">898</div><div class=\"line\">899</div><div class=\"line\">900</div><div class=\"line\">901</div><div class=\"line\">902</div><div class=\"line\">903</div><div class=\"line\">904</div><div class=\"line\">905</div><div class=\"line\">906</div><div class=\"line\">907</div><div class=\"line\">908</div><div class=\"line\">909</div><div class=\"line\">910</div><div class=\"line\">911</div><div class=\"line\">912</div><div class=\"line\">913</div><div class=\"line\">914</div><div class=\"line\">915</div><div class=\"line\">916</div><div class=\"line\">917</div><div class=\"line\">918</div><div class=\"line\">919</div><div class=\"line\">920</div><div class=\"line\">921</div><div class=\"line\">922</div><div class=\"line\">923</div><div class=\"line\">924</div><div class=\"line\">925</div><div class=\"line\">926</div><div class=\"line\">927</div><div class=\"line\">928</div><div class=\"line\">929</div><div class=\"line\">930</div><div class=\"line\">931</div><div class=\"line\">932</div><div class=\"line\">933</div><div class=\"line\">934</div><div class=\"line\">935</div><div class=\"line\">936</div><div class=\"line\">937</div><div class=\"line\">938</div><div class=\"line\">939</div><div class=\"line\">940</div><div class=\"line\">941</div><div class=\"line\">942</div><div class=\"line\">943</div><div class=\"line\">944</div><div class=\"line\">945</div><div class=\"line\">946</div><div class=\"line\">947</div><div class=\"line\">948</div><div class=\"line\">949</div><div class=\"line\">950</div><div class=\"line\">951</div><div class=\"line\">952</div><div class=\"line\">953</div><div class=\"line\">954</div><div class=\"line\">955</div><div class=\"line\">956</div><div class=\"line\">957</div><div class=\"line\">958</div><div class=\"line\">959</div><div class=\"line\">960</div><div class=\"line\">961</div><div class=\"line\">962</div><div class=\"line\">963</div><div class=\"line\">964</div><div class=\"line\">965</div><div class=\"line\">966</div><div class=\"line\">967</div><div class=\"line\">968</div><div class=\"line\">969</div><div class=\"line\">970</div><div class=\"line\">971</div><div class=\"line\">972</div><div class=\"line\">973</div><div class=\"line\">974</div><div class=\"line\">975</div><div class=\"line\">976</div><div class=\"line\">977</div><div class=\"line\">978</div><div class=\"line\">979</div><div class=\"line\">980</div><div class=\"line\">981</div><div class=\"line\">982</div><div class=\"line\">983</div><div class=\"line\">984</div><div class=\"line\">985</div><div class=\"line\">986</div><div class=\"line\">987</div><div class=\"line\">988</div><div class=\"line\">989</div><div class=\"line\">990</div><div class=\"line\">991</div><div class=\"line\">992</div><div class=\"line\">993</div><div class=\"line\">994</div><div class=\"line\">995</div><div class=\"line\">996</div><div class=\"line\">997</div><div class=\"line\">998</div><div class=\"line\">999</div><div class=\"line\">1000</div><div class=\"line\">1001</div><div class=\"line\">1002</div><div class=\"line\">1003</div><div class=\"line\">1004</div><div class=\"line\">1005</div><div class=\"line\">1006</div><div class=\"line\">1007</div><div class=\"line\">1008</div><div class=\"line\">1009</div><div class=\"line\">1010</div><div class=\"line\">1011</div><div class=\"line\">1012</div><div class=\"line\">1013</div><div class=\"line\">1014</div><div class=\"line\">1015</div><div class=\"line\">1016</div><div class=\"line\">1017</div><div class=\"line\">1018</div><div class=\"line\">1019</div><div class=\"line\">1020</div><div class=\"line\">1021</div><div class=\"line\">1022</div><div class=\"line\">1023</div><div class=\"line\">1024</div><div class=\"line\">1025</div><div class=\"line\">1026</div><div class=\"line\">1027</div><div class=\"line\">1028</div><div class=\"line\">1029</div><div class=\"line\">1030</div><div class=\"line\">1031</div><div class=\"line\">1032</div><div class=\"line\">1033</div><div class=\"line\">1034</div><div class=\"line\">1035</div><div class=\"line\">1036</div><div class=\"line\">1037</div><div class=\"line\">1038</div><div class=\"line\">1039</div><div class=\"line\">1040</div><div class=\"line\">1041</div><div class=\"line\">1042</div><div class=\"line\">1043</div><div class=\"line\">1044</div><div class=\"line\">1045</div><div class=\"line\">1046</div><div class=\"line\">1047</div><div class=\"line\">1048</div><div class=\"line\">1049</div><div class=\"line\">1050</div><div class=\"line\">1051</div><div class=\"line\">1052</div><div class=\"line\">1053</div><div class=\"line\">1054</div><div class=\"line\">1055</div><div class=\"line\">1056</div><div class=\"line\">1057</div><div class=\"line\">1058</div><div class=\"line\">1059</div><div class=\"line\">1060</div><div class=\"line\">1061</div><div class=\"line\">1062</div><div class=\"line\">1063</div><div class=\"line\">1064</div><div class=\"line\">1065</div><div class=\"line\">1066</div><div class=\"line\">1067</div><div class=\"line\">1068</div><div class=\"line\">1069</div><div class=\"line\">1070</div><div class=\"line\">1071</div><div class=\"line\">1072</div><div class=\"line\">1073</div><div class=\"line\">1074</div><div class=\"line\">1075</div><div class=\"line\">1076</div><div class=\"line\">1077</div><div class=\"line\">1078</div><div class=\"line\">1079</div><div class=\"line\">1080</div><div class=\"line\">1081</div><div class=\"line\">1082</div><div class=\"line\">1083</div><div class=\"line\">1084</div><div class=\"line\">1085</div><div class=\"line\">1086</div><div class=\"line\">1087</div><div class=\"line\">1088</div><div class=\"line\">1089</div><div class=\"line\">1090</div><div class=\"line\">1091</div><div class=\"line\">1092</div><div class=\"line\">1093</div><div class=\"line\">1094</div><div class=\"line\">1095</div><div class=\"line\">1096</div><div class=\"line\">1097</div><div class=\"line\">1098</div><div class=\"line\">1099</div><div class=\"line\">1100</div><div class=\"line\">1101</div><div class=\"line\">1102</div><div class=\"line\">1103</div><div class=\"line\">1104</div><div class=\"line\">1105</div><div class=\"line\">1106</div><div class=\"line\">1107</div><div class=\"line\">1108</div><div class=\"line\">1109</div><div class=\"line\">1110</div><div class=\"line\">1111</div><div class=\"line\">1112</div><div class=\"line\">1113</div><div class=\"line\">1114</div><div class=\"line\">1115</div><div class=\"line\">1116</div><div class=\"line\">1117</div><div class=\"line\">1118</div><div class=\"line\">1119</div><div class=\"line\">1120</div><div class=\"line\">1121</div><div class=\"line\">1122</div><div class=\"line\">1123</div><div class=\"line\">1124</div><div class=\"line\">1125</div><div class=\"line\">1126</div><div class=\"line\">1127</div><div class=\"line\">1128</div><div class=\"line\">1129</div><div class=\"line\">1130</div><div class=\"line\">1131</div><div class=\"line\">1132</div><div class=\"line\">1133</div><div class=\"line\">1134</div><div class=\"line\">1135</div><div class=\"line\">1136</div><div class=\"line\">1137</div><div class=\"line\">1138</div><div class=\"line\">1139</div><div class=\"line\">1140</div><div class=\"line\">1141</div><div class=\"line\">1142</div><div class=\"line\">1143</div><div class=\"line\">1144</div><div class=\"line\">1145</div><div class=\"line\">1146</div><div class=\"line\">1147</div><div class=\"line\">1148</div><div class=\"line\">1149</div><div class=\"line\">1150</div><div class=\"line\">1151</div><div class=\"line\">1152</div><div class=\"line\">1153</div><div class=\"line\">1154</div><div class=\"line\">1155</div><div class=\"line\">1156</div><div class=\"line\">1157</div><div class=\"line\">1158</div><div class=\"line\">1159</div><div class=\"line\">1160</div><div class=\"line\">1161</div><div class=\"line\">1162</div><div class=\"line\">1163</div><div class=\"line\">1164</div><div class=\"line\">1165</div><div class=\"line\">1166</div><div class=\"line\">1167</div><div class=\"line\">1168</div><div class=\"line\">1169</div><div class=\"line\">1170</div><div class=\"line\">1171</div><div class=\"line\">1172</div><div class=\"line\">1173</div><div class=\"line\">1174</div><div class=\"line\">1175</div><div class=\"line\">1176</div><div class=\"line\">1177</div><div class=\"line\">1178</div><div class=\"line\">1179</div><div class=\"line\">1180</div><div class=\"line\">1181</div><div class=\"line\">1182</div><div class=\"line\">1183</div><div class=\"line\">1184</div><div class=\"line\">1185</div><div class=\"line\">1186</div><div class=\"line\">1187</div><div class=\"line\">1188</div><div class=\"line\">1189</div><div class=\"line\">1190</div><div class=\"line\">1191</div><div class=\"line\">1192</div><div class=\"line\">1193</div><div class=\"line\">1194</div><div class=\"line\">1195</div><div class=\"line\">1196</div><div class=\"line\">1197</div><div class=\"line\">1198</div><div class=\"line\">1199</div><div class=\"line\">1200</div><div class=\"line\">1201</div><div class=\"line\">1202</div><div class=\"line\">1203</div><div class=\"line\">1204</div><div class=\"line\">1205</div><div class=\"line\">1206</div><div class=\"line\">1207</div><div class=\"line\">1208</div><div class=\"line\">1209</div><div class=\"line\">1210</div><div class=\"line\">1211</div><div class=\"line\">1212</div><div class=\"line\">1213</div><div class=\"line\">1214</div><div class=\"line\">1215</div><div class=\"line\">1216</div><div class=\"line\">1217</div><div class=\"line\">1218</div><div class=\"line\">1219</div><div class=\"line\">1220</div><div class=\"line\">1221</div><div class=\"line\">1222</div><div class=\"line\">1223</div><div class=\"line\">1224</div><div class=\"line\">1225</div><div class=\"line\">1226</div><div class=\"line\">1227</div><div class=\"line\">1228</div><div class=\"line\">1229</div><div class=\"line\">1230</div><div class=\"line\">1231</div><div class=\"line\">1232</div><div class=\"line\">1233</div><div class=\"line\">1234</div><div class=\"line\">1235</div><div class=\"line\">1236</div><div class=\"line\">1237</div><div class=\"line\">1238</div><div class=\"line\">1239</div><div class=\"line\">1240</div><div class=\"line\">1241</div><div class=\"line\">1242</div><div class=\"line\">1243</div><div class=\"line\">1244</div><div class=\"line\">1245</div><div class=\"line\">1246</div><div class=\"line\">1247</div><div class=\"line\">1248</div><div class=\"line\">1249</div><div class=\"line\">1250</div><div class=\"line\">1251</div><div class=\"line\">1252</div><div class=\"line\">1253</div><div class=\"line\">1254</div><div class=\"line\">1255</div><div class=\"line\">1256</div><div class=\"line\">1257</div><div class=\"line\">1258</div><div class=\"line\">1259</div><div class=\"line\">1260</div><div class=\"line\">1261</div><div class=\"line\">1262</div><div class=\"line\">1263</div><div class=\"line\">1264</div><div class=\"line\">1265</div><div class=\"line\">1266</div><div class=\"line\">1267</div><div class=\"line\">1268</div><div class=\"line\">1269</div><div class=\"line\">1270</div><div class=\"line\">1271</div><div class=\"line\">1272</div><div class=\"line\">1273</div><div class=\"line\">1274</div><div class=\"line\">1275</div><div class=\"line\">1276</div><div class=\"line\">1277</div><div class=\"line\">1278</div><div class=\"line\">1279</div><div class=\"line\">1280</div><div class=\"line\">1281</div><div class=\"line\">1282</div><div class=\"line\">1283</div><div class=\"line\">1284</div><div class=\"line\">1285</div><div class=\"line\">1286</div><div class=\"line\">1287</div><div class=\"line\">1288</div><div class=\"line\">1289</div><div class=\"line\">1290</div><div class=\"line\">1291</div><div class=\"line\">1292</div><div class=\"line\">1293</div><div class=\"line\">1294</div><div class=\"line\">1295</div><div class=\"line\">1296</div><div class=\"line\">1297</div><div class=\"line\">1298</div><div class=\"line\">1299</div><div class=\"line\">1300</div><div class=\"line\">1301</div><div class=\"line\">1302</div><div class=\"line\">1303</div><div class=\"line\">1304</div><div class=\"line\">1305</div><div class=\"line\">1306</div><div class=\"line\">1307</div><div class=\"line\">1308</div><div class=\"line\">1309</div><div class=\"line\">1310</div><div class=\"line\">1311</div><div class=\"line\">1312</div><div class=\"line\">1313</div><div class=\"line\">1314</div><div class=\"line\">1315</div><div class=\"line\">1316</div><div class=\"line\">1317</div><div class=\"line\">1318</div><div class=\"line\">1319</div><div class=\"line\">1320</div><div class=\"line\">1321</div><div class=\"line\">1322</div><div class=\"line\">1323</div><div class=\"line\">1324</div><div class=\"line\">1325</div><div class=\"line\">1326</div><div class=\"line\">1327</div><div class=\"line\">1328</div><div class=\"line\">1329</div><div class=\"line\">1330</div><div class=\"line\">1331</div><div class=\"line\">1332</div><div class=\"line\">1333</div><div class=\"line\">1334</div><div class=\"line\">1335</div><div class=\"line\">1336</div><div class=\"line\">1337</div><div class=\"line\">1338</div><div class=\"line\">1339</div><div class=\"line\">1340</div><div class=\"line\">1341</div><div class=\"line\">1342</div><div class=\"line\">1343</div><div class=\"line\">1344</div><div class=\"line\">1345</div><div class=\"line\">1346</div><div class=\"line\">1347</div><div class=\"line\">1348</div><div class=\"line\">1349</div><div class=\"line\">1350</div><div class=\"line\">1351</div><div class=\"line\">1352</div><div class=\"line\">1353</div><div class=\"line\">1354</div><div class=\"line\">1355</div><div class=\"line\">1356</div><div class=\"line\">1357</div><div class=\"line\">1358</div><div class=\"line\">1359</div><div class=\"line\">1360</div><div class=\"line\">1361</div><div class=\"line\">1362</div><div class=\"line\">1363</div><div class=\"line\">1364</div><div class=\"line\">1365</div><div class=\"line\">1366</div><div class=\"line\">1367</div><div class=\"line\">1368</div><div class=\"line\">1369</div><div class=\"line\">1370</div><div class=\"line\">1371</div><div class=\"line\">1372</div><div class=\"line\">1373</div><div class=\"line\">1374</div><div class=\"line\">1375</div><div class=\"line\">1376</div><div class=\"line\">1377</div><div class=\"line\">1378</div><div class=\"line\">1379</div><div class=\"line\">1380</div><div class=\"line\">1381</div><div class=\"line\">1382</div><div class=\"line\">1383</div><div class=\"line\">1384</div><div class=\"line\">1385</div><div class=\"line\">1386</div><div class=\"line\">1387</div><div class=\"line\">1388</div><div class=\"line\">1389</div><div class=\"line\">1390</div><div class=\"line\">1391</div><div class=\"line\">1392</div><div class=\"line\">1393</div><div class=\"line\">1394</div><div class=\"line\">1395</div><div class=\"line\">1396</div><div class=\"line\">1397</div><div class=\"line\">1398</div><div class=\"line\">1399</div><div class=\"line\">1400</div><div class=\"line\">1401</div><div class=\"line\">1402</div><div class=\"line\">1403</div><div class=\"line\">1404</div><div class=\"line\">1405</div><div class=\"line\">1406</div><div class=\"line\">1407</div><div class=\"line\">1408</div><div class=\"line\">1409</div><div class=\"line\">1410</div><div class=\"line\">1411</div><div class=\"line\">1412</div><div class=\"line\">1413</div><div class=\"line\">1414</div><div class=\"line\">1415</div><div class=\"line\">1416</div><div class=\"line\">1417</div><div class=\"line\">1418</div><div class=\"line\">1419</div><div class=\"line\">1420</div><div class=\"line\">1421</div><div class=\"line\">1422</div><div class=\"line\">1423</div><div class=\"line\">1424</div><div class=\"line\">1425</div><div class=\"line\">1426</div><div class=\"line\">1427</div><div class=\"line\">1428</div><div class=\"line\">1429</div><div class=\"line\">1430</div><div class=\"line\">1431</div><div class=\"line\">1432</div><div class=\"line\">1433</div><div class=\"line\">1434</div><div class=\"line\">1435</div><div class=\"line\">1436</div><div class=\"line\">1437</div><div class=\"line\">1438</div><div class=\"line\">1439</div><div class=\"line\">1440</div><div class=\"line\">1441</div><div class=\"line\">1442</div><div class=\"line\">1443</div><div class=\"line\">1444</div><div class=\"line\">1445</div><div class=\"line\">1446</div><div class=\"line\">1447</div><div class=\"line\">1448</div><div class=\"line\">1449</div><div class=\"line\">1450</div><div class=\"line\">1451</div><div class=\"line\">1452</div><div class=\"line\">1453</div><div class=\"line\">1454</div><div class=\"line\">1455</div><div class=\"line\">1456</div><div class=\"line\">1457</div><div class=\"line\">1458</div><div class=\"line\">1459</div><div class=\"line\">1460</div><div class=\"line\">1461</div><div class=\"line\">1462</div><div class=\"line\">1463</div><div class=\"line\">1464</div><div class=\"line\">1465</div><div class=\"line\">1466</div><div class=\"line\">1467</div><div class=\"line\">1468</div><div class=\"line\">1469</div><div class=\"line\">1470</div><div class=\"line\">1471</div><div class=\"line\">1472</div><div class=\"line\">1473</div><div class=\"line\">1474</div><div class=\"line\">1475</div><div class=\"line\">1476</div><div class=\"line\">1477</div><div class=\"line\">1478</div><div class=\"line\">1479</div><div class=\"line\">1480</div><div class=\"line\">1481</div><div class=\"line\">1482</div><div class=\"line\">1483</div><div class=\"line\">1484</div><div class=\"line\">1485</div><div class=\"line\">1486</div><div class=\"line\">1487</div><div class=\"line\">1488</div><div class=\"line\">1489</div><div class=\"line\">1490</div><div class=\"line\">1491</div><div class=\"line\">1492</div><div class=\"line\">1493</div><div class=\"line\">1494</div><div class=\"line\">1495</div><div class=\"line\">1496</div><div class=\"line\">1497</div><div class=\"line\">1498</div><div class=\"line\">1499</div><div class=\"line\">1500</div><div class=\"line\">1501</div><div class=\"line\">1502</div><div class=\"line\">1503</div><div class=\"line\">1504</div><div class=\"line\">1505</div><div class=\"line\">1506</div><div class=\"line\">1507</div><div class=\"line\">1508</div><div class=\"line\">1509</div><div class=\"line\">1510</div><div class=\"line\">1511</div><div class=\"line\">1512</div><div class=\"line\">1513</div><div class=\"line\">1514</div><div class=\"line\">1515</div><div class=\"line\">1516</div><div class=\"line\">1517</div><div class=\"line\">1518</div><div class=\"line\">1519</div><div class=\"line\">1520</div><div class=\"line\">1521</div><div class=\"line\">1522</div><div class=\"line\">1523</div><div class=\"line\">1524</div><div class=\"line\">1525</div><div class=\"line\">1526</div><div class=\"line\">1527</div><div class=\"line\">1528</div><div class=\"line\">1529</div><div class=\"line\">1530</div><div class=\"line\">1531</div><div class=\"line\">1532</div><div class=\"line\">1533</div><div class=\"line\">1534</div><div class=\"line\">1535</div><div class=\"line\">1536</div><div class=\"line\">1537</div><div class=\"line\">1538</div><div class=\"line\">1539</div><div class=\"line\">1540</div><div class=\"line\">1541</div><div class=\"line\">1542</div><div class=\"line\">1543</div><div class=\"line\">1544</div><div class=\"line\">1545</div><div class=\"line\">1546</div><div class=\"line\">1547</div><div class=\"line\">1548</div><div class=\"line\">1549</div><div class=\"line\">1550</div><div class=\"line\">1551</div><div class=\"line\">1552</div><div class=\"line\">1553</div><div class=\"line\">1554</div><div class=\"line\">1555</div><div class=\"line\">1556</div><div class=\"line\">1557</div><div class=\"line\">1558</div><div class=\"line\">1559</div><div class=\"line\">1560</div><div class=\"line\">1561</div><div class=\"line\">1562</div><div class=\"line\">1563</div><div class=\"line\">1564</div><div class=\"line\">1565</div><div class=\"line\">1566</div><div class=\"line\">1567</div><div class=\"line\">1568</div><div class=\"line\">1569</div><div class=\"line\">1570</div><div class=\"line\">1571</div><div class=\"line\">1572</div><div class=\"line\">1573</div><div class=\"line\">1574</div><div class=\"line\">1575</div><div class=\"line\">1576</div><div class=\"line\">1577</div><div class=\"line\">1578</div><div class=\"line\">1579</div><div class=\"line\">1580</div><div class=\"line\">1581</div><div class=\"line\">1582</div><div class=\"line\">1583</div><div class=\"line\">1584</div><div class=\"line\">1585</div><div class=\"line\">1586</div><div class=\"line\">1587</div><div class=\"line\">1588</div><div class=\"line\">1589</div><div class=\"line\">1590</div><div class=\"line\">1591</div><div class=\"line\">1592</div><div class=\"line\">1593</div><div class=\"line\">1594</div><div class=\"line\">1595</div><div class=\"line\">1596</div><div class=\"line\">1597</div><div class=\"line\">1598</div><div class=\"line\">1599</div><div class=\"line\">1600</div><div class=\"line\">1601</div><div class=\"line\">1602</div><div class=\"line\">1603</div><div class=\"line\">1604</div><div class=\"line\">1605</div><div class=\"line\">1606</div><div class=\"line\">1607</div><div class=\"line\">1608</div><div class=\"line\">1609</div><div class=\"line\">1610</div><div class=\"line\">1611</div><div class=\"line\">1612</div><div class=\"line\">1613</div><div class=\"line\">1614</div><div class=\"line\">1615</div><div class=\"line\">1616</div><div class=\"line\">1617</div><div class=\"line\">1618</div><div class=\"line\">1619</div><div class=\"line\">1620</div><div class=\"line\">1621</div><div class=\"line\">1622</div><div class=\"line\">1623</div><div class=\"line\">1624</div><div class=\"line\">1625</div><div class=\"line\">1626</div><div class=\"line\">1627</div><div class=\"line\">1628</div><div class=\"line\">1629</div><div class=\"line\">1630</div><div class=\"line\">1631</div><div class=\"line\">1632</div><div class=\"line\">1633</div><div class=\"line\">1634</div><div class=\"line\">1635</div><div class=\"line\">1636</div><div class=\"line\">1637</div><div class=\"line\">1638</div><div class=\"line\">1639</div><div class=\"line\">1640</div><div class=\"line\">1641</div><div class=\"line\">1642</div><div class=\"line\">1643</div><div class=\"line\">1644</div><div class=\"line\">1645</div><div class=\"line\">1646</div><div class=\"line\">1647</div><div class=\"line\">1648</div><div class=\"line\">1649</div><div class=\"line\">1650</div><div class=\"line\">1651</div><div class=\"line\">1652</div><div class=\"line\">1653</div><div class=\"line\">1654</div><div class=\"line\">1655</div><div class=\"line\">1656</div><div class=\"line\">1657</div><div class=\"line\">1658</div><div class=\"line\">1659</div><div class=\"line\">1660</div><div class=\"line\">1661</div><div class=\"line\">1662</div><div class=\"line\">1663</div><div class=\"line\">1664</div><div class=\"line\">1665</div><div class=\"line\">1666</div><div class=\"line\">1667</div><div class=\"line\">1668</div><div class=\"line\">1669</div><div class=\"line\">1670</div><div class=\"line\">1671</div><div class=\"line\">1672</div><div class=\"line\">1673</div><div class=\"line\">1674</div><div class=\"line\">1675</div><div class=\"line\">1676</div><div class=\"line\">1677</div><div class=\"line\">1678</div><div class=\"line\">1679</div><div class=\"line\">1680</div><div class=\"line\">1681</div><div class=\"line\">1682</div><div class=\"line\">1683</div><div class=\"line\">1684</div><div class=\"line\">1685</div><div class=\"line\">1686</div><div class=\"line\">1687</div><div class=\"line\">1688</div><div class=\"line\">1689</div><div class=\"line\">1690</div><div class=\"line\">1691</div><div class=\"line\">1692</div><div class=\"line\">1693</div><div class=\"line\">1694</div><div class=\"line\">1695</div><div class=\"line\">1696</div><div class=\"line\">1697</div><div class=\"line\">1698</div><div class=\"line\">1699</div><div class=\"line\">1700</div><div class=\"line\">1701</div><div class=\"line\">1702</div><div class=\"line\">1703</div><div class=\"line\">1704</div><div class=\"line\">1705</div><div class=\"line\">1706</div><div class=\"line\">1707</div><div class=\"line\">1708</div><div class=\"line\">1709</div><div class=\"line\">1710</div><div class=\"line\">1711</div><div class=\"line\">1712</div><div class=\"line\">1713</div><div class=\"line\">1714</div><div class=\"line\">1715</div><div class=\"line\">1716</div><div class=\"line\">1717</div><div class=\"line\">1718</div><div class=\"line\">1719</div><div class=\"line\">1720</div><div class=\"line\">1721</div><div class=\"line\">1722</div><div class=\"line\">1723</div><div class=\"line\">1724</div><div class=\"line\">1725</div><div class=\"line\">1726</div><div class=\"line\">1727</div><div class=\"line\">1728</div><div class=\"line\">1729</div><div class=\"line\">1730</div><div class=\"line\">1731</div><div class=\"line\">1732</div><div class=\"line\">1733</div><div class=\"line\">1734</div><div class=\"line\">1735</div><div class=\"line\">1736</div><div class=\"line\">1737</div><div class=\"line\">1738</div><div class=\"line\">1739</div><div class=\"line\">1740</div><div class=\"line\">1741</div><div class=\"line\">1742</div><div class=\"line\">1743</div><div class=\"line\">1744</div><div class=\"line\">1745</div><div class=\"line\">1746</div><div class=\"line\">1747</div><div class=\"line\">1748</div><div class=\"line\">1749</div><div class=\"line\">1750</div><div class=\"line\">1751</div><div class=\"line\">1752</div><div class=\"line\">1753</div><div class=\"line\">1754</div><div class=\"line\">1755</div><div class=\"line\">1756</div><div class=\"line\">1757</div><div class=\"line\">1758</div><div class=\"line\">1759</div><div class=\"line\">1760</div><div class=\"line\">1761</div><div class=\"line\">1762</div><div class=\"line\">1763</div><div class=\"line\">1764</div><div class=\"line\">1765</div><div class=\"line\">1766</div><div class=\"line\">1767</div><div class=\"line\">1768</div><div class=\"line\">1769</div><div class=\"line\">1770</div><div class=\"line\">1771</div><div class=\"line\">1772</div><div class=\"line\">1773</div><div class=\"line\">1774</div><div class=\"line\">1775</div><div class=\"line\">1776</div><div class=\"line\">1777</div><div class=\"line\">1778</div><div class=\"line\">1779</div><div class=\"line\">1780</div><div class=\"line\">1781</div><div class=\"line\">1782</div><div class=\"line\">1783</div><div class=\"line\">1784</div><div class=\"line\">1785</div><div class=\"line\">1786</div><div class=\"line\">1787</div><div class=\"line\">1788</div><div class=\"line\">1789</div><div class=\"line\">1790</div><div class=\"line\">1791</div><div class=\"line\">1792</div><div class=\"line\">1793</div><div class=\"line\">1794</div><div class=\"line\">1795</div><div class=\"line\">1796</div><div class=\"line\">1797</div><div class=\"line\">1798</div><div class=\"line\">1799</div><div class=\"line\">1800</div><div class=\"line\">1801</div><div class=\"line\">1802</div><div class=\"line\">1803</div><div class=\"line\">1804</div><div class=\"line\">1805</div><div class=\"line\">1806</div><div class=\"line\">1807</div><div class=\"line\">1808</div><div class=\"line\">1809</div><div class=\"line\">1810</div><div class=\"line\">1811</div><div class=\"line\">1812</div><div class=\"line\">1813</div><div class=\"line\">1814</div><div class=\"line\">1815</div><div class=\"line\">1816</div><div class=\"line\">1817</div><div class=\"line\">1818</div><div class=\"line\">1819</div><div class=\"line\">1820</div><div class=\"line\">1821</div><div class=\"line\">1822</div><div class=\"line\">1823</div><div class=\"line\">1824</div><div class=\"line\">1825</div><div class=\"line\">1826</div><div class=\"line\">1827</div><div class=\"line\">1828</div><div class=\"line\">1829</div><div class=\"line\">1830</div><div class=\"line\">1831</div><div class=\"line\">1832</div><div class=\"line\">1833</div><div class=\"line\">1834</div><div class=\"line\">1835</div><div class=\"line\">1836</div><div class=\"line\">1837</div><div class=\"line\">1838</div><div class=\"line\">1839</div><div class=\"line\">1840</div><div class=\"line\">1841</div><div class=\"line\">1842</div><div class=\"line\">1843</div><div class=\"line\">1844</div><div class=\"line\">1845</div><div class=\"line\">1846</div><div class=\"line\">1847</div><div class=\"line\">1848</div><div class=\"line\">1849</div><div class=\"line\">1850</div><div class=\"line\">1851</div><div class=\"line\">1852</div><div class=\"line\">1853</div><div class=\"line\">1854</div><div class=\"line\">1855</div><div class=\"line\">1856</div><div class=\"line\">1857</div><div class=\"line\">1858</div><div class=\"line\">1859</div><div class=\"line\">1860</div><div class=\"line\">1861</div><div class=\"line\">1862</div><div class=\"line\">1863</div><div class=\"line\">1864</div><div class=\"line\">1865</div><div class=\"line\">1866</div><div class=\"line\">1867</div><div class=\"line\">1868</div><div class=\"line\">1869</div><div class=\"line\">1870</div><div class=\"line\">1871</div><div class=\"line\">1872</div><div class=\"line\">1873</div><div class=\"line\">1874</div><div class=\"line\">1875</div><div class=\"line\">1876</div><div class=\"line\">1877</div><div class=\"line\">1878</div><div class=\"line\">1879</div><div class=\"line\">1880</div><div class=\"line\">1881</div><div class=\"line\">1882</div><div class=\"line\">1883</div><div class=\"line\">1884</div><div class=\"line\">1885</div><div class=\"line\">1886</div><div class=\"line\">1887</div><div class=\"line\">1888</div><div class=\"line\">1889</div><div class=\"line\">1890</div><div class=\"line\">1891</div><div class=\"line\">1892</div><div class=\"line\">1893</div><div class=\"line\">1894</div><div class=\"line\">1895</div><div class=\"line\">1896</div><div class=\"line\">1897</div><div class=\"line\">1898</div><div class=\"line\">1899</div><div class=\"line\">1900</div><div class=\"line\">1901</div><div class=\"line\">1902</div><div class=\"line\">1903</div><div class=\"line\">1904</div><div class=\"line\">1905</div><div class=\"line\">1906</div><div class=\"line\">1907</div><div class=\"line\">1908</div><div class=\"line\">1909</div><div class=\"line\">1910</div><div class=\"line\">1911</div><div class=\"line\">1912</div><div class=\"line\">1913</div><div class=\"line\">1914</div><div class=\"line\">1915</div><div class=\"line\">1916</div><div class=\"line\">1917</div><div class=\"line\">1918</div><div class=\"line\">1919</div><div class=\"line\">1920</div><div class=\"line\">1921</div><div class=\"line\">1922</div><div class=\"line\">1923</div><div class=\"line\">1924</div><div class=\"line\">1925</div><div class=\"line\">1926</div><div class=\"line\">1927</div><div class=\"line\">1928</div><div class=\"line\">1929</div><div class=\"line\">1930</div><div class=\"line\">1931</div><div class=\"line\">1932</div><div class=\"line\">1933</div><div class=\"line\">1934</div><div class=\"line\">1935</div><div class=\"line\">1936</div><div class=\"line\">1937</div><div class=\"line\">1938</div><div class=\"line\">1939</div><div class=\"line\">1940</div><div class=\"line\">1941</div><div class=\"line\">1942</div><div class=\"line\">1943</div><div class=\"line\">1944</div><div class=\"line\">1945</div><div class=\"line\">1946</div><div class=\"line\">1947</div><div class=\"line\">1948</div><div class=\"line\">1949</div><div class=\"line\">1950</div><div class=\"line\">1951</div><div class=\"line\">1952</div><div class=\"line\">1953</div><div class=\"line\">1954</div><div class=\"line\">1955</div><div class=\"line\">1956</div><div class=\"line\">1957</div><div class=\"line\">1958</div><div class=\"line\">1959</div><div class=\"line\">1960</div><div class=\"line\">1961</div><div class=\"line\">1962</div><div class=\"line\">1963</div><div class=\"line\">1964</div><div class=\"line\">1965</div><div class=\"line\">1966</div><div class=\"line\">1967</div><div class=\"line\">1968</div><div class=\"line\">1969</div><div class=\"line\">1970</div><div class=\"line\">1971</div><div class=\"line\">1972</div><div class=\"line\">1973</div><div class=\"line\">1974</div><div class=\"line\">1975</div><div class=\"line\">1976</div><div class=\"line\">1977</div><div class=\"line\">1978</div><div class=\"line\">1979</div><div class=\"line\">1980</div><div class=\"line\">1981</div><div class=\"line\">1982</div><div class=\"line\">1983</div><div class=\"line\">1984</div><div class=\"line\">1985</div><div class=\"line\">1986</div><div class=\"line\">1987</div><div class=\"line\">1988</div><div class=\"line\">1989</div><div class=\"line\">1990</div><div class=\"line\">1991</div><div class=\"line\">1992</div><div class=\"line\">1993</div><div class=\"line\">1994</div><div class=\"line\">1995</div><div class=\"line\">1996</div><div class=\"line\">1997</div><div class=\"line\">1998</div><div class=\"line\">1999</div><div class=\"line\">2000</div><div class=\"line\">2001</div><div class=\"line\">2002</div><div class=\"line\">2003</div><div class=\"line\">2004</div><div class=\"line\">2005</div><div class=\"line\">2006</div><div class=\"line\">2007</div><div class=\"line\">2008</div><div class=\"line\">2009</div><div class=\"line\">2010</div><div class=\"line\">2011</div><div class=\"line\">2012</div><div class=\"line\">2013</div><div class=\"line\">2014</div><div class=\"line\">2015</div><div class=\"line\">2016</div><div class=\"line\">2017</div><div class=\"line\">2018</div><div class=\"line\">2019</div><div class=\"line\">2020</div><div class=\"line\">2021</div><div class=\"line\">2022</div><div class=\"line\">2023</div><div class=\"line\">2024</div><div class=\"line\">2025</div><div class=\"line\">2026</div><div class=\"line\">2027</div><div class=\"line\">2028</div><div class=\"line\">2029</div><div class=\"line\">2030</div><div class=\"line\">2031</div><div class=\"line\">2032</div><div class=\"line\">2033</div><div class=\"line\">2034</div><div class=\"line\">2035</div><div class=\"line\">2036</div><div class=\"line\">2037</div><div class=\"line\">2038</div><div class=\"line\">2039</div><div class=\"line\">2040</div><div class=\"line\">2041</div><div class=\"line\">2042</div><div class=\"line\">2043</div><div class=\"line\">2044</div><div class=\"line\">2045</div><div class=\"line\">2046</div><div class=\"line\">2047</div><div class=\"line\">2048</div><div class=\"line\">2049</div><div class=\"line\">2050</div><div class=\"line\">2051</div><div class=\"line\">2052</div><div class=\"line\">2053</div><div class=\"line\">2054</div><div class=\"line\">2055</div><div class=\"line\">2056</div><div class=\"line\">2057</div><div class=\"line\">2058</div><div class=\"line\">2059</div><div class=\"line\">2060</div><div class=\"line\">2061</div><div class=\"line\">2062</div><div class=\"line\">2063</div><div class=\"line\">2064</div><div class=\"line\">2065</div><div class=\"line\">2066</div><div class=\"line\">2067</div><div class=\"line\">2068</div><div class=\"line\">2069</div><div class=\"line\">2070</div><div class=\"line\">2071</div><div class=\"line\">2072</div><div class=\"line\">2073</div><div class=\"line\">2074</div><div class=\"line\">2075</div><div class=\"line\">2076</div><div class=\"line\">2077</div><div class=\"line\">2078</div><div class=\"line\">2079</div><div class=\"line\">2080</div><div class=\"line\">2081</div><div class=\"line\">2082</div><div class=\"line\">2083</div><div class=\"line\">2084</div><div class=\"line\">2085</div><div class=\"line\">2086</div><div class=\"line\">2087</div><div class=\"line\">2088</div><div class=\"line\">2089</div><div class=\"line\">2090</div><div class=\"line\">2091</div><div class=\"line\">2092</div><div class=\"line\">2093</div><div class=\"line\">2094</div><div class=\"line\">2095</div><div class=\"line\">2096</div><div class=\"line\">2097</div><div class=\"line\">2098</div><div class=\"line\">2099</div><div class=\"line\">2100</div><div class=\"line\">2101</div><div class=\"line\">2102</div><div class=\"line\">2103</div><div class=\"line\">2104</div><div class=\"line\">2105</div><div class=\"line\">2106</div><div class=\"line\">2107</div><div class=\"line\">2108</div><div class=\"line\">2109</div><div class=\"line\">2110</div><div class=\"line\">2111</div><div class=\"line\">2112</div><div class=\"line\">2113</div><div class=\"line\">2114</div><div class=\"line\">2115</div><div class=\"line\">2116</div><div class=\"line\">2117</div><div class=\"line\">2118</div><div class=\"line\">2119</div><div class=\"line\">2120</div><div class=\"line\">2121</div><div class=\"line\">2122</div><div class=\"line\">2123</div><div class=\"line\">2124</div><div class=\"line\">2125</div><div class=\"line\">2126</div><div class=\"line\">2127</div><div class=\"line\">2128</div><div class=\"line\">2129</div><div class=\"line\">2130</div><div class=\"line\">2131</div><div class=\"line\">2132</div><div class=\"line\">2133</div><div class=\"line\">2134</div><div class=\"line\">2135</div><div class=\"line\">2136</div><div class=\"line\">2137</div><div class=\"line\">2138</div><div class=\"line\">2139</div><div class=\"line\">2140</div><div class=\"line\">2141</div><div class=\"line\">2142</div><div class=\"line\">2143</div><div class=\"line\">2144</div><div class=\"line\">2145</div><div class=\"line\">2146</div><div class=\"line\">2147</div><div class=\"line\">2148</div><div class=\"line\">2149</div><div class=\"line\">2150</div><div class=\"line\">2151</div><div class=\"line\">2152</div><div class=\"line\">2153</div><div class=\"line\">2154</div><div class=\"line\">2155</div><div class=\"line\">2156</div><div class=\"line\">2157</div><div class=\"line\">2158</div><div class=\"line\">2159</div><div class=\"line\">2160</div><div class=\"line\">2161</div><div class=\"line\">2162</div><div class=\"line\">2163</div><div class=\"line\">2164</div><div class=\"line\">2165</div><div class=\"line\">2166</div><div class=\"line\">2167</div><div class=\"line\">2168</div><div class=\"line\">2169</div><div class=\"line\">2170</div><div class=\"line\">2171</div><div class=\"line\">2172</div><div class=\"line\">2173</div><div class=\"line\">2174</div><div class=\"line\">2175</div><div class=\"line\">2176</div><div class=\"line\">2177</div><div class=\"line\">2178</div><div class=\"line\">2179</div><div class=\"line\">2180</div><div class=\"line\">2181</div><div class=\"line\">2182</div><div class=\"line\">2183</div><div class=\"line\">2184</div><div class=\"line\">2185</div><div class=\"line\">2186</div><div class=\"line\">2187</div><div class=\"line\">2188</div><div class=\"line\">2189</div><div class=\"line\">2190</div><div class=\"line\">2191</div><div class=\"line\">2192</div><div class=\"line\">2193</div><div class=\"line\">2194</div><div class=\"line\">2195</div><div class=\"line\">2196</div><div class=\"line\">2197</div><div class=\"line\">2198</div><div class=\"line\">2199</div><div class=\"line\">2200</div><div class=\"line\">2201</div><div class=\"line\">2202</div><div class=\"line\">2203</div><div class=\"line\">2204</div><div class=\"line\">2205</div><div class=\"line\">2206</div><div class=\"line\">2207</div><div class=\"line\">2208</div><div class=\"line\">2209</div><div class=\"line\">2210</div><div class=\"line\">2211</div><div class=\"line\">2212</div><div class=\"line\">2213</div><div class=\"line\">2214</div><div class=\"line\">2215</div><div class=\"line\">2216</div><div class=\"line\">2217</div><div class=\"line\">2218</div><div class=\"line\">2219</div><div class=\"line\">2220</div><div class=\"line\">2221</div><div class=\"line\">2222</div><div class=\"line\">2223</div><div class=\"line\">2224</div><div class=\"line\">2225</div><div class=\"line\">2226</div><div class=\"line\">2227</div><div class=\"line\">2228</div><div class=\"line\">2229</div><div class=\"line\">2230</div><div class=\"line\">2231</div><div class=\"line\">2232</div><div class=\"line\">2233</div><div class=\"line\">2234</div><div class=\"line\">2235</div><div class=\"line\">2236</div><div class=\"line\">2237</div><div class=\"line\">2238</div><div class=\"line\">2239</div><div class=\"line\">2240</div><div class=\"line\">2241</div><div class=\"line\">2242</div><div class=\"line\">2243</div><div class=\"line\">2244</div><div class=\"line\">2245</div><div class=\"line\">2246</div><div class=\"line\">2247</div><div class=\"line\">2248</div><div class=\"line\">2249</div><div class=\"line\">2250</div><div class=\"line\">2251</div><div class=\"line\">2252</div><div class=\"line\">2253</div><div class=\"line\">2254</div><div class=\"line\">2255</div><div class=\"line\">2256</div><div class=\"line\">2257</div><div class=\"line\">2258</div><div class=\"line\">2259</div><div class=\"line\">2260</div><div class=\"line\">2261</div><div class=\"line\">2262</div><div class=\"line\">2263</div><div class=\"line\">2264</div><div class=\"line\">2265</div><div class=\"line\">2266</div><div class=\"line\">2267</div><div class=\"line\">2268</div><div class=\"line\">2269</div><div class=\"line\">2270</div><div class=\"line\">2271</div><div class=\"line\">2272</div><div class=\"line\">2273</div><div class=\"line\">2274</div><div class=\"line\">2275</div><div class=\"line\">2276</div><div class=\"line\">2277</div><div class=\"line\">2278</div><div class=\"line\">2279</div><div class=\"line\">2280</div><div class=\"line\">2281</div><div class=\"line\">2282</div><div class=\"line\">2283</div><div class=\"line\">2284</div><div class=\"line\">2285</div><div class=\"line\">2286</div><div class=\"line\">2287</div><div class=\"line\">2288</div><div class=\"line\">2289</div><div class=\"line\">2290</div><div class=\"line\">2291</div><div class=\"line\">2292</div><div class=\"line\">2293</div><div class=\"line\">2294</div><div class=\"line\">2295</div><div class=\"line\">2296</div><div class=\"line\">2297</div><div class=\"line\">2298</div><div class=\"line\">2299</div><div class=\"line\">2300</div><div class=\"line\">2301</div><div class=\"line\">2302</div><div class=\"line\">2303</div><div class=\"line\">2304</div><div class=\"line\">2305</div><div class=\"line\">2306</div><div class=\"line\">2307</div><div class=\"line\">2308</div><div class=\"line\">2309</div><div class=\"line\">2310</div><div class=\"line\">2311</div><div class=\"line\">2312</div><div class=\"line\">2313</div><div class=\"line\">2314</div><div class=\"line\">2315</div><div class=\"line\">2316</div><div class=\"line\">2317</div><div class=\"line\">2318</div><div class=\"line\">2319</div><div class=\"line\">2320</div><div class=\"line\">2321</div><div class=\"line\">2322</div><div class=\"line\">2323</div><div class=\"line\">2324</div><div class=\"line\">2325</div><div class=\"line\">2326</div><div class=\"line\">2327</div><div class=\"line\">2328</div><div class=\"line\">2329</div><div class=\"line\">2330</div><div class=\"line\">2331</div><div class=\"line\">2332</div><div class=\"line\">2333</div><div class=\"line\">2334</div><div class=\"line\">2335</div><div class=\"line\">2336</div><div class=\"line\">2337</div><div class=\"line\">2338</div><div class=\"line\">2339</div><div class=\"line\">2340</div><div class=\"line\">2341</div><div class=\"line\">2342</div><div class=\"line\">2343</div><div class=\"line\">2344</div><div class=\"line\">2345</div><div class=\"line\">2346</div><div class=\"line\">2347</div><div class=\"line\">2348</div><div class=\"line\">2349</div><div class=\"line\">2350</div><div class=\"line\">2351</div><div class=\"line\">2352</div><div class=\"line\">2353</div><div class=\"line\">2354</div><div class=\"line\">2355</div><div class=\"line\">2356</div><div class=\"line\">2357</div><div class=\"line\">2358</div><div class=\"line\">2359</div><div class=\"line\">2360</div><div class=\"line\">2361</div><div class=\"line\">2362</div><div class=\"line\">2363</div><div class=\"line\">2364</div><div class=\"line\">2365</div><div class=\"line\">2366</div><div class=\"line\">2367</div><div class=\"line\">2368</div><div class=\"line\">2369</div><div class=\"line\">2370</div><div class=\"line\">2371</div><div class=\"line\">2372</div><div class=\"line\">2373</div><div class=\"line\">2374</div><div class=\"line\">2375</div><div class=\"line\">2376</div><div class=\"line\">2377</div><div class=\"line\">2378</div><div class=\"line\">2379</div><div class=\"line\">2380</div><div class=\"line\">2381</div><div class=\"line\">2382</div><div class=\"line\">2383</div><div class=\"line\">2384</div><div class=\"line\">2385</div><div class=\"line\">2386</div><div class=\"line\">2387</div><div class=\"line\">2388</div><div class=\"line\">2389</div><div class=\"line\">2390</div><div class=\"line\">2391</div><div class=\"line\">2392</div><div class=\"line\">2393</div><div class=\"line\">2394</div><div class=\"line\">2395</div><div class=\"line\">2396</div><div class=\"line\">2397</div><div class=\"line\">2398</div><div class=\"line\">2399</div><div class=\"line\">2400</div><div class=\"line\">2401</div><div class=\"line\">2402</div><div class=\"line\">2403</div><div class=\"line\">2404</div><div class=\"line\">2405</div><div class=\"line\">2406</div><div class=\"line\">2407</div><div class=\"line\">2408</div><div class=\"line\">2409</div><div class=\"line\">2410</div><div class=\"line\">2411</div><div class=\"line\">2412</div><div class=\"line\">2413</div><div class=\"line\">2414</div><div class=\"line\">2415</div><div class=\"line\">2416</div><div class=\"line\">2417</div><div class=\"line\">2418</div><div class=\"line\">2419</div><div class=\"line\">2420</div><div class=\"line\">2421</div><div class=\"line\">2422</div><div class=\"line\">2423</div><div class=\"line\">2424</div><div class=\"line\">2425</div><div class=\"line\">2426</div><div class=\"line\">2427</div><div class=\"line\">2428</div><div class=\"line\">2429</div><div class=\"line\">2430</div><div class=\"line\">2431</div><div class=\"line\">2432</div><div class=\"line\">2433</div><div class=\"line\">2434</div><div class=\"line\">2435</div><div class=\"line\">2436</div><div class=\"line\">2437</div><div class=\"line\">2438</div><div class=\"line\">2439</div><div class=\"line\">2440</div><div class=\"line\">2441</div><div class=\"line\">2442</div><div class=\"line\">2443</div><div class=\"line\">2444</div><div class=\"line\">2445</div><div class=\"line\">2446</div><div class=\"line\">2447</div><div class=\"line\">2448</div><div class=\"line\">2449</div><div class=\"line\">2450</div><div class=\"line\">2451</div><div class=\"line\">2452</div><div class=\"line\">2453</div><div class=\"line\">2454</div><div class=\"line\">2455</div><div class=\"line\">2456</div><div class=\"line\">2457</div><div class=\"line\">2458</div><div class=\"line\">2459</div><div class=\"line\">2460</div><div class=\"line\">2461</div><div class=\"line\">2462</div><div class=\"line\">2463</div><div class=\"line\">2464</div><div class=\"line\">2465</div><div class=\"line\">2466</div><div class=\"line\">2467</div><div class=\"line\">2468</div><div class=\"line\">2469</div><div class=\"line\">2470</div><div class=\"line\">2471</div><div class=\"line\">2472</div><div class=\"line\">2473</div><div class=\"line\">2474</div><div class=\"line\">2475</div><div class=\"line\">2476</div><div class=\"line\">2477</div><div class=\"line\">2478</div><div class=\"line\">2479</div><div class=\"line\">2480</div><div class=\"line\">2481</div><div class=\"line\">2482</div><div class=\"line\">2483</div><div class=\"line\">2484</div><div class=\"line\">2485</div><div class=\"line\">2486</div><div class=\"line\">2487</div><div class=\"line\">2488</div><div class=\"line\">2489</div><div class=\"line\">2490</div><div class=\"line\">2491</div><div class=\"line\">2492</div><div class=\"line\">2493</div><div class=\"line\">2494</div><div class=\"line\">2495</div><div class=\"line\">2496</div><div class=\"line\">2497</div><div class=\"line\">2498</div><div class=\"line\">2499</div><div class=\"line\">2500</div><div class=\"line\">2501</div><div class=\"line\">2502</div><div class=\"line\">2503</div><div class=\"line\">2504</div><div class=\"line\">2505</div><div class=\"line\">2506</div><div class=\"line\">2507</div><div class=\"line\">2508</div><div class=\"line\">2509</div><div class=\"line\">2510</div><div class=\"line\">2511</div><div class=\"line\">2512</div><div class=\"line\">2513</div><div class=\"line\">2514</div><div class=\"line\">2515</div><div class=\"line\">2516</div><div class=\"line\">2517</div><div class=\"line\">2518</div><div class=\"line\">2519</div><div class=\"line\">2520</div><div class=\"line\">2521</div><div class=\"line\">2522</div><div class=\"line\">2523</div><div class=\"line\">2524</div><div class=\"line\">2525</div><div class=\"line\">2526</div><div class=\"line\">2527</div><div class=\"line\">2528</div><div class=\"line\">2529</div><div class=\"line\">2530</div><div class=\"line\">2531</div><div class=\"line\">2532</div><div class=\"line\">2533</div><div class=\"line\">2534</div><div class=\"line\">2535</div><div class=\"line\">2536</div><div class=\"line\">2537</div><div class=\"line\">2538</div><div class=\"line\">2539</div><div class=\"line\">2540</div><div class=\"line\">2541</div><div class=\"line\">2542</div><div class=\"line\">2543</div><div class=\"line\">2544</div><div class=\"line\">2545</div><div class=\"line\">2546</div><div class=\"line\">2547</div><div class=\"line\">2548</div><div class=\"line\">2549</div><div class=\"line\">2550</div><div class=\"line\">2551</div><div class=\"line\">2552</div><div class=\"line\">2553</div><div class=\"line\">2554</div><div class=\"line\">2555</div><div class=\"line\">2556</div><div class=\"line\">2557</div><div class=\"line\">2558</div><div class=\"line\">2559</div><div class=\"line\">2560</div><div class=\"line\">2561</div><div class=\"line\">2562</div><div class=\"line\">2563</div><div class=\"line\">2564</div><div class=\"line\">2565</div><div class=\"line\">2566</div><div class=\"line\">2567</div><div class=\"line\">2568</div><div class=\"line\">2569</div><div class=\"line\">2570</div><div class=\"line\">2571</div><div class=\"line\">2572</div><div class=\"line\">2573</div><div class=\"line\">2574</div><div class=\"line\">2575</div><div class=\"line\">2576</div><div class=\"line\">2577</div><div class=\"line\">2578</div><div class=\"line\">2579</div><div class=\"line\">2580</div><div class=\"line\">2581</div><div class=\"line\">2582</div><div class=\"line\">2583</div><div class=\"line\">2584</div><div class=\"line\">2585</div><div class=\"line\">2586</div><div class=\"line\">2587</div><div class=\"line\">2588</div><div class=\"line\">2589</div><div class=\"line\">2590</div><div class=\"line\">2591</div><div class=\"line\">2592</div><div class=\"line\">2593</div><div class=\"line\">2594</div><div class=\"line\">2595</div><div class=\"line\">2596</div><div class=\"line\">2597</div><div class=\"line\">2598</div><div class=\"line\">2599</div><div class=\"line\">2600</div><div class=\"line\">2601</div><div class=\"line\">2602</div><div class=\"line\">2603</div><div class=\"line\">2604</div><div class=\"line\">2605</div><div class=\"line\">2606</div><div class=\"line\">2607</div><div class=\"line\">2608</div><div class=\"line\">2609</div><div class=\"line\">2610</div><div class=\"line\">2611</div><div class=\"line\">2612</div><div class=\"line\">2613</div><div class=\"line\">2614</div><div class=\"line\">2615</div><div class=\"line\">2616</div><div class=\"line\">2617</div><div class=\"line\">2618</div><div class=\"line\">2619</div><div class=\"line\">2620</div><div class=\"line\">2621</div><div class=\"line\">2622</div><div class=\"line\">2623</div><div class=\"line\">2624</div><div class=\"line\">2625</div><div class=\"line\">2626</div><div class=\"line\">2627</div><div class=\"line\">2628</div><div class=\"line\">2629</div><div class=\"line\">2630</div><div class=\"line\">2631</div><div class=\"line\">2632</div><div class=\"line\">2633</div><div class=\"line\">2634</div><div class=\"line\">2635</div><div class=\"line\">2636</div><div class=\"line\">2637</div><div class=\"line\">2638</div><div class=\"line\">2639</div><div class=\"line\">2640</div><div class=\"line\">2641</div><div class=\"line\">2642</div><div class=\"line\">2643</div><div class=\"line\">2644</div><div class=\"line\">2645</div><div class=\"line\">2646</div><div class=\"line\">2647</div><div class=\"line\">2648</div><div class=\"line\">2649</div><div class=\"line\">2650</div><div class=\"line\">2651</div><div class=\"line\">2652</div><div class=\"line\">2653</div><div class=\"line\">2654</div><div class=\"line\">2655</div><div class=\"line\">2656</div><div class=\"line\">2657</div><div class=\"line\">2658</div><div class=\"line\">2659</div><div class=\"line\">2660</div><div class=\"line\">2661</div><div class=\"line\">2662</div><div class=\"line\">2663</div><div class=\"line\">2664</div><div class=\"line\">2665</div><div class=\"line\">2666</div><div class=\"line\">2667</div><div class=\"line\">2668</div><div class=\"line\">2669</div><div class=\"line\">2670</div><div class=\"line\">2671</div><div class=\"line\">2672</div><div class=\"line\">2673</div><div class=\"line\">2674</div><div class=\"line\">2675</div><div class=\"line\">2676</div><div class=\"line\">2677</div><div class=\"line\">2678</div><div class=\"line\">2679</div><div class=\"line\">2680</div><div class=\"line\">2681</div><div class=\"line\">2682</div><div class=\"line\">2683</div><div class=\"line\">2684</div><div class=\"line\">2685</div><div class=\"line\">2686</div><div class=\"line\">2687</div><div class=\"line\">2688</div><div class=\"line\">2689</div><div class=\"line\">2690</div><div class=\"line\">2691</div><div class=\"line\">2692</div><div class=\"line\">2693</div><div class=\"line\">2694</div><div class=\"line\">2695</div><div class=\"line\">2696</div><div class=\"line\">2697</div><div class=\"line\">2698</div><div class=\"line\">2699</div><div class=\"line\">2700</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> iniLoadFromFile(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *szFilename, IniContext *pContext)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> iniLoadFromFileEx(szFilename, pContext, <span class=\"keyword\">false</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> iniLoadFromFileEx(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *szFilename, IniContext *pContext,</div><div class=\"line\">    <span class=\"keyword\">bool</span> ignore_annotation) <span class=\"comment\">// annotation is 注释, such as symbol = /* */</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> result;</div><div class=\"line\">\t<span class=\"keyword\">int</span> len;</div><div class=\"line\">\t<span class=\"keyword\">char</span> *pLast;</div><div class=\"line\">\t<span class=\"keyword\">char</span> full_filename[MAX_PATH_SIZE]; <span class=\"comment\">//保存完整文件名路径</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=iniInitContext(pContext)) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">        pContext-&gt;ignore_annotation = ignore_annotation; <span class=\"comment\">//default is true</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (strncasecmp(szFilename, <span class=\"string\">\"http://\"</span>, <span class=\"number\">7</span>) == <span class=\"number\">0</span>) <span class=\"comment\">// szFilename可以为类似： http://www.abc.com/sdfs/xxx.conf</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t*pContext-&gt;config_path = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">\t\tsnprintf(full_filename, sizeof(full_filename),<span class=\"string\">\"%s\"</span>,szFilename); </div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (*szFilename == <span class=\"string\">'/'</span>) <span class=\"comment\">// szFilename is the absolute path</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tpLast = strrchr(szFilename, <span class=\"string\">'/'</span>); <span class=\"comment\">//从后面开始查找第一个字符'/'</span></div><div class=\"line\">\t\t\tlen = pLast - szFilename;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (len &gt;= sizeof(pContext-&gt;config_path))</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span>\\</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">\"the path of the config file: %s is \"</span> \\</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">\"too long!\"</span>, <span class=\"keyword\">__LINE__</span>, szFilename);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> ENOSPC;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\tmemcpy(pContext-&gt;config_path, szFilename, len);</div><div class=\"line\">\t\t\t*(pContext-&gt;config_path + len) = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">\t\t\tsnprintf(full_filename, sizeof(full_filename), \\</div><div class=\"line\">\t\t\t\t<span class=\"string\">\"%s\"</span>, szFilename);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span>  <span class=\"comment\">// 表明是从当前路径下的文件名，szFilename is the conf file name or is current_dir/xxx1/xxx2/xxx.conf</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tmemset(pContext-&gt;config_path, <span class=\"number\">0</span>, \\</div><div class=\"line\">\t\t\t\tsizeof(pContext-&gt;config_path));</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (getcwd(pContext-&gt;config_path, sizeof( \\</div><div class=\"line\">\t\t\t\tpContext-&gt;config_path)) == <span class=\"keyword\">NULL</span>)  <span class=\"comment\">//getcwd函数为得到当前目录</span></div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">\"getcwd fail, errno: %d, \"</span> \\</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">\"error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">__LINE__</span>, errno, STRERROR(errno));</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> errno != <span class=\"number\">0</span> ? errno : EPERM;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\tlen = strlen(pContext-&gt;config_path);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (len &gt; <span class=\"number\">0</span> &amp;&amp; pContext-&gt;config_path[len - <span class=\"number\">1</span>] == <span class=\"string\">'/'</span>)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tlen--;</div><div class=\"line\">\t\t\t\t*(pContext-&gt;config_path + len) = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">\t\t\t&#125;  <span class=\"comment\">// make sure the last char is not '/'</span></div><div class=\"line\"></div><div class=\"line\">\t\t\tsnprintf(full_filename, sizeof(full_filename), \\</div><div class=\"line\">\t\t\t\t<span class=\"string\">\"%s/%s\"</span>, pContext-&gt;config_path, szFilename);</div><div class=\"line\"></div><div class=\"line\">\t\t\tpLast = strrchr(szFilename, <span class=\"string\">'/'</span>);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (pLast != <span class=\"keyword\">NULL</span>)  <span class=\"comment\">// such as szFilename is \"data/xxx.conf\"</span></div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> tail_len;</div><div class=\"line\">\t\t\t\ttail_len = pLast - szFilename;</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (len + <span class=\"number\">1</span> + tail_len &gt;= sizeof( \\</div><div class=\"line\">\t\t\t\t\t\tpContext-&gt;config_path))</div><div class=\"line\">\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span>\\</div><div class=\"line\">\t\t\t\t\t\t<span class=\"string\">\"the path of the config \"</span> \\</div><div class=\"line\">\t\t\t\t\t\t<span class=\"string\">\"file: %s is too long!\"</span>, \\</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">__LINE__</span>, szFilename);</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> ENOSPC;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">                *(pContext-&gt;config_path + len++) = <span class=\"string\">'/'</span>;</div><div class=\"line\">\t\t\t\tmemcpy(pContext-&gt;config_path + len, \\</div><div class=\"line\">\t\t\t\t\tszFilename, tail_len);</div><div class=\"line\">\t\t\t\tlen += tail_len;</div><div class=\"line\">\t\t\t\t*(pContext-&gt;config_path + len) = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// now full_filename is the absolute path of conf file, pContext-&gt;config_path</span></div><div class=\"line\">    <span class=\"comment\">// is the conf file directory</span></div><div class=\"line\">\tresult = iniDoLoadFromFile(full_filename, pContext);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (result == <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tiniSortItems(pContext);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tiniFreeContext(pContext);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// init the member of IniContext, such as init the hash member:pContext-&gt;sections</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> iniInitContext(IniContext *pContext)</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> result;</div><div class=\"line\"></div><div class=\"line\">\tmemset(pContext, <span class=\"number\">0</span>, sizeof(IniContext));</div><div class=\"line\">\tpContext-&gt;current_section = &amp;pContext-&gt;global; <span class=\"comment\">//指向global,用于保存全局key,value对</span></div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=hash_init(&amp;pContext-&gt;sections, Time33Hash, <span class=\"number\">32</span>, <span class=\"number\">0.75</span>)) != <span class=\"number\">0</span>) <span class=\"comment\">//hash数组初始化，Time33Hash为hash函数，32为容量，0.75为负载因子</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"hash_init fail, errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t<span class=\"keyword\">__LINE__</span>, result, STRERROR(result));</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">hash函数如下：</div><div class=\"line\"><span class=\"comment\">#define TIME33_HASH_FUNC(init_value) \\</span></div><div class=\"line\">\t<span class=\"keyword\">int</span> nHash; \\</div><div class=\"line\">\tunsigned <span class=\"keyword\">char</span> *pKey; \\</div><div class=\"line\">\tunsigned <span class=\"keyword\">char</span> *pEnd; \\</div><div class=\"line\"> \\</div><div class=\"line\">\tnHash = init_value; \\</div><div class=\"line\">\tpEnd = (unsigned <span class=\"keyword\">char</span> *)key + key_len; \\</div><div class=\"line\">\t<span class=\"keyword\">for</span> (pKey = (unsigned <span class=\"keyword\">char</span> *)key; pKey != pEnd; pKey++) \\</div><div class=\"line\">\t&#123; \\</div><div class=\"line\">\t\tnHash += (nHash &lt;&lt; <span class=\"number\">5</span>) + (*pKey); \\</div><div class=\"line\">\t&#125; \\</div><div class=\"line\"> \\</div><div class=\"line\">\t<span class=\"keyword\">return</span> nHash; \\</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// get a int value according to the key value</span></div><div class=\"line\"><span class=\"keyword\">int</span> Time33Hash(<span class=\"keyword\">const</span> void *key, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> key_len)</div><div class=\"line\">&#123;</div><div class=\"line\">\tTIME33_HASH_FUNC(<span class=\"number\">0</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#define hash_init(pHash, hash_func, capacity, load_factor) \\</span></div><div class=\"line\">\thash_init_ex(pHash, hash_func, capacity, load_factor, <span class=\"number\">0</span>, <span class=\"keyword\">false</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 参数依次为：要初始化的hash数组，hash函数，容量，负载因子（当前保存的项数/capacity）,hash数组能用的最大字节数，保存value的空间是否已经在外部被分配了</span></div><div class=\"line\"><span class=\"keyword\">int</span> hash_init_ex(HashArray *pHash, HashFunc hash_func, \\</div><div class=\"line\">\t\t<span class=\"keyword\">const</span> unsigned <span class=\"keyword\">int</span> capacity, <span class=\"keyword\">const</span> <span class=\"keyword\">double</span> load_factor, \\</div><div class=\"line\">\t\t<span class=\"keyword\">const</span> int64_t max_bytes, <span class=\"keyword\">const</span> <span class=\"keyword\">bool</span> bMallocValue)</div><div class=\"line\">&#123;</div><div class=\"line\">\tunsigned <span class=\"keyword\">int</span> *pprime;</div><div class=\"line\">\tunsigned <span class=\"keyword\">int</span> *prime_end;</div><div class=\"line\">\t<span class=\"keyword\">int</span> result;</div><div class=\"line\"></div><div class=\"line\">\tmemset(pHash, <span class=\"number\">0</span>, sizeof(HashArray));</div><div class=\"line\">\tprime_end = prime_array + PRIME_ARRAY_SIZE;  <span class=\"comment\">// 素数数组</span></div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">for</span> (pprime = prime_array; pprime!=prime_end; pprime++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ( *pprime &gt; capacity ) <span class=\"comment\">//找到第一个大于容量的素数</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tpHash-&gt;capacity = pprime;</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (pHash-&gt;capacity == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> EINVAL;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=_hash_alloc_buckets(pHash, <span class=\"number\">0</span>)) != <span class=\"number\">0</span>) <span class=\"comment\">//分配桶</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpHash-&gt;hash_func = hash_func;</div><div class=\"line\">\tpHash-&gt;max_bytes = max_bytes; <span class=\"comment\">//hash数组能够使用的最大字节数</span></div><div class=\"line\">\tpHash-&gt;is_malloc_value = bMallocValue;  <span class=\"comment\">// default is false，保存key,value中的value数据时的空间是否已经在外部被分配</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// load_factor default is 0.75</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> (load_factor &gt;= <span class=\"number\">0.00</span> &amp;&amp; load_factor &lt;= <span class=\"number\">1.00</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tpHash-&gt;load_factor = load_factor;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tpHash-&gt;load_factor = <span class=\"number\">0.50</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 素数数组</span></div><div class=\"line\"><span class=\"keyword\">static</span> unsigned <span class=\"keyword\">int</span> prime_array[] = &#123;</div><div class=\"line\">    <span class=\"number\">1</span>,              <span class=\"comment\">/* 0 */</span></div><div class=\"line\">    <span class=\"number\">3</span>,              <span class=\"comment\">/* 1 */</span></div><div class=\"line\">    <span class=\"number\">17</span>,             <span class=\"comment\">/* 2 */</span></div><div class=\"line\">    <span class=\"number\">37</span>,             <span class=\"comment\">/* 3 */</span></div><div class=\"line\">    <span class=\"number\">79</span>,             <span class=\"comment\">/* 4 */</span></div><div class=\"line\">    <span class=\"number\">163</span>,            <span class=\"comment\">/* 5 */</span></div><div class=\"line\">    <span class=\"number\">331</span>,            <span class=\"comment\">/* 6 */</span></div><div class=\"line\">    <span class=\"number\">673</span>,            <span class=\"comment\">/* 7 */</span></div><div class=\"line\">    <span class=\"number\">1361</span>,           <span class=\"comment\">/* 8 */</span></div><div class=\"line\">    <span class=\"number\">2729</span>,           <span class=\"comment\">/* 9 */</span></div><div class=\"line\">    <span class=\"number\">5471</span>,           <span class=\"comment\">/* 10 */</span></div><div class=\"line\">    <span class=\"number\">10949</span>,          <span class=\"comment\">/* 11 */</span></div><div class=\"line\">    <span class=\"number\">21911</span>,          <span class=\"comment\">/* 12 */</span></div><div class=\"line\">    <span class=\"number\">43853</span>,          <span class=\"comment\">/* 13 */</span></div><div class=\"line\">    <span class=\"number\">87719</span>,          <span class=\"comment\">/* 14 */</span></div><div class=\"line\">    <span class=\"number\">175447</span>,         <span class=\"comment\">/* 15 */</span></div><div class=\"line\">    <span class=\"number\">350899</span>,         <span class=\"comment\">/* 16 */</span></div><div class=\"line\">    <span class=\"number\">701819</span>,         <span class=\"comment\">/* 17 */</span></div><div class=\"line\">    <span class=\"number\">1403641</span>,        <span class=\"comment\">/* 18 */</span></div><div class=\"line\">    <span class=\"number\">2807303</span>,        <span class=\"comment\">/* 19 */</span></div><div class=\"line\">    <span class=\"number\">5614657</span>,        <span class=\"comment\">/* 20 */</span></div><div class=\"line\">    <span class=\"number\">11229331</span>,       <span class=\"comment\">/* 21 */</span></div><div class=\"line\">    <span class=\"number\">22458671</span>,       <span class=\"comment\">/* 22 */</span></div><div class=\"line\">    <span class=\"number\">44917381</span>,       <span class=\"comment\">/* 23 */</span></div><div class=\"line\">    <span class=\"number\">89834777</span>,       <span class=\"comment\">/* 24 */</span></div><div class=\"line\">    <span class=\"number\">179669557</span>,      <span class=\"comment\">/* 25 */</span></div><div class=\"line\">    <span class=\"number\">359339171</span>,      <span class=\"comment\">/* 26 */</span></div><div class=\"line\">    <span class=\"number\">718678369</span>,      <span class=\"comment\">/* 27 */</span></div><div class=\"line\">    <span class=\"number\">1437356741</span>,     <span class=\"comment\">/* 28 */</span></div><div class=\"line\">    <span class=\"number\">2147483647</span>      <span class=\"comment\">/* 29 (largest signed int prime) */</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#define PRIME_ARRAY_SIZE  30</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// allocate the space of hash array</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> _hash_alloc_buckets(HashArray *pHash, <span class=\"keyword\">const</span> unsigned <span class=\"keyword\">int</span> old_capacity)</div><div class=\"line\">&#123;</div><div class=\"line\">\tsize_t bytes;</div><div class=\"line\"></div><div class=\"line\">\tbytes = sizeof(HashData *) * (*pHash-&gt;capacity);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (pHash-&gt;max_bytes &gt; <span class=\"number\">0</span> &amp;&amp; pHash-&gt;bytes_used+bytes &gt; pHash-&gt;max_bytes)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> ENOSPC; <span class=\"comment\">// no more memory in device </span></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpHash-&gt;buckets = (HashData **)malloc(bytes);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (pHash-&gt;buckets == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> ENOMEM;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tmemset(pHash-&gt;buckets, <span class=\"number\">0</span>, bytes); <span class=\"comment\">// sizeof(HashData *) * old_capacity为旧数组的大小</span></div><div class=\"line\">\tpHash-&gt;bytes_used += bytes - sizeof(HashData *) * old_capacity; <span class=\"comment\">//bytes为新大小，减去旧数组大小则为新增大小</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> iniDoLoadFromFile(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *szFilename, \\</div><div class=\"line\">\t\tIniContext *pContext)</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">char</span> *content;</div><div class=\"line\">\t<span class=\"keyword\">int</span> result;</div><div class=\"line\">\t<span class=\"keyword\">int</span> http_status;</div><div class=\"line\">\t<span class=\"keyword\">int</span> content_len;</div><div class=\"line\">\tint64_t file_size;</div><div class=\"line\">\t<span class=\"keyword\">char</span> error_info[<span class=\"number\">512</span>];</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (strncasecmp(szFilename, <span class=\"string\">\"http://\"</span>, <span class=\"number\">7</span>) == <span class=\"number\">0</span>) <span class=\"comment\">// 是否为http://xxx.xx.xx/xx1/xx.conf形式</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t    <span class=\"comment\">// szFilename: http://xx1.xx2.xx3/haha/dir/xxx.conf</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((result=get_url_content(szFilename, <span class=\"number\">10</span>, <span class=\"number\">60</span>, &amp;http_status, \\   </div><div class=\"line\">\t\t\t\t&amp;content, &amp;content_len, error_info)) != <span class=\"number\">0</span>)  <span class=\"comment\">//get_url_content函数发送http请求获得文件内容</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t\t<span class=\"string\">\"get_url_content fail, \"</span> \\</div><div class=\"line\">\t\t\t\t<span class=\"string\">\"url: %s, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">__LINE__</span>, szFilename, error_info);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (http_status != <span class=\"number\">200</span>) <span class=\"comment\">// means http response status is not correct</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tfree(content);</div><div class=\"line\">\t\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t\t<span class=\"string\">\"HTTP status code: %d != 200, url: %s\"</span>, \\</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">__LINE__</span>, http_status, szFilename);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> EINVAL;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((result=getFileContent(szFilename, &amp;content, \\</div><div class=\"line\">\t\t\t\t&amp;file_size)) != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tresult = iniLoadItemsFromBuffer(content, pContext);</div><div class=\"line\">\tfree(content);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> get_url_content(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *url, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> connect_timeout, \\</div><div class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> network_timeout, <span class=\"keyword\">int</span> *http_status, \\</div><div class=\"line\">\t<span class=\"keyword\">char</span> **content, <span class=\"keyword\">int</span> *content_len, <span class=\"keyword\">char</span> *error_info)</div><div class=\"line\">&#123;</div><div class=\"line\">    *content = <span class=\"keyword\">NULL</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> get_url_content_ex(url, strlen(url), connect_timeout, network_timeout,</div><div class=\"line\">            http_status, content, content_len, error_info);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">get the content of url, the func will send http request and recv http response</div><div class=\"line\">// connect_timeout is 10 default</div><div class=\"line\">// network_timeout is 60 default</div><div class=\"line\">http_status用于保存http响应报文的状态，如http 1.1 200 ok中的200</div><div class=\"line\">content和content_len用于保存内容和长度</div><div class=\"line\">error_info用于保存错误信息</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"keyword\">int</span> get_url_content_ex(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *url, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> url_len,</div><div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> connect_timeout, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> network_timeout,</div><div class=\"line\">        <span class=\"keyword\">int</span> *http_status, <span class=\"keyword\">char</span> **content, <span class=\"keyword\">int</span> *content_len, <span class=\"keyword\">char</span> *error_info)</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">char</span> domain_name[<span class=\"number\">256</span>];</div><div class=\"line\">\t<span class=\"keyword\">char</span> ip_addr[IP_ADDRESS_SIZE];</div><div class=\"line\">\t<span class=\"keyword\">char</span> out_buff[<span class=\"number\">4096</span>];</div><div class=\"line\">\t<span class=\"keyword\">int</span> domain_len;</div><div class=\"line\">\t<span class=\"keyword\">int</span> out_len;</div><div class=\"line\">\t<span class=\"keyword\">int</span> alloc_size;</div><div class=\"line\">\t<span class=\"keyword\">int</span> recv_bytes;</div><div class=\"line\">\t<span class=\"keyword\">int</span> result;</div><div class=\"line\">\t<span class=\"keyword\">int</span> sock;</div><div class=\"line\">\t<span class=\"keyword\">int</span> port;</div><div class=\"line\">    <span class=\"keyword\">bool</span> bNeedAlloc;</div><div class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *pDomain;</div><div class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *pContent;</div><div class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *pURI;</div><div class=\"line\">\t<span class=\"keyword\">char</span> *pPort;</div><div class=\"line\">\t<span class=\"keyword\">char</span> *pSpace;</div><div class=\"line\"></div><div class=\"line\">\t*http_status = <span class=\"number\">0</span>;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (*content == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        bNeedAlloc = <span class=\"keyword\">true</span>;</div><div class=\"line\">        alloc_size = <span class=\"number\">64</span> * <span class=\"number\">1024</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        bNeedAlloc = <span class=\"keyword\">false</span>;</div><div class=\"line\">        alloc_size = *content_len - <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">\t*content_len = <span class=\"number\">0</span>;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (url_len &gt; sizeof(out_buff) - <span class=\"number\">128</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">\t\tsprintf(error_info, <span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span></div><div class=\"line\">                <span class=\"string\">\"url too long, url length: %d &gt; %d\"</span>, <span class=\"keyword\">__LINE__</span>,</div><div class=\"line\">                url_len, (<span class=\"keyword\">int</span>)(sizeof(out_buff) - <span class=\"number\">128</span>));</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> ENAMETOOLONG;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (url_len &lt;= <span class=\"number\">7</span> || strncasecmp(url, <span class=\"string\">\"http://\"</span>, <span class=\"number\">7</span>) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tsprintf(error_info, <span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"invalid url.\"</span>, <span class=\"keyword\">__LINE__</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> EINVAL;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpDomain = url + <span class=\"number\">7</span>;</div><div class=\"line\">\tpURI = strchr(pDomain, <span class=\"string\">'/'</span>);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (pURI == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tdomain_len = url_len - <span class=\"number\">7</span>;</div><div class=\"line\">\t\tpURI = <span class=\"string\">\"/\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tdomain_len = pURI - pDomain;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (domain_len &gt;= sizeof(domain_name))</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tsprintf(error_info, <span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"domain is too large, exceed %d.\"</span>, \\</div><div class=\"line\">\t\t\t<span class=\"keyword\">__LINE__</span>, (<span class=\"keyword\">int</span>)sizeof(domain_name));</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> EINVAL;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tmemcpy(domain_name, pDomain, domain_len);</div><div class=\"line\">\t*(domain_name + domain_len) = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">\tpPort = strchr(domain_name, <span class=\"string\">':'</span>);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (pPort == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tport = <span class=\"number\">80</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t*pPort = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">\t\tport = atoi(pPort + <span class=\"number\">1</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (getIpaddrByName(domain_name, ip_addr, \\</div><div class=\"line\">\t\tsizeof(ip_addr)) == INADDR_NONE)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tsprintf(error_info, <span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"resolve domain \\\"%s\\\" fail.\"</span>, \\</div><div class=\"line\">\t\t\t<span class=\"keyword\">__LINE__</span>, domain_name);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> EINVAL;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tsock = socket(AF_INET, SOCK_STREAM, <span class=\"number\">0</span>);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span>(sock &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tsprintf(error_info, <span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"socket create failed, errno: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"error info: %s\"</span>, <span class=\"keyword\">__LINE__</span>, \\</div><div class=\"line\">\t\t\terrno, STRERROR(errno));</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> errno != <span class=\"number\">0</span> ? errno : EPERM;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=connectserverbyip_nb_auto(sock, ip_addr, port, \\</div><div class=\"line\">\t\t\tconnect_timeout)) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tclose(sock);</div><div class=\"line\"></div><div class=\"line\">\t\tsprintf(error_info, <span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"connect to %s:%d fail, errno: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"error info: %s\"</span>, <span class=\"keyword\">__LINE__</span>, domain_name, \\</div><div class=\"line\">\t\t\tport, result, STRERROR(result));</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tout_len = snprintf(out_buff, sizeof(out_buff), \\</div><div class=\"line\">\t\t<span class=\"string\">\"GET %s HTTP/1.0\\r\\n\"</span> \\</div><div class=\"line\">\t\t<span class=\"string\">\"Host: %s:%d\\r\\n\"</span> \\</div><div class=\"line\">\t\t<span class=\"string\">\"Connection: close\\r\\n\"</span> \\</div><div class=\"line\">\t\t<span class=\"string\">\"\\r\\n\"</span>, pURI, domain_name, port);</div><div class=\"line\">\t<span class=\"comment\">// we have Connection: close means: the peer will shutdown the socket when it has finished sending data</span></div><div class=\"line\">\t<span class=\"comment\">// send http request </span></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=tcpsenddata(sock, out_buff, out_len, network_timeout)) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tclose(sock);</div><div class=\"line\"></div><div class=\"line\">\t\tsprintf(error_info, <span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"send data to %s:%d fail, errno: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"error info: %s\"</span>, <span class=\"keyword\">__LINE__</span>, domain_name, \\</div><div class=\"line\">\t\t\tport, result, STRERROR(result));</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (bNeedAlloc)</div><div class=\"line\">    &#123;</div><div class=\"line\">        *content = (<span class=\"keyword\">char</span> *)malloc(alloc_size + <span class=\"number\">1</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">        <span class=\"keyword\">if</span> (*content == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            close(sock);</div><div class=\"line\">            result = errno != <span class=\"number\">0</span> ? errno : ENOMEM;</div><div class=\"line\"></div><div class=\"line\">            sprintf(error_info, <span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">                    <span class=\"string\">\"malloc %d bytes fail, errno: %d, \"</span> \\</div><div class=\"line\">                    <span class=\"string\">\"error info: %s\"</span>, <span class=\"keyword\">__LINE__</span>, alloc_size + <span class=\"number\">1</span>, \\</div><div class=\"line\">                    result, STRERROR(result));</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">return</span> result;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">do</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\trecv_bytes = alloc_size - *content_len; <span class=\"comment\">// recv_bytes: left space to recv data</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (recv_bytes &lt;= <span class=\"number\">0</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (bNeedAlloc)</div><div class=\"line\">            &#123;</div><div class=\"line\">                alloc_size *= <span class=\"number\">2</span>;</div><div class=\"line\">                *content = (<span class=\"keyword\">char</span> *)realloc(*content, alloc_size + <span class=\"number\">1</span>);</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">                <span class=\"keyword\">if</span> (*content == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    *content_len = <span class=\"number\">0</span>;</div><div class=\"line\">                    close(sock);</div><div class=\"line\">                    result = errno != <span class=\"number\">0</span> ? errno : ENOMEM;</div><div class=\"line\"></div><div class=\"line\">                    sprintf(error_info, <span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">                            <span class=\"string\">\"realloc %d bytes fail, errno: %d, \"</span> \\</div><div class=\"line\">                            <span class=\"string\">\"error info: %s\"</span>, <span class=\"keyword\">__LINE__</span>, \\</div><div class=\"line\">                            alloc_size + <span class=\"number\">1</span>, \\</div><div class=\"line\">                            result, STRERROR(result));</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">return</span> result;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                recv_bytes = alloc_size - *content_len;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span></div><div class=\"line\">            &#123;</div><div class=\"line\">                    sprintf(error_info, <span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">                            <span class=\"string\">\"buffer size: %d is too small\"</span>, \\</div><div class=\"line\">                            <span class=\"keyword\">__LINE__</span>, alloc_size);</div><div class=\"line\">                    <span class=\"keyword\">return</span> ENOSPC;</div><div class=\"line\">            &#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tresult = tcprecvdata_ex(sock, *content + *content_len, \\</div><div class=\"line\">\t\t\t\trecv_bytes, network_timeout, &amp;recv_bytes);</div><div class=\"line\"></div><div class=\"line\">\t\t*content_len += recv_bytes;</div><div class=\"line\">\t&#125; <span class=\"keyword\">while</span> (result == <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">do</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (result == ENOTCONN) <span class=\"comment\">// means the peer has shutdowned the socket</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            result = <span class=\"number\">0</span>;   <span class=\"comment\">// success value</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> </div><div class=\"line\">\t&#123;</div><div class=\"line\">            sprintf(error_info, <span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">                    <span class=\"string\">\"recv data from %s:%d fail, errno: %d, \"</span> \\</div><div class=\"line\">                    <span class=\"string\">\"error info: %s\"</span>, <span class=\"keyword\">__LINE__</span>, domain_name, \\</div><div class=\"line\">                    port, result, STRERROR(result));</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        *(*content + *content_len) = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">        pContent = strstr(*content, <span class=\"string\">\"\\r\\n\\r\\n\"</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">        <span class=\"keyword\">if</span> (pContent == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            sprintf(error_info, <span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">                    <span class=\"string\">\"response data from %s:%d is invalid\"</span>, \\</div><div class=\"line\">                    <span class=\"keyword\">__LINE__</span>, domain_name, port);</div><div class=\"line\"></div><div class=\"line\">            result = EINVAL;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        pContent += <span class=\"number\">4</span>;   <span class=\"comment\">// pointer to the next line</span></div><div class=\"line\">        pSpace = strchr(*content, <span class=\"string\">' '</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">        <span class=\"keyword\">if</span> (pSpace == <span class=\"keyword\">NULL</span> || pSpace &gt;= pContent)</div><div class=\"line\">        &#123;</div><div class=\"line\">            sprintf(error_info, <span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">                    <span class=\"string\">\"response data from %s:%d is invalid\"</span>, \\</div><div class=\"line\">                    <span class=\"keyword\">__LINE__</span>, domain_name, port);</div><div class=\"line\"></div><div class=\"line\">            result = EINVAL;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        *http_status = atoi(pSpace + <span class=\"number\">1</span>);  <span class=\"comment\">// http response status: such as http/1.1 200 ok</span></div><div class=\"line\">        *content_len -= pContent - *content;  <span class=\"comment\">// minus the length of status line: http/1.1 200 ok</span></div><div class=\"line\">        memcpy(*content, pContent, *content_len);  <span class=\"comment\">// remove the status line</span></div><div class=\"line\">        *(*content + *content_len) = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">        *error_info = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">while</span> (<span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">\tclose(sock);</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (result != <span class=\"number\">0</span> &amp;&amp; bNeedAlloc)  <span class=\"comment\">// result !=0: means error occured</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        free(*content);</div><div class=\"line\">        *content = <span class=\"keyword\">NULL</span>;</div><div class=\"line\">        *content_len = <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// return the string ip addr by ip name(maybe is digital ip addr or domain addr)</span></div><div class=\"line\">in_addr_t getIpaddrByName(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name, <span class=\"keyword\">char</span> *buff, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> bufferSize)</div><div class=\"line\">&#123;</div><div class=\"line\">\tstruct in_addr ip_addr;</div><div class=\"line\">\tstruct hostent *ent;</div><div class=\"line\">\tin_addr_t **addr_list;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((*name &gt;= <span class=\"string\">'0'</span> &amp;&amp; *name &lt;= <span class=\"string\">'9'</span>) &amp;&amp;   <span class=\"comment\">// name is the digital ip address </span></div><div class=\"line\">\t\tinet_pton(AF_INET, name, &amp;ip_addr) == <span class=\"number\">1</span>)  <span class=\"comment\">// success</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (buff != <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tsnprintf(buff, bufferSize, <span class=\"string\">\"%s\"</span>, name);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> ip_addr.s_addr;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tent = gethostbyname(name);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (ent == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> INADDR_NONE;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">    addr_list = (in_addr_t **)ent-&gt;h_addr_list;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (addr_list[<span class=\"number\">0</span>] == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> INADDR_NONE;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tmemset(&amp;ip_addr, <span class=\"number\">0</span>, sizeof(ip_addr));</div><div class=\"line\">\tip_addr.s_addr = *(addr_list[<span class=\"number\">0</span>]);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (buff != <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (inet_ntop(AF_INET, &amp;ip_addr, buff, bufferSize) == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t*buff = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> ip_addr.s_addr;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/** connect to server by non-block mode, auto detect socket block mode</span></div><div class=\"line\"> *  parameters:</div><div class=\"line\"> *          sock: the socket, can be block mode</div><div class=\"line\"> *          server_ip: ip address of the server</div><div class=\"line\"> *          server_port: port of the server</div><div class=\"line\"> *          timeout: connect timeout in seconds</div><div class=\"line\"> *  return: error no, 0 success, != 0 fail</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"comment\">#define connectserverbyip_nb_auto(sock, server_ip, server_port, timeout) \\</span></div><div class=\"line\">\tconnectserverbyip_nb_ex(sock, server_ip, server_port, timeout, <span class=\"keyword\">true</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// connect the server by ip , return 0 stands for connect succeed</span></div><div class=\"line\"><span class=\"keyword\">int</span> connectserverbyip_nb_ex(<span class=\"keyword\">int</span> sock, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *server_ip, \\</div><div class=\"line\">\t\t<span class=\"keyword\">const</span> short server_port, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> timeout, \\</div><div class=\"line\">\t\t<span class=\"keyword\">const</span> <span class=\"keyword\">bool</span> auto_detect)</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> result;</div><div class=\"line\">\t<span class=\"keyword\">int</span> flags;</div><div class=\"line\">\t<span class=\"keyword\">bool</span> needRestore;</div><div class=\"line\">\tsocklen_t len;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#ifdef USE_SELECT</span></div><div class=\"line\">\tfd_set rset;</div><div class=\"line\">\tfd_set wset;</div><div class=\"line\">\tstruct timeval tval;</div><div class=\"line\"><span class=\"comment\">#else</span></div><div class=\"line\">\tstruct pollfd pollfds;</div><div class=\"line\"><span class=\"comment\">#endif</span></div><div class=\"line\"></div><div class=\"line\">\tstruct sockaddr_in addr;</div><div class=\"line\">\tstruct sockaddr_in6 addr6;</div><div class=\"line\">    void *dest;</div><div class=\"line\">    <span class=\"keyword\">int</span> size;</div><div class=\"line\"></div><div class=\"line\">    memset(&amp;addr, <span class=\"number\">0</span>, sizeof(struct sockaddr_in));</div><div class=\"line\">    memset(&amp;addr6, <span class=\"number\">0</span>, sizeof(struct sockaddr_in6));</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> ((result=setsockaddrbyip(server_ip, server_port, &amp;addr, &amp;addr6,</div><div class=\"line\">                    &amp;dest, &amp;size)) != <span class=\"number\">0</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (auto_detect)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tflags = fcntl(sock, F_GETFL, <span class=\"number\">0</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (flags &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> errno != <span class=\"number\">0</span> ? errno : EACCES;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((flags &amp; O_NONBLOCK) == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (fcntl(sock, F_SETFL, flags | O_NONBLOCK) &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> errno != <span class=\"number\">0</span> ? errno : EACCES;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\tneedRestore = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tneedRestore = <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tneedRestore = <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\tflags = <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">do</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (connect(sock, (<span class=\"keyword\">const</span> struct sockaddr*)dest, size) &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tresult = errno != <span class=\"number\">0</span> ? errno : EINPROGRESS;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (result != EINPROGRESS)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span>  <span class=\"comment\">// connect return 0: success, -1: failure</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tresult = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// after call connect, we call select or poll to get error if error occurs</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#ifdef USE_SELECT</span></div><div class=\"line\">\t\tFD_ZERO(&amp;rset);</div><div class=\"line\">\t\tFD_ZERO(&amp;wset);</div><div class=\"line\">\t\tFD_SET(sock, &amp;rset);</div><div class=\"line\">\t\tFD_SET(sock, &amp;wset);</div><div class=\"line\">\t\ttval.tv_sec = timeout;</div><div class=\"line\">\t\ttval.tv_usec = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tresult = select(sock+<span class=\"number\">1</span>, &amp;rset, &amp;wset, <span class=\"keyword\">NULL</span>, \\</div><div class=\"line\">\t\t\t\ttimeout &gt; <span class=\"number\">0</span> ? &amp;tval : <span class=\"keyword\">NULL</span>);</div><div class=\"line\"><span class=\"comment\">#else</span></div><div class=\"line\">\t\tpollfds.fd = sock;</div><div class=\"line\">\t\tpollfds.events = POLLIN | POLLOUT;</div><div class=\"line\">\t\tresult = poll(&amp;pollfds, <span class=\"number\">1</span>, <span class=\"number\">1000</span> * timeout);</div><div class=\"line\"><span class=\"comment\">#endif</span></div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (result == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tresult = ETIMEDOUT;</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (result &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tresult = errno != <span class=\"number\">0</span> ? errno : EINTR;</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// means return value &gt; 0</span></div><div class=\"line\">\t\tlen = sizeof(result);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// getsockopt: 0: success, -1:failure</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (getsockopt(sock, SOL_SOCKET, SO_ERROR, &amp;result, &amp;len) &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tresult = errno != <span class=\"number\">0</span> ? errno : EACCES; <span class=\"comment\">// means failure</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125; <span class=\"keyword\">while</span> (<span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (needRestore)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tfcntl(sock, F_SETFL, flags);</div><div class=\"line\">\t&#125;</div><div class=\"line\">  </div><div class=\"line\">\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">get the content of filename, which is saved to *buff, the size of filename is saved to file_size</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"keyword\">int</span> getFileContent(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *filename, <span class=\"keyword\">char</span> **buff, int64_t *file_size)</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> fd;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!isFile(filename))</div><div class=\"line\">    &#123;</div><div class=\"line\">\t\t*buff = <span class=\"keyword\">NULL</span>;</div><div class=\"line\">\t\t*file_size = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span></div><div class=\"line\">                <span class=\"string\">\"%s is not a regular file\"</span>, <span class=\"keyword\">__LINE__</span>, filename);</div><div class=\"line\">        <span class=\"keyword\">return</span> EINVAL;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">\tfd = open(filename, O_RDONLY);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (fd &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t*buff = <span class=\"keyword\">NULL</span>;</div><div class=\"line\">\t\t*file_size = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"open file %s fail, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"errno: %d, error info: %s\"</span>, <span class=\"keyword\">__LINE__</span>, \\</div><div class=\"line\">\t\t\tfilename, errno, STRERROR(errno));</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> errno != <span class=\"number\">0</span> ? errno : ENOENT;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((*file_size=lseek(fd, <span class=\"number\">0</span>, SEEK_END)) &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t*buff = <span class=\"keyword\">NULL</span>;</div><div class=\"line\">\t\t*file_size = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tclose(fd);</div><div class=\"line\">\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"lseek file %s fail, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"errno: %d, error info: %s\"</span>, <span class=\"keyword\">__LINE__</span>, \\</div><div class=\"line\">\t\t\tfilename, errno, STRERROR(errno));</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> errno != <span class=\"number\">0</span> ? errno : EIO;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t*buff = (<span class=\"keyword\">char</span> *)malloc(*file_size + <span class=\"number\">1</span>);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (*buff == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t*file_size = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tclose(fd);</div><div class=\"line\"></div><div class=\"line\">\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"malloc %d bytes fail\"</span>, <span class=\"keyword\">__LINE__</span>, \\</div><div class=\"line\">\t\t\t(<span class=\"keyword\">int</span>)(*file_size + <span class=\"number\">1</span>));</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> errno != <span class=\"number\">0</span> ? errno : ENOMEM;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (lseek(fd, <span class=\"number\">0</span>, SEEK_SET) &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t*buff = <span class=\"keyword\">NULL</span>;</div><div class=\"line\">\t\t*file_size = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tclose(fd);</div><div class=\"line\">\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"lseek file %s fail, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"errno: %d, error info: %s\"</span>, <span class=\"keyword\">__LINE__</span>, \\</div><div class=\"line\">\t\t\tfilename, errno, STRERROR(errno));</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> errno != <span class=\"number\">0</span> ? errno : EIO;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (read(fd, *buff, *file_size) != *file_size)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tfree(*buff);</div><div class=\"line\">\t\t*buff = <span class=\"keyword\">NULL</span>;</div><div class=\"line\">\t\t*file_size = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tclose(fd);</div><div class=\"line\">\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"read from file %s fail, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"errno: %d, error info: %s\"</span>, <span class=\"keyword\">__LINE__</span>, \\</div><div class=\"line\">\t\t\tfilename, errno, STRERROR(errno));</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> errno != <span class=\"number\">0</span> ? errno : EIO;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t(*buff)[*file_size] = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">\tclose(fd);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> iniLoadItemsFromBuffer(<span class=\"keyword\">char</span> *content, IniContext *pContext)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">char</span> *pContent;</div><div class=\"line\">    <span class=\"keyword\">char</span> *new_content;</div><div class=\"line\">    <span class=\"keyword\">int</span> content_len;</div><div class=\"line\">    <span class=\"keyword\">int</span> new_content_len;</div><div class=\"line\"></div><div class=\"line\">    new_content = content;</div><div class=\"line\">    new_content_len = strlen(content);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">do</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        pContent = new_content; <span class=\"comment\">// after get rid of first #@if, process left #@if</span></div><div class=\"line\">        content_len = new_content_len;</div><div class=\"line\">\t\t</div><div class=\"line\">        <span class=\"keyword\">if</span> ((new_content=iniProccessIf(pContent, content_len,</div><div class=\"line\">                        pContext, &amp;new_content_len)) == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> ENOMEM;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">\t\t</div><div class=\"line\">    &#125; <span class=\"keyword\">while</span> (new_content != pContent);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">do</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        pContent = new_content;</div><div class=\"line\">        content_len = new_content_len;</div><div class=\"line\">\t\t</div><div class=\"line\">        <span class=\"keyword\">if</span> ((new_content=iniProccessFor(pContent, content_len,</div><div class=\"line\">                        pContext, &amp;new_content_len)) == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> ENOMEM;</div><div class=\"line\">\t\t</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">while</span> (new_content != pContent);  <span class=\"comment\">// loop processing</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> iniDoLoadItemsFromBuffer(new_content, pContext);</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">function: reslove the content, and get rid of #<span class=\"doctag\">@if</span> and #<span class=\"doctag\">@endif</span>, save to new buffer</div><div class=\"line\">returnd by iniProcessIf, such as:</div><div class=\"line\">content is:</div><div class=\"line\">#<span class=\"doctag\">@if</span> xxx</div><div class=\"line\">...abc</div><div class=\"line\">#<span class=\"doctag\">@endif</span></div><div class=\"line\">...def</div><div class=\"line\"></div><div class=\"line\">new buffer is: </div><div class=\"line\">...abc</div><div class=\"line\">...def</div><div class=\"line\">returned by iniProcessIf</div><div class=\"line\"></div><div class=\"line\">该函数看不懂感觉可以略过不看</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">char</span> *iniProccessIf(<span class=\"keyword\">char</span> *content, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> content_len,</div><div class=\"line\">        IniContext *pContext, <span class=\"keyword\">int</span> *new_content_len)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">char</span> *pStart;</div><div class=\"line\">    <span class=\"keyword\">char</span> *pEnd;</div><div class=\"line\">    <span class=\"keyword\">char</span> *pCondition;</div><div class=\"line\">    <span class=\"keyword\">char</span> *pElse;</div><div class=\"line\">    <span class=\"keyword\">char</span> *pIfPart;</div><div class=\"line\">    <span class=\"keyword\">char</span> *pElsePart;</div><div class=\"line\">    <span class=\"keyword\">int</span> conditionLen;</div><div class=\"line\">    <span class=\"keyword\">int</span> ifPartLen;</div><div class=\"line\">    <span class=\"keyword\">int</span> elsePartLen;</div><div class=\"line\">    <span class=\"keyword\">int</span> copyLen;</div><div class=\"line\">    <span class=\"keyword\">char</span> *newContent;</div><div class=\"line\">    <span class=\"keyword\">char</span> *pDest;</div><div class=\"line\"></div><div class=\"line\">    *new_content_len = content_len;</div><div class=\"line\">\t</div><div class=\"line\">    pStart = strstr(content, _PREPROCESS_TAG_STR_IF);</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (pStart == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> content;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    pCondition = pStart + _PREPROCESS_TAG_LEN_IF;</div><div class=\"line\">    pIfPart = strchr(pCondition, <span class=\"string\">'\\n'</span>);</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (pIfPart == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> content;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    conditionLen = pIfPart - pCondition;</div><div class=\"line\"></div><div class=\"line\">    pEnd = strstr(pIfPart, _PREPROCESS_TAG_STR_ENDIF);</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (pEnd == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> content;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    pElse = strstr(pIfPart, _PREPROCESS_TAG_STR_ELSE);</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (pElse == <span class=\"keyword\">NULL</span> || pElse &gt; pEnd)</div><div class=\"line\">    &#123;</div><div class=\"line\">        ifPartLen = pEnd - pIfPart;</div><div class=\"line\">        pElsePart = <span class=\"keyword\">NULL</span>;</div><div class=\"line\">        elsePartLen = <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        ifPartLen = pElse - pIfPart;</div><div class=\"line\">        pElsePart = strchr(pElse + _PREPROCESS_TAG_LEN_ELSE, <span class=\"string\">'\\n'</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">        <span class=\"keyword\">if</span> (pElsePart == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> content;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        elsePartLen = pEnd - pElsePart;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    newContent = iniAllocContent(pContext, content_len); <span class=\"comment\">// newContent is the buffer address</span></div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (newContent == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">NULL</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    pDest = newContent;</div><div class=\"line\">    copyLen = pStart - content;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (copyLen &gt; <span class=\"number\">0</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        memcpy(pDest, content, copyLen);</div><div class=\"line\">        pDest += copyLen;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (iniCalcCondition(pCondition, conditionLen))</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (ifPartLen &gt; <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            memcpy(pDest, pIfPart, ifPartLen);</div><div class=\"line\">            pDest += ifPartLen;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (elsePartLen &gt; <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            memcpy(pDest, pElsePart, elsePartLen);</div><div class=\"line\">            pDest += elsePartLen;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    copyLen = (content + content_len) - (pEnd + _PREPROCESS_TAG_LEN_ENDIF);</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (copyLen &gt; <span class=\"number\">0</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        memcpy(pDest, pEnd + _PREPROCESS_TAG_LEN_ENDIF, copyLen);</div><div class=\"line\">        pDest += copyLen;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    *pDest = <span class=\"string\">'\\0'</span>;   </div><div class=\"line\">    *new_content_len = pDest - newContent;</div><div class=\"line\">    <span class=\"keyword\">return</span> newContent;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* process the for block: #<span class=\"doctag\">@for</span>  ... #<span class=\"doctag\">@endfor</span></span></div><div class=\"line\">get rid of the #<span class=\"doctag\">@endfor</span>, #<span class=\"doctag\">@for</span>, and expand the for loop which replace &#123;$i&#125; with the real value</div><div class=\"line\">and saved to new buffer returned by iniProcessFor</div><div class=\"line\">该函数与上一个函数类似</div><div class=\"line\"></div><div class=\"line\">*/</div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">char</span> *iniProccessFor(<span class=\"keyword\">char</span> *content, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> content_len,</div><div class=\"line\">        IniContext *pContext, <span class=\"keyword\">int</span> *new_content_len)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">char</span> *pStart;</div><div class=\"line\">    <span class=\"keyword\">char</span> *pEnd;</div><div class=\"line\">    <span class=\"keyword\">char</span> *pForRange;</div><div class=\"line\">    <span class=\"keyword\">char</span> *pForBlock;</div><div class=\"line\">    <span class=\"keyword\">char</span> *id;</div><div class=\"line\">    <span class=\"keyword\">char</span> tag[<span class=\"number\">80</span>];</div><div class=\"line\">    <span class=\"keyword\">char</span> value[<span class=\"number\">16</span>];</div><div class=\"line\">    <span class=\"keyword\">int</span> idLen;</div><div class=\"line\">    <span class=\"keyword\">int</span> rangeLen;</div><div class=\"line\">    <span class=\"keyword\">int</span> forBlockLen;</div><div class=\"line\">    <span class=\"keyword\">int</span> start;</div><div class=\"line\">    <span class=\"keyword\">int</span> end;</div><div class=\"line\">    <span class=\"keyword\">int</span> step;</div><div class=\"line\">    <span class=\"keyword\">int</span> count;</div><div class=\"line\">    <span class=\"keyword\">int</span> i;</div><div class=\"line\">    <span class=\"keyword\">int</span> copyLen;</div><div class=\"line\">    <span class=\"keyword\">int</span> tagLen;</div><div class=\"line\">    <span class=\"keyword\">int</span> valueLen;</div><div class=\"line\">    <span class=\"keyword\">char</span> *newContent;</div><div class=\"line\">    <span class=\"keyword\">char</span> *pDest;</div><div class=\"line\"></div><div class=\"line\">    *new_content_len = content_len;</div><div class=\"line\">    pStart = strstr(content, _PREPROCESS_TAG_STR_FOR);</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (pStart == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> content;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    pForRange = pStart + _PREPROCESS_TAG_LEN_FOR; <span class=\"comment\">// for condition begin</span></div><div class=\"line\">    pForBlock = strchr(pForRange, <span class=\"string\">'\\n'</span>);  <span class=\"comment\">// for block begin</span></div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (pForBlock == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> content;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    rangeLen = pForBlock - pForRange;</div><div class=\"line\"></div><div class=\"line\">    pEnd = strstr(pForBlock, _PREPROCESS_TAG_STR_ENDFOR);</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (pEnd == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> content;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    forBlockLen = pEnd - pForBlock;  <span class=\"comment\">// for block len</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (iniParseForRange(pForRange, rangeLen, &amp;id, &amp;idLen,</div><div class=\"line\">                &amp;start, &amp;end, &amp;step) != <span class=\"number\">0</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">NULL</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (step == <span class=\"number\">0</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">\t\tlogWarning(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span></div><div class=\"line\">                <span class=\"string\">\"invalid step: %d for range: %.*s\"</span>, <span class=\"keyword\">__LINE__</span>,</div><div class=\"line\">                step, rangeLen, pForRange);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">NULL</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    count = (end - start) / step;  <span class=\"comment\">// how many steps</span></div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (count &lt; <span class=\"number\">0</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">\t\tlogWarning(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span></div><div class=\"line\">                <span class=\"string\">\"invalid step: %d for range: %.*s\"</span>, <span class=\"keyword\">__LINE__</span>,</div><div class=\"line\">                step, rangeLen, pForRange);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">NULL</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    newContent = iniAllocContent(pContext, content_len + (forBlockLen + <span class=\"number\">16</span>) * count);</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (newContent == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">NULL</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    pDest = newContent;  <span class=\"comment\">// newContent is the buffer addr to stored for block content</span></div><div class=\"line\">    copyLen = pStart - content;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (copyLen &gt; <span class=\"number\">0</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        memcpy(pDest, content, copyLen);</div><div class=\"line\">        pDest += copyLen;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// id=\"i\", idLen=1, tag will be \"&#123;$i&#125;\", tagLen will be 4 = strlen(\"&#123;$i&#125;\")</span></div><div class=\"line\">    tagLen = sprintf(tag, <span class=\"string\">\"&#123;$%.*s&#125;\"</span>, idLen, id);</div><div class=\"line\">\t<span class=\"comment\">// tagLen is the variable length</span></div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">for</span> (i=start; i&lt;=end; i+=step)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">char</span> *p;</div><div class=\"line\">        <span class=\"keyword\">char</span> *pRemain;</div><div class=\"line\">        <span class=\"keyword\">int</span> remainLen;</div><div class=\"line\"></div><div class=\"line\">        valueLen = sprintf(value, <span class=\"string\">\"%d\"</span>, i);</div><div class=\"line\"></div><div class=\"line\">        pRemain = pForBlock;</div><div class=\"line\">        remainLen = forBlockLen;</div><div class=\"line\">\t\t</div><div class=\"line\">        <span class=\"keyword\">while</span> (remainLen &gt;= tagLen)</div><div class=\"line\">        &#123;</div><div class=\"line\">            p = (<span class=\"keyword\">char</span> *)memmem(pRemain, remainLen, tag, tagLen);</div><div class=\"line\">\t\t\t</div><div class=\"line\">            <span class=\"keyword\">if</span> (p == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">            &#123;</div><div class=\"line\">                memcpy(pDest, pRemain, remainLen);</div><div class=\"line\">                pDest += remainLen;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            copyLen = p - pRemain;</div><div class=\"line\">\t\t\t</div><div class=\"line\">            <span class=\"keyword\">if</span> (copyLen &gt; <span class=\"number\">0</span>)</div><div class=\"line\">            &#123;</div><div class=\"line\">                memcpy(pDest, pRemain, copyLen);</div><div class=\"line\">                pDest += copyLen;</div><div class=\"line\">            &#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">            memcpy(pDest, value, valueLen);</div><div class=\"line\">            pDest += valueLen;</div><div class=\"line\"></div><div class=\"line\">            pRemain = p + tagLen;</div><div class=\"line\">            remainLen -= copyLen + tagLen;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    copyLen = (content + content_len) - (pEnd + _PREPROCESS_TAG_LEN_ENDFOR);</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (copyLen &gt; <span class=\"number\">0</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        memcpy(pDest, pEnd + _PREPROCESS_TAG_LEN_ENDFOR, copyLen);</div><div class=\"line\">        pDest += copyLen;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    *pDest = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">    *new_content_len = pDest - newContent;</div><div class=\"line\">    <span class=\"keyword\">return</span> newContent;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//alloc space for the length of content_len, return the buffer addr</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">char</span> *iniAllocContent(IniContext *pContext, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> content_len)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">char</span> *buff;</div><div class=\"line\">    DynamicContents *pDynamicContents;</div><div class=\"line\">    pDynamicContents = iniAllocDynamicContent(pContext);</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (pDynamicContents == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        logError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span></div><div class=\"line\">                <span class=\"string\">\"malloc dynamic contents fail\"</span>, <span class=\"keyword\">__LINE__</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">NULL</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// default: pDynamicContents-&gt;count = 0, pDynamicContents-&gt;alloc_count=0</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (pDynamicContents-&gt;count &gt;= pDynamicContents-&gt;alloc_count)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> alloc_count;</div><div class=\"line\">        <span class=\"keyword\">int</span> bytes;</div><div class=\"line\">        <span class=\"keyword\">char</span> **contents;</div><div class=\"line\">\t\t</div><div class=\"line\">        <span class=\"keyword\">if</span> (pDynamicContents-&gt;alloc_count == <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            alloc_count = <span class=\"number\">8</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            alloc_count = pDynamicContents-&gt;alloc_count * <span class=\"number\">2</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">\t\t</div><div class=\"line\">        bytes = sizeof(<span class=\"keyword\">char</span> *) * alloc_count;</div><div class=\"line\">        contents = (<span class=\"keyword\">char</span> **)malloc(bytes);</div><div class=\"line\">\t\t</div><div class=\"line\">        <span class=\"keyword\">if</span> (contents == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            logError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span></div><div class=\"line\">                    <span class=\"string\">\"malloc %d bytes fail\"</span>, <span class=\"keyword\">__LINE__</span>, bytes);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">NULL</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">\t\t</div><div class=\"line\">        memset(contents, <span class=\"number\">0</span>, bytes);</div><div class=\"line\">\t\t</div><div class=\"line\">        <span class=\"keyword\">if</span> (pDynamicContents-&gt;count &gt; <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            memcpy(contents, pDynamicContents-&gt;contents,</div><div class=\"line\">                    sizeof(<span class=\"keyword\">char</span> *) * pDynamicContents-&gt;count);</div><div class=\"line\">            free(pDynamicContents-&gt;contents);</div><div class=\"line\">        &#125;</div><div class=\"line\">\t\t</div><div class=\"line\">        pDynamicContents-&gt;contents = contents;</div><div class=\"line\">        pDynamicContents-&gt;alloc_count = alloc_count;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    buff = malloc(content_len);</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (buff == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        logError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span></div><div class=\"line\">                <span class=\"string\">\"malloc %d bytes fail\"</span>, <span class=\"keyword\">__LINE__</span>, content_len);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">NULL</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    pDynamicContents-&gt;contents[pDynamicContents-&gt;count++] = buff;</div><div class=\"line\">    <span class=\"keyword\">return</span> buff;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// find pContext in g_dynamic_contents, if find: return, or add pContext to g_dynamic_contents</span></div><div class=\"line\"><span class=\"keyword\">static</span> DynamicContents *iniAllocDynamicContent(IniContext *pContext)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> i;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (g_dynamic_contents[g_dynamic_content_index].context == pContext)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &amp;g_dynamic_contents[g_dynamic_content_index].dynamicContents;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (g_dynamic_content_count &gt; <span class=\"number\">0</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>; i&lt;_MAX_DYNAMIC_CONTENTS; i++)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (g_dynamic_contents[i].context == pContext)</div><div class=\"line\">            &#123;</div><div class=\"line\">                g_dynamic_content_index = i;</div><div class=\"line\">                <span class=\"keyword\">return</span> &amp;g_dynamic_contents[g_dynamic_content_index].dynamicContents;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (g_dynamic_content_count == _MAX_DYNAMIC_CONTENTS)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">NULL</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>; i&lt;_MAX_DYNAMIC_CONTENTS; i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!g_dynamic_contents[i].used)</div><div class=\"line\">        &#123;</div><div class=\"line\">            g_dynamic_contents[i].used = <span class=\"keyword\">true</span>;</div><div class=\"line\">            g_dynamic_contents[i].context = pContext;</div><div class=\"line\">            g_dynamic_content_index = i;</div><div class=\"line\">            g_dynamic_content_count++;</div><div class=\"line\">            <span class=\"keyword\">return</span> &amp;g_dynamic_contents[g_dynamic_content_index].dynamicContents;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">NULL</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">function: resolve the format:</div><div class=\"line\">%&#123;LOCAL_IP&#125; in [10.0.11.89,10.0.11.99]</div><div class=\"line\">%&#123;LOCAL_HOST&#125; in [10.0.11.89,10.0.11.99]</div><div class=\"line\">and compare g_local_host_ip_addrs array, check every elem in g_local_host_ip_addrs is</div><div class=\"line\">whether exists in [10.0.11.89,10.0.11.99] or not, exists return true or return false</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> iniCalcCondition(<span class=\"keyword\">char</span> *condition, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> condition_len)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">     * current only support %&#123;VARIABLE&#125; in [x,y,..]</div><div class=\"line\">     * support variables are: LOCAL_IP and LOCAL_HOST</div><div class=\"line\">     * such as: %&#123;LOCAL_IP&#125; in [10.0.11.89,10.0.11.99]</div><div class=\"line\">     **/</div><div class=\"line\"><span class=\"comment\">#define _PREPROCESS_VARIABLE_TYPE_LOCAL_IP   1</span></div><div class=\"line\"><span class=\"comment\">#define _PREPROCESS_VARIABLE_TYPE_LOCAL_HOST 2</span></div><div class=\"line\"><span class=\"comment\">#define _PREPROCESS_MAX_LIST_VALUE_COUNT    32</span></div><div class=\"line\">    <span class=\"keyword\">char</span> *p;</div><div class=\"line\">    <span class=\"keyword\">char</span> *pEnd;</div><div class=\"line\">    <span class=\"keyword\">char</span> *pSquareEnd;</div><div class=\"line\">    <span class=\"keyword\">char</span> *values[_PREPROCESS_MAX_LIST_VALUE_COUNT];</div><div class=\"line\">    <span class=\"keyword\">int</span> varType;</div><div class=\"line\">    <span class=\"keyword\">int</span> count;</div><div class=\"line\">    <span class=\"keyword\">int</span> i;</div><div class=\"line\"></div><div class=\"line\">    pEnd = condition + condition_len;</div><div class=\"line\">    p = pEnd - <span class=\"number\">1</span>;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">while</span> (p &gt; condition &amp;&amp; (*p == <span class=\"string\">' '</span> || *p == <span class=\"string\">'\\t'</span>))</div><div class=\"line\">    &#123;</div><div class=\"line\">        p--;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (*p != <span class=\"string\">']'</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">\t\tlogWarning(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span></div><div class=\"line\">                <span class=\"string\">\"expect \\\"]\\\", condition: %.*s\"</span>, <span class=\"keyword\">__LINE__</span>,</div><div class=\"line\">                condition_len, condition);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    pSquareEnd = p;</div><div class=\"line\"></div><div class=\"line\">    p = condition;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">while</span> (p &lt; pEnd &amp;&amp; (*p == <span class=\"string\">' '</span> || *p == <span class=\"string\">'\\t'</span>))</div><div class=\"line\">    &#123;</div><div class=\"line\">        p++;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (pEnd - p &lt; <span class=\"number\">12</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">\t\tlogWarning(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span></div><div class=\"line\">                <span class=\"string\">\"unkown condition: %.*s\"</span>, <span class=\"keyword\">__LINE__</span>,</div><div class=\"line\">                condition_len, condition);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (memcmp(p, _PREPROCESS_VARIABLE_STR_LOCAL_IP,</div><div class=\"line\">                _PREPROCESS_VARIABLE_LEN_LOCAL_IP) == <span class=\"number\">0</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        varType = _PREPROCESS_VARIABLE_TYPE_LOCAL_IP;</div><div class=\"line\">        p += _PREPROCESS_VARIABLE_LEN_LOCAL_IP;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (memcmp(p, _PREPROCESS_VARIABLE_STR_LOCAL_HOST,</div><div class=\"line\">                _PREPROCESS_VARIABLE_LEN_LOCAL_HOST) == <span class=\"number\">0</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        varType = _PREPROCESS_VARIABLE_TYPE_LOCAL_HOST;</div><div class=\"line\">        p += _PREPROCESS_VARIABLE_LEN_LOCAL_HOST;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">    &#123;</div><div class=\"line\">\t\tlogWarning(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span></div><div class=\"line\">                <span class=\"string\">\"unkown condition: %.*s\"</span>, <span class=\"keyword\">__LINE__</span>,</div><div class=\"line\">                condition_len, condition);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (p &lt; pEnd &amp;&amp; (*p == <span class=\"string\">' '</span> || *p == <span class=\"string\">'\\t'</span>))</div><div class=\"line\">    &#123;</div><div class=\"line\">        p++;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (pEnd - p &lt; <span class=\"number\">4</span> || memcmp(p, <span class=\"string\">\"in\"</span>, <span class=\"number\">2</span>) != <span class=\"number\">0</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">\t\tlogWarning(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span></div><div class=\"line\">                <span class=\"string\">\"expect \\\"in\\\", condition: %.*s\"</span>, <span class=\"keyword\">__LINE__</span>,</div><div class=\"line\">                condition_len, condition);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    p += <span class=\"number\">2</span>;  <span class=\"comment\">//skip in</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (p &lt; pEnd &amp;&amp; (*p == <span class=\"string\">' '</span> || *p == <span class=\"string\">'\\t'</span>))</div><div class=\"line\">    &#123;</div><div class=\"line\">        p++;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (*p != <span class=\"string\">'['</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">\t\tlogWarning(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span></div><div class=\"line\">                <span class=\"string\">\"expect \\\"[\\\", condition: %.*s\"</span>, <span class=\"keyword\">__LINE__</span>,</div><div class=\"line\">                condition_len, condition);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    *pSquareEnd = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">    count = splitEx(p + <span class=\"number\">1</span>, <span class=\"string\">','</span>, values, _PREPROCESS_MAX_LIST_VALUE_COUNT);</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>; i&lt;count; i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        values[i] = trim(values[i]);</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (varType == _PREPROCESS_VARIABLE_TYPE_LOCAL_HOST)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">char</span> host[<span class=\"number\">128</span>];</div><div class=\"line\">\t\t</div><div class=\"line\">        <span class=\"keyword\">if</span> (gethostname(host, sizeof(host)) != <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            logWarning(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span></div><div class=\"line\">                    <span class=\"string\">\"call gethostname fail, \"</span></div><div class=\"line\">                    <span class=\"string\">\"errno: %d, error info: %s\"</span>, <span class=\"keyword\">__LINE__</span>,</div><div class=\"line\">                    errno, STRERROR(errno));</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">\t\t</div><div class=\"line\">        <span class=\"keyword\">return</span> iniMatchValue(host, values, count);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *local_ip;</div><div class=\"line\">        local_ip = get_first_local_ip();</div><div class=\"line\">\t\t</div><div class=\"line\">        <span class=\"keyword\">while</span> (local_ip != <span class=\"keyword\">NULL</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (iniMatchValue(local_ip, values, count))</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">            local_ip = get_next_local_ip(local_ip);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// find target in array: values, if find return true, else return false</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> iniMatchValue(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *target, <span class=\"keyword\">char</span> **values, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> count)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> i;</div><div class=\"line\">    <span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>; i&lt;count; i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (strcmp(target, values[i]) == <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// get a integer from str ended by pEnd, nlen is the length of integer</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">char</span> *iniGetInteger(<span class=\"keyword\">char</span> *str, <span class=\"keyword\">char</span> *pEnd, <span class=\"keyword\">int</span> *nlen)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">char</span> *p;</div><div class=\"line\">    <span class=\"keyword\">char</span> *pNumber;</div><div class=\"line\"></div><div class=\"line\">    p = str;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">while</span> (p &lt; pEnd &amp;&amp; (*p == <span class=\"string\">' '</span> || *p == <span class=\"string\">'\\t'</span>))</div><div class=\"line\">    &#123;</div><div class=\"line\">        p++;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    pNumber = p;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">while</span> (p &lt; pEnd &amp;&amp; (*p &gt;= <span class=\"string\">'0'</span> &amp;&amp; *p &lt;= <span class=\"string\">'9'</span>))</div><div class=\"line\">    &#123;</div><div class=\"line\">        p++;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    *nlen = p - pNumber;</div><div class=\"line\">    <span class=\"keyword\">return</span> pNumber;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// parse the format: #@for i from 0 to 15 step 1</span></div><div class=\"line\"><span class=\"comment\">// *id pointer to i, idLen=1, start=0, end=15, step=1</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> iniParseForRange(<span class=\"keyword\">char</span> *range, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> range_len,</div><div class=\"line\">        <span class=\"keyword\">char</span> **id, <span class=\"keyword\">int</span> *idLen, <span class=\"keyword\">int</span> *start, <span class=\"keyword\">int</span> *end, <span class=\"keyword\">int</span> *step)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     *</div><div class=\"line\">     * #<span class=\"doctag\">@for</span> i from 0 to 15 step 1</div><div class=\"line\">     */</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">char</span> *p;</div><div class=\"line\">    <span class=\"keyword\">char</span> *pEnd;</div><div class=\"line\">    <span class=\"keyword\">char</span> *pNumber;</div><div class=\"line\">    <span class=\"keyword\">int</span> nlen;</div><div class=\"line\"></div><div class=\"line\">    pEnd = range + range_len;</div><div class=\"line\">    p = range;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">while</span> (p &lt; pEnd &amp;&amp; (*p == <span class=\"string\">' '</span> || *p == <span class=\"string\">'\\t'</span>))</div><div class=\"line\">    &#123;</div><div class=\"line\">        p++;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (pEnd - p &lt; <span class=\"number\">10</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">\t\tlogWarning(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span></div><div class=\"line\">                <span class=\"string\">\"unkown for range: %.*s\"</span>, <span class=\"keyword\">__LINE__</span>,</div><div class=\"line\">                range_len, range);</div><div class=\"line\">        <span class=\"keyword\">return</span> EINVAL;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    *id = p;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">while</span> (p &lt; pEnd &amp;&amp; !(*p == <span class=\"string\">' '</span> || *p == <span class=\"string\">'\\t'</span>))</div><div class=\"line\">    &#123;</div><div class=\"line\">        p++;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    *idLen = p - *id;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (*idLen == <span class=\"number\">0</span> || *idLen &gt; <span class=\"number\">64</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">\t\tlogWarning(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span></div><div class=\"line\">                <span class=\"string\">\"invalid for range: %.*s\"</span>, <span class=\"keyword\">__LINE__</span>,</div><div class=\"line\">                range_len, range);</div><div class=\"line\">        <span class=\"keyword\">return</span> EINVAL;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (pEnd - p &lt; <span class=\"number\">8</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">\t\tlogWarning(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span></div><div class=\"line\">                <span class=\"string\">\"invalid for range: %.*s\"</span>, <span class=\"keyword\">__LINE__</span>,</div><div class=\"line\">                range_len, range);</div><div class=\"line\">        <span class=\"keyword\">return</span> EINVAL;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    p++;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">while</span> (p &lt; pEnd &amp;&amp; (*p == <span class=\"string\">' '</span> || *p == <span class=\"string\">'\\t'</span>))</div><div class=\"line\">    &#123;</div><div class=\"line\">        p++;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (!(memcmp(p, _PREPROCESS_TAG_STR_FOR_FROM,</div><div class=\"line\">                    _PREPROCESS_TAG_LEN_FOR_FROM) == <span class=\"number\">0</span> &amp;&amp;</div><div class=\"line\">                (*(p+_PREPROCESS_TAG_LEN_FOR_FROM) == <span class=\"string\">' '</span> ||</div><div class=\"line\">                 *(p+_PREPROCESS_TAG_LEN_FOR_FROM) == <span class=\"string\">'\\t'</span>)))</div><div class=\"line\">    &#123;</div><div class=\"line\">\t\tlogWarning(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span></div><div class=\"line\">                <span class=\"string\">\"invalid for range: %.*s\"</span>, <span class=\"keyword\">__LINE__</span>,</div><div class=\"line\">                range_len, range);</div><div class=\"line\">        <span class=\"keyword\">return</span> EINVAL;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    p += _PREPROCESS_TAG_LEN_FOR_FROM + <span class=\"number\">1</span>;</div><div class=\"line\">    pNumber = iniGetInteger(p, pEnd, &amp;nlen);</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (nlen == <span class=\"number\">0</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">\t\tlogWarning(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span></div><div class=\"line\">                <span class=\"string\">\"invalid for range: %.*s\"</span>, <span class=\"keyword\">__LINE__</span>,</div><div class=\"line\">                range_len, range);</div><div class=\"line\">        <span class=\"keyword\">return</span> EINVAL;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    *start = atoi(pNumber);  <span class=\"comment\">//atoi meets non-numbers will stop transfer</span></div><div class=\"line\">    p = pNumber + nlen;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (pEnd - p &lt; <span class=\"number\">4</span> || !(*p == <span class=\"string\">' '</span> || *p == <span class=\"string\">'\\t'</span>))</div><div class=\"line\">    &#123;</div><div class=\"line\">\t\tlogWarning(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span></div><div class=\"line\">                <span class=\"string\">\"invalid for range: %.*s\"</span>, <span class=\"keyword\">__LINE__</span>,</div><div class=\"line\">                range_len, range);</div><div class=\"line\">        <span class=\"keyword\">return</span> EINVAL;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    p++;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">while</span> (p &lt; pEnd &amp;&amp; (*p == <span class=\"string\">' '</span> || *p == <span class=\"string\">'\\t'</span>))</div><div class=\"line\">    &#123;</div><div class=\"line\">        p++;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (!(memcmp(p, _PREPROCESS_TAG_STR_FOR_TO,</div><div class=\"line\">                    _PREPROCESS_TAG_LEN_FOR_TO) == <span class=\"number\">0</span> &amp;&amp;</div><div class=\"line\">                (*(p+_PREPROCESS_TAG_LEN_FOR_TO) == <span class=\"string\">' '</span> ||</div><div class=\"line\">                 *(p+_PREPROCESS_TAG_LEN_FOR_TO) == <span class=\"string\">'\\t'</span>)))</div><div class=\"line\">    &#123;</div><div class=\"line\">\t\tlogWarning(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span></div><div class=\"line\">                <span class=\"string\">\"unkown for range: %.*s\"</span>, <span class=\"keyword\">__LINE__</span>,</div><div class=\"line\">                range_len, range);</div><div class=\"line\">        <span class=\"keyword\">return</span> EINVAL;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    p += _PREPROCESS_TAG_LEN_FOR_TO + <span class=\"number\">1</span>;</div><div class=\"line\">    pNumber = iniGetInteger(p, pEnd, &amp;nlen);</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (nlen == <span class=\"number\">0</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">\t\tlogWarning(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span></div><div class=\"line\">                <span class=\"string\">\"invalid for range: %.*s\"</span>, <span class=\"keyword\">__LINE__</span>,</div><div class=\"line\">                range_len, range);</div><div class=\"line\">        <span class=\"keyword\">return</span> EINVAL;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    *end = atoi(pNumber);</div><div class=\"line\">    p = pNumber + nlen;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (p == pEnd) <span class=\"comment\">// default step is set to 1</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        *step = <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!(*p == <span class=\"string\">' '</span> || *p == <span class=\"string\">'\\t'</span>))</div><div class=\"line\">    &#123;</div><div class=\"line\">\t\tlogWarning(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span></div><div class=\"line\">                <span class=\"string\">\"invalid for range: %.*s\"</span>, <span class=\"keyword\">__LINE__</span>,</div><div class=\"line\">                range_len, range);</div><div class=\"line\">        <span class=\"keyword\">return</span> EINVAL;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">while</span> (p &lt; pEnd &amp;&amp; (*p == <span class=\"string\">' '</span> || *p == <span class=\"string\">'\\t'</span>))</div><div class=\"line\">    &#123;</div><div class=\"line\">        p++;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (!(memcmp(p, _PREPROCESS_TAG_STR_FOR_STEP,</div><div class=\"line\">                    _PREPROCESS_TAG_LEN_FOR_STEP) == <span class=\"number\">0</span> &amp;&amp;</div><div class=\"line\">                (*(p+_PREPROCESS_TAG_LEN_FOR_STEP) == <span class=\"string\">' '</span> ||</div><div class=\"line\">                 *(p+_PREPROCESS_TAG_LEN_FOR_STEP) == <span class=\"string\">'\\t'</span>)))</div><div class=\"line\">    &#123;</div><div class=\"line\">\t\tlogWarning(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span></div><div class=\"line\">                <span class=\"string\">\"unkown for range: %.*s\"</span>, <span class=\"keyword\">__LINE__</span>,</div><div class=\"line\">                range_len, range);</div><div class=\"line\">        <span class=\"keyword\">return</span> EINVAL;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    p += _PREPROCESS_TAG_LEN_FOR_STEP + <span class=\"number\">1</span>;</div><div class=\"line\">    pNumber = iniGetInteger(p, pEnd, &amp;nlen);</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (nlen == <span class=\"number\">0</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">\t\tlogWarning(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span></div><div class=\"line\">                <span class=\"string\">\"invalid for range: %.*s\"</span>, <span class=\"keyword\">__LINE__</span>,</div><div class=\"line\">                range_len, range);</div><div class=\"line\">        <span class=\"keyword\">return</span> EINVAL;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    *step = atoi(pNumber);</div><div class=\"line\">    p = pNumber + nlen;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">while</span> (p &lt; pEnd &amp;&amp; (*p == <span class=\"string\">' '</span> || *p == <span class=\"string\">'\\t'</span>))</div><div class=\"line\">    &#123;</div><div class=\"line\">        p++;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (p != pEnd)</div><div class=\"line\">    &#123;</div><div class=\"line\">\t\tlogWarning(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span></div><div class=\"line\">                <span class=\"string\">\"invalid for range: %.*s\"</span>, <span class=\"keyword\">__LINE__</span>,</div><div class=\"line\">                range_len, range);</div><div class=\"line\">        <span class=\"keyword\">return</span> EINVAL;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// content is the conf file content which has been preProcessed</span></div><div class=\"line\"><span class=\"comment\">// return 0: success</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> iniDoLoadItemsFromBuffer(<span class=\"keyword\">char</span> *content, IniContext *pContext)</div><div class=\"line\">&#123;</div><div class=\"line\">    AnnotationMap *pAnnoMap;</div><div class=\"line\">\tIniSection *pSection;</div><div class=\"line\">\tIniItem *pItem;</div><div class=\"line\">\t<span class=\"keyword\">char</span> *pLine;</div><div class=\"line\">\t<span class=\"keyword\">char</span> *pLastEnd;</div><div class=\"line\">\t<span class=\"keyword\">char</span> *pEqualChar;</div><div class=\"line\">    <span class=\"keyword\">char</span> *pItemName;</div><div class=\"line\">    <span class=\"keyword\">char</span> *pAnnoItemLine;</div><div class=\"line\">\t<span class=\"keyword\">char</span> *pIncludeFilename;</div><div class=\"line\">    <span class=\"keyword\">char</span> *pItemValues[<span class=\"number\">100</span>];</div><div class=\"line\">    <span class=\"keyword\">char</span> pFuncName[FAST_INI_ITEM_NAME_LEN + <span class=\"number\">1</span>];</div><div class=\"line\">\t<span class=\"keyword\">char</span> full_filename[MAX_PATH_SIZE];</div><div class=\"line\">    <span class=\"keyword\">int</span> i;</div><div class=\"line\">\t<span class=\"keyword\">int</span> nLineLen;</div><div class=\"line\">\t<span class=\"keyword\">int</span> nNameLen;</div><div class=\"line\">    <span class=\"keyword\">int</span> nItemCnt;</div><div class=\"line\">\t<span class=\"keyword\">int</span> nValueLen;</div><div class=\"line\">\t<span class=\"keyword\">int</span> result;</div><div class=\"line\">    <span class=\"keyword\">int</span> isAnnotation;</div><div class=\"line\"></div><div class=\"line\">\tresult = <span class=\"number\">0</span>;</div><div class=\"line\">    pAnnoItemLine = <span class=\"keyword\">NULL</span>;</div><div class=\"line\">    isAnnotation = <span class=\"number\">0</span>;</div><div class=\"line\">    *pFuncName = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">\tpLastEnd = content - <span class=\"number\">1</span>;</div><div class=\"line\">\tpSection = pContext-&gt;current_section;</div><div class=\"line\">    pItem = pSection-&gt;items + pSection-&gt;count;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">while</span> (pLastEnd != <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tpLine = pLastEnd + <span class=\"number\">1</span>;  <span class=\"comment\">// pointer to the begin of a line</span></div><div class=\"line\">\t\tpLastEnd = strchr(pLine, <span class=\"string\">'\\n'</span>); <span class=\"comment\">// pointer to the end of a line</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (pLastEnd != <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t*pLastEnd = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (isAnnotation &amp;&amp; pLine != pAnnoItemLine)</div><div class=\"line\">        &#123;</div><div class=\"line\">            logWarning(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">                <span class=\"string\">\"the @function annotation line \"</span> \\</div><div class=\"line\">                <span class=\"string\">\"must follow by key=value line!\"</span>, <span class=\"keyword\">__LINE__</span>);</div><div class=\"line\">            isAnnotation = <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (*pLine == <span class=\"string\">'#'</span> &amp;&amp; \\</div><div class=\"line\">\t\t\tstrncasecmp(pLine+<span class=\"number\">1</span>, <span class=\"string\">\"include\"</span>, <span class=\"number\">7</span>) == <span class=\"number\">0</span> &amp;&amp; \\</div><div class=\"line\">\t\t\t(*(pLine+<span class=\"number\">8</span>) == <span class=\"string\">' '</span> || *(pLine+<span class=\"number\">8</span>) == <span class=\"string\">'\\t'</span>))</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tpIncludeFilename = strdup(pLine + <span class=\"number\">9</span>);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (pIncludeFilename == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">\"strdup %d bytes fail\"</span>, <span class=\"keyword\">__LINE__</span>, \\</div><div class=\"line\">\t\t\t\t\t(<span class=\"keyword\">int</span>)strlen(pLine + <span class=\"number\">9</span>) + <span class=\"number\">1</span>);</div><div class=\"line\">\t\t\t\tresult = errno != <span class=\"number\">0</span> ? errno : ENOMEM;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\ttrim(pIncludeFilename);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (strncasecmp(pIncludeFilename, <span class=\"string\">\"http://\"</span>, <span class=\"number\">7</span>) == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tsnprintf(full_filename, sizeof(full_filename),\\</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">\"%s\"</span>, pIncludeFilename);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (*pIncludeFilename == <span class=\"string\">'/'</span>)</div><div class=\"line\">\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\tsnprintf(full_filename, sizeof(full_filename), \\</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">\"%s\"</span>, pIncludeFilename);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\tsnprintf(full_filename, sizeof(full_filename), \\</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">\"%s/%s\"</span>, pContext-&gt;config_path, \\</div><div class=\"line\">\t\t\t\t\t pIncludeFilename);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!fileExists(full_filename))</div><div class=\"line\">\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t\t\t\t<span class=\"string\">\"include file \\\"%s\\\" not exists, \"</span> \\</div><div class=\"line\">\t\t\t\t\t\t<span class=\"string\">\"line: \\\"%s\\\"\"</span>, <span class=\"keyword\">__LINE__</span>, \\</div><div class=\"line\">\t\t\t\t\t\tpIncludeFilename, pLine);</div><div class=\"line\">\t\t\t\t\tfree(pIncludeFilename);</div><div class=\"line\">\t\t\t\t\tresult = ENOENT;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">            pContext-&gt;current_section = &amp;pContext-&gt;global;</div><div class=\"line\">\t\t\tresult = iniDoLoadFromFile(full_filename, pContext); <span class=\"comment\">// call again</span></div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (result != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tfree(pIncludeFilename);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">            pContext-&gt;current_section = &amp;pContext-&gt;global; <span class=\"comment\">// 将当前处理的section指向pContext-&gt;global</span></div><div class=\"line\">\t\t\tpSection = pContext-&gt;current_section;</div><div class=\"line\">            pItem = pSection-&gt;items + pSection-&gt;count;  <span class=\"comment\">//must re-asign</span></div><div class=\"line\"></div><div class=\"line\">\t\t\tfree(pIncludeFilename);</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((*pLine == <span class=\"string\">'#'</span> &amp;&amp; \\</div><div class=\"line\">            strncasecmp(pLine+<span class=\"number\">1</span>, <span class=\"string\">\"@function\"</span>, <span class=\"number\">9</span>) == <span class=\"number\">0</span> &amp;&amp; \\</div><div class=\"line\">            (*(pLine+<span class=\"number\">10</span>) == <span class=\"string\">' '</span> || *(pLine+<span class=\"number\">10</span>) == <span class=\"string\">'\\t'</span>)))  <span class=\"comment\">// 是否是@function annotation</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!pContext-&gt;ignore_annotation) </div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">                nNameLen = strlen(pLine + <span class=\"number\">11</span>);</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">                <span class=\"keyword\">if</span> (nNameLen &gt; FAST_INI_ITEM_NAME_LEN)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    nNameLen = FAST_INI_ITEM_NAME_LEN;</div><div class=\"line\">                &#125;</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">                memcpy(pFuncName, pLine + <span class=\"number\">11</span>, nNameLen);</div><div class=\"line\">                pFuncName[nNameLen] = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">                trim(pFuncName);</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">                <span class=\"keyword\">if</span> ((<span class=\"keyword\">int</span>)strlen(pFuncName) &gt; <span class=\"number\">0</span>)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    isAnnotation = <span class=\"number\">1</span>;</div><div class=\"line\">                    pAnnoItemLine = pLastEnd + <span class=\"number\">1</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">else</span></div><div class=\"line\">                &#123;</div><div class=\"line\">                    logWarning(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">                            <span class=\"string\">\"the function name of annotation line is empty\"</span>, \\</div><div class=\"line\">                            <span class=\"keyword\">__LINE__</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">            &#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">\t\ttrim(pLine);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (*pLine == <span class=\"string\">'#'</span> || *pLine == <span class=\"string\">'\\0'</span>) </div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tnLineLen = strlen(pLine);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (*pLine == <span class=\"string\">'['</span> &amp;&amp; *(pLine + (nLineLen - <span class=\"number\">1</span>)) == <span class=\"string\">']'</span>) <span class=\"comment\">//section</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">char</span> *section_name;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> section_len;</div><div class=\"line\"></div><div class=\"line\">\t\t\t*(pLine + (nLineLen - <span class=\"number\">1</span>)) = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">\t\t\tsection_name = pLine + <span class=\"number\">1</span>; <span class=\"comment\">//skip [</span></div><div class=\"line\"></div><div class=\"line\">\t\t\ttrim(section_name);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (*section_name == <span class=\"string\">'\\0'</span>) <span class=\"comment\">//global section</span></div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tpContext-&gt;current_section = &amp;pContext-&gt;global;</div><div class=\"line\">\t\t\t\tpSection = pContext-&gt;current_section;</div><div class=\"line\">                pItem = pSection-&gt;items + pSection-&gt;count;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\tsection_len = strlen(section_name);</div><div class=\"line\">\t\t\tpSection = (IniSection *)hash_find(&amp;pContext-&gt;sections,\\</div><div class=\"line\">\t\t\t\t\tsection_name, section_len);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (pSection == <span class=\"keyword\">NULL</span>)  <span class=\"comment\">// not find</span></div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tpSection = (IniSection *)malloc(sizeof(IniSection));</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (pSection == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\tresult = errno != <span class=\"number\">0</span> ? errno : ENOMEM;</div><div class=\"line\">\t\t\t\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span>\\</div><div class=\"line\">\t\t\t\t\t\t<span class=\"string\">\"malloc %d bytes fail, \"</span> \\</div><div class=\"line\">\t\t\t\t\t\t<span class=\"string\">\"errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">__LINE__</span>, \\</div><div class=\"line\">\t\t\t\t\t\t(<span class=\"keyword\">int</span>)sizeof(IniSection), \\</div><div class=\"line\">\t\t\t\t\t\tresult, STRERROR(result));</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\tmemset(pSection, <span class=\"number\">0</span>, sizeof(IniSection));</div><div class=\"line\">\t\t\t\tresult = hash_insert(&amp;pContext-&gt;sections, \\</div><div class=\"line\">\t\t\t\t\t  section_name, section_len, pSection);</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (result &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\tresult *= <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t\t\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span>\\</div><div class=\"line\">\t\t\t\t\t\t<span class=\"string\">\"insert into hash table fail, \"</span>\\</div><div class=\"line\">\t\t\t\t\t\t<span class=\"string\">\"errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">__LINE__</span>, result, \\</div><div class=\"line\">\t\t\t\t\t\tSTRERROR(result));</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\tresult = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\tpContext-&gt;current_section = pSection; </div><div class=\"line\">                        pItem = pSection-&gt;items + pSection-&gt;count;</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tpEqualChar = strchr(pLine, <span class=\"string\">'='</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (pEqualChar == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tnNameLen = pEqualChar - pLine;</div><div class=\"line\">\t\tnValueLen = strlen(pLine) - (nNameLen + <span class=\"number\">1</span>); <span class=\"comment\">// means we can not have ' ' or '\\t' before '=' and after '='</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (nNameLen &gt; FAST_INI_ITEM_NAME_LEN)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tnNameLen = FAST_INI_ITEM_NAME_LEN;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (nValueLen &gt; FAST_INI_ITEM_VALUE_LEN)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tnValueLen = FAST_INI_ITEM_VALUE_LEN;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (pSection-&gt;count &gt;= pSection-&gt;alloc_count)</div><div class=\"line\">        &#123;</div><div class=\"line\">            result = remallocSection(pSection, &amp;pItem);</div><div class=\"line\">\t\t\t</div><div class=\"line\">            <span class=\"keyword\">if</span> (result)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tmemcpy(pItem-&gt;name, pLine, nNameLen);</div><div class=\"line\">\t\tmemcpy(pItem-&gt;value, pEqualChar + <span class=\"number\">1</span>, nValueLen); <span class=\"comment\">// means we can not have ' ' or '\\t' before '=' and after '='</span></div><div class=\"line\"></div><div class=\"line\">\t\ttrim(pItem-&gt;name);  <span class=\"comment\">// it allow has space before or after '='</span></div><div class=\"line\">\t\ttrim(pItem-&gt;value);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (isAnnotation) <span class=\"comment\">// access the global variable: g_annotataionMap and make some process</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            isAnnotation = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (g_annotataionMap == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">            &#123;</div><div class=\"line\">                logWarning(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">                    <span class=\"string\">\"not set annotataionMap and (%s) will use \"</span> \\</div><div class=\"line\">                    <span class=\"string\">\"the item value (%s)\"</span>, <span class=\"keyword\">__LINE__</span>, pItem-&gt;name,</div><div class=\"line\">                    pItem-&gt;value);</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">                pSection-&gt;count++;</div><div class=\"line\">                pItem++;</div><div class=\"line\">                <span class=\"keyword\">continue</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            nItemCnt = <span class=\"number\">-1</span>;</div><div class=\"line\">            pAnnoMap = g_annotataionMap;</div><div class=\"line\">\t\t\t</div><div class=\"line\">            <span class=\"keyword\">while</span> (pAnnoMap-&gt;func_name)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (strcmp(pFuncName, pAnnoMap-&gt;func_name) == <span class=\"number\">0</span>)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (pAnnoMap-&gt;func_init)</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        pAnnoMap-&gt;func_init();</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (pAnnoMap-&gt;func_get)</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        nItemCnt = pAnnoMap-&gt;func_get(pItem-&gt;value, pItemValues, <span class=\"number\">100</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\">\t\t\t\t\t</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">                pAnnoMap++;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (nItemCnt == <span class=\"number\">-1</span>)</div><div class=\"line\">            &#123;</div><div class=\"line\">                logWarning(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">                    <span class=\"string\">\"not found corresponding annotation function: %s, \"</span> \\</div><div class=\"line\">                    <span class=\"string\">\"\\\"%s\\\" will use the item value \\\"%s\\\"\"</span>, <span class=\"keyword\">__LINE__</span>,</div><div class=\"line\">                    pFuncName, pItem-&gt;name, pItem-&gt;value);</div><div class=\"line\">                pSection-&gt;count++;</div><div class=\"line\">                pItem++;</div><div class=\"line\">                <span class=\"keyword\">continue</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nItemCnt == <span class=\"number\">0</span>)</div><div class=\"line\">            &#123;</div><div class=\"line\">                logWarning(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">                    <span class=\"string\">\"annotation function %s execute fail, \"</span> \\</div><div class=\"line\">                    <span class=\"string\">\"\\\"%s\\\" will use the item value \\\"%s\\\"\"</span>, <span class=\"keyword\">__LINE__</span>,</div><div class=\"line\">                    pFuncName, pItem-&gt;name, pItem-&gt;value);</div><div class=\"line\">                pSection-&gt;count++;</div><div class=\"line\">                pItem++;</div><div class=\"line\">                <span class=\"keyword\">continue</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            pItemName = pItem-&gt;name;</div><div class=\"line\">            nNameLen = strlen(pItemName);</div><div class=\"line\">\t\t\t</div><div class=\"line\">            <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; nItemCnt; i++)</div><div class=\"line\">            &#123;</div><div class=\"line\">                nValueLen = strlen(pItemValues[i]);</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">                <span class=\"keyword\">if</span> (nValueLen &gt; FAST_INI_ITEM_VALUE_LEN)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    nValueLen = FAST_INI_ITEM_VALUE_LEN;</div><div class=\"line\">                &#125;</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">                memcpy(pItem-&gt;name, pItemName, nNameLen);</div><div class=\"line\">                memcpy(pItem-&gt;value, pItemValues[i], nValueLen);</div><div class=\"line\">                pItem-&gt;value[nValueLen] = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">                pSection-&gt;count++;</div><div class=\"line\">                pItem++;</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">                <span class=\"keyword\">if</span> (pSection-&gt;count &gt;= pSection-&gt;alloc_count)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    result = remallocSection(pSection, &amp;pItem);</div><div class=\"line\">\t\t\t\t\t</div><div class=\"line\">                    <span class=\"keyword\">if</span> (result)</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        <span class=\"keyword\">break</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">\t\tpSection-&gt;count++;</div><div class=\"line\">\t\tpItem++;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// result is 0 means has not error occured</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (result == <span class=\"number\">0</span> &amp;&amp; isAnnotation)</div><div class=\"line\">    &#123;</div><div class=\"line\">        logWarning(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">            <span class=\"string\">\"the @function annotation line \"</span> \\</div><div class=\"line\">            <span class=\"string\">\"must follow by key=value line!\"</span>, <span class=\"keyword\">__LINE__</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> result; </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// get the rid of white space from the left and right of pStr</span></div><div class=\"line\"><span class=\"keyword\">char</span> *trim(<span class=\"keyword\">char</span> *pStr)</div><div class=\"line\">&#123;</div><div class=\"line\">\ttrim_right(pStr);</div><div class=\"line\">\ttrim_left(pStr);</div><div class=\"line\">\t<span class=\"keyword\">return</span> pStr;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//get rid of the white space from the left of pStr</span></div><div class=\"line\"><span class=\"keyword\">char</span> *trim_left(<span class=\"keyword\">char</span> *pStr)</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">char</span> *p;</div><div class=\"line\">\t<span class=\"keyword\">char</span> *pEnd;</div><div class=\"line\">\t<span class=\"keyword\">int</span> nDestLen;</div><div class=\"line\"></div><div class=\"line\">\tpEnd = pStr + strlen(pStr);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">for</span> (p=pStr; p&lt;pEnd; p++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!(<span class=\"string\">' '</span> == *p|| <span class=\"string\">'\\n'</span> == *p || <span class=\"string\">'\\r'</span> == *p || <span class=\"string\">'\\t'</span> == *p))</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> ( p == pStr)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> pStr;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tnDestLen = (pEnd - p) + <span class=\"number\">1</span>; <span class=\"comment\">//including \\0</span></div><div class=\"line\">\tmemmove(pStr, p, nDestLen);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> pStr;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// get rid of the white space from the right of pStr</span></div><div class=\"line\"><span class=\"keyword\">char</span> *trim_right(<span class=\"keyword\">char</span> *pStr)</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> len;</div><div class=\"line\">\t<span class=\"keyword\">char</span> *p;</div><div class=\"line\">\t<span class=\"keyword\">char</span> *pEnd;</div><div class=\"line\"></div><div class=\"line\">\tlen = strlen(pStr);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (len == <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> pStr;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpEnd = pStr + len - <span class=\"number\">1</span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">for</span> (p = pEnd;  p&gt;=pStr; p--)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!(<span class=\"string\">' '</span> == *p || <span class=\"string\">'\\n'</span> == *p || <span class=\"string\">'\\r'</span> == *p || <span class=\"string\">'\\t'</span> == *p))</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (p != pEnd)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t*(p+<span class=\"number\">1</span>) = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> pStr;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">bool</span> fileExists(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *filename)</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> access(filename, <span class=\"number\">0</span>) == <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// allocate enough space for section</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> remallocSection(IniSection *pSection, IniItem **pItem)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> bytes, result;</div><div class=\"line\">    IniItem *pNew;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (pSection-&gt;alloc_count == <span class=\"number\">0</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        pSection-&gt;alloc_count = _INIT_ALLOC_ITEM_COUNT;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        pSection-&gt;alloc_count *= <span class=\"number\">2</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    bytes = sizeof(IniItem) * pSection-&gt;alloc_count;</div><div class=\"line\">    pNew = (IniItem *)malloc(bytes);</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (pNew == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        logError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">            <span class=\"string\">\"malloc %d bytes fail\"</span>, <span class=\"keyword\">__LINE__</span>, bytes);</div><div class=\"line\">        result = errno != <span class=\"number\">0</span> ? errno : ENOMEM;</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (pSection-&gt;count &gt; <span class=\"number\">0</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        memcpy(pNew, pSection-&gt;items,</div><div class=\"line\">                sizeof(IniItem) * pSection-&gt;count);</div><div class=\"line\">        free(pSection-&gt;items);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    pSection-&gt;items = pNew;</div><div class=\"line\">    *pItem = pSection-&gt;items + pSection-&gt;count;</div><div class=\"line\">\t</div><div class=\"line\">    memset(*pItem, <span class=\"number\">0</span>, sizeof(IniItem) * \\</div><div class=\"line\">        (pSection-&gt;alloc_count - pSection-&gt;count));</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">void *hash_find(HashArray *pHash, <span class=\"keyword\">const</span> void *key, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> key_len)</div><div class=\"line\">&#123;</div><div class=\"line\">\tunsigned <span class=\"keyword\">int</span> hash_code;</div><div class=\"line\">\tHashData **ppBucket;</div><div class=\"line\">\tHashData *hash_data;</div><div class=\"line\"></div><div class=\"line\">\thash_code = pHash-&gt;hash_func(key, key_len);</div><div class=\"line\">\tppBucket = pHash-&gt;buckets + (hash_code % (*pHash-&gt;capacity));</div><div class=\"line\"></div><div class=\"line\">\tHASH_LOCK(pHash, ppBucket - pHash-&gt;buckets)</div><div class=\"line\">\thash_data = _chain_find_entry(ppBucket, key, key_len, hash_code);</div><div class=\"line\">\tHASH_UNLOCK(pHash, ppBucket - pHash-&gt;buckets)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (hash_data != <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> hash_data-&gt;value;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">NULL</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#define HASH_LOCK(pHash, index) \\</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> (pHash-&gt;lock_count &gt; <span class=\"number\">0</span>) \\</div><div class=\"line\">\t&#123; \\</div><div class=\"line\">\t\tpthread_mutex_lock(pHash-&gt;locks + (index) % pHash-&gt;lock_count); \\</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#define HASH_UNLOCK(pHash, index) \\</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> (pHash-&gt;lock_count &gt; <span class=\"number\">0</span>) \\</div><div class=\"line\">\t&#123; \\</div><div class=\"line\">\t\tpthread_mutex_unlock(pHash-&gt;locks + (index) % pHash-&gt;lock_count); \\</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">static</span> HashData *_chain_find_entry(HashData **ppBucket, <span class=\"keyword\">const</span> void *key, \\</div><div class=\"line\">\t\t<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> key_len, <span class=\"keyword\">const</span> unsigned <span class=\"keyword\">int</span> hash_code)</div><div class=\"line\">&#123;</div><div class=\"line\">\tHashData *hash_data;</div><div class=\"line\"></div><div class=\"line\">\thash_data = *ppBucket;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">while</span> (hash_data != <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (key_len == hash_data-&gt;key_len &amp;&amp; \\</div><div class=\"line\">\t\t\tmemcmp(key, hash_data-&gt;key, key_len) == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> hash_data;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\thash_data = hash_data-&gt;next;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">NULL</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#define hash_insert(pHash, key, key_len, value) \\</span></div><div class=\"line\">\thash_insert_ex(pHash, key, key_len, value, <span class=\"number\">0</span>, <span class=\"keyword\">true</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> hash_insert_ex(HashArray *pHash, <span class=\"keyword\">const</span> void *key, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> key_len, \\</div><div class=\"line\">\t\tvoid *value, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> value_len, <span class=\"keyword\">const</span> <span class=\"keyword\">bool</span> needLock)</div><div class=\"line\">&#123;</div><div class=\"line\">\tunsigned <span class=\"keyword\">int</span> hash_code;</div><div class=\"line\">\tHashData **ppBucket;</div><div class=\"line\">\tHashData *hash_data;</div><div class=\"line\">\tHashData *previous;</div><div class=\"line\">\t<span class=\"keyword\">char</span> *pBuff;</div><div class=\"line\">\t<span class=\"keyword\">int</span> bytes;</div><div class=\"line\">\t<span class=\"keyword\">int</span> malloc_value_size;</div><div class=\"line\"></div><div class=\"line\">\thash_code = pHash-&gt;hash_func(key, key_len);</div><div class=\"line\">\tppBucket = pHash-&gt;buckets + (hash_code % (*pHash-&gt;capacity));</div><div class=\"line\"></div><div class=\"line\">\tprevious = <span class=\"keyword\">NULL</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (needLock)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tHASH_LOCK(pHash, ppBucket - pHash-&gt;buckets)</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\thash_data = *ppBucket;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">while</span> (hash_data != <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (key_len == hash_data-&gt;key_len &amp;&amp; \\</div><div class=\"line\">\t\t\tmemcmp(key, hash_data-&gt;key, key_len) == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tprevious = hash_data;</div><div class=\"line\">\t\thash_data = hash_data-&gt;next;</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (hash_data != <span class=\"keyword\">NULL</span>) <span class=\"comment\">//exists</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!pHash-&gt;is_malloc_value)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\thash_data-&gt;value_len = value_len;</div><div class=\"line\">\t\t\thash_data-&gt;value = (<span class=\"keyword\">char</span> *)value;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (needLock)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tHASH_UNLOCK(pHash, ppBucket - pHash-&gt;buckets)</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (hash_data-&gt;malloc_value_size &gt;= value_len &amp;&amp; \\</div><div class=\"line\">\t\t\t\t(hash_data-&gt;malloc_value_size &lt;= <span class=\"number\">128</span> ||</div><div class=\"line\">\t\t\t\t hash_data-&gt;malloc_value_size / <span class=\"number\">2</span> &lt; value_len))</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\thash_data-&gt;value_len = value_len;</div><div class=\"line\">\t\t\t\tmemcpy(hash_data-&gt;value, value, value_len);</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (needLock)</div><div class=\"line\">\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\tHASH_UNLOCK(pHash, ppBucket - pHash-&gt;buckets)</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\tDELETE_FROM_BUCKET(pHash, ppBucket, previous, hash_data)</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (needLock)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tHASH_UNLOCK(pHash, ppBucket - pHash-&gt;buckets)</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (!pHash-&gt;is_malloc_value)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tmalloc_value_size = <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tmalloc_value_size = MEM_ALIGN(value_len);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tbytes = CALC_NODE_MALLOC_BYTES(key_len, malloc_value_size);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (pHash-&gt;max_bytes &gt; <span class=\"number\">0</span> &amp;&amp; pHash-&gt;bytes_used+bytes &gt; pHash-&gt;max_bytes)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> -ENOSPC;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpBuff = (<span class=\"keyword\">char</span> *)malloc(bytes);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (pBuff == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> -ENOMEM;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpHash-&gt;bytes_used += bytes;</div><div class=\"line\"></div><div class=\"line\">\thash_data = (HashData *)pBuff;</div><div class=\"line\">\thash_data-&gt;malloc_value_size = malloc_value_size;</div><div class=\"line\"></div><div class=\"line\">\thash_data-&gt;key_len = key_len;</div><div class=\"line\">\tmemcpy(hash_data-&gt;key, key, key_len);</div><div class=\"line\"><span class=\"comment\">#ifdef HASH_STORE_HASH_CODE</span></div><div class=\"line\">\thash_data-&gt;hash_code = hash_code;  <span class=\"comment\">// save the hash code for next use, it need not calculate again when next use</span></div><div class=\"line\"><span class=\"comment\">#endif</span></div><div class=\"line\">\thash_data-&gt;value_len = value_len;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (!pHash-&gt;is_malloc_value) <span class=\"comment\">// means the buffer of value is allocated in outer space, rather than beening allocated in the end of the key buffer</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\thash_data-&gt;value = (<span class=\"keyword\">char</span> *)value;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\thash_data-&gt;value = hash_data-&gt;key + hash_data-&gt;key_len;</div><div class=\"line\">\t\tmemcpy(hash_data-&gt;value, value, value_len);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (needLock)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tHASH_LOCK(pHash, ppBucket - pHash-&gt;buckets)</div><div class=\"line\">\t\tADD_TO_BUCKET(pHash, ppBucket, hash_data)</div><div class=\"line\">\t\tHASH_UNLOCK(pHash, ppBucket - pHash-&gt;buckets)</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tADD_TO_BUCKET(pHash, ppBucket, hash_data)</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (pHash-&gt;load_factor &gt;= <span class=\"number\">0.10</span> &amp;&amp; (<span class=\"keyword\">double</span>)pHash-&gt;item_count /</div><div class=\"line\">\t\t(<span class=\"keyword\">double</span>)*pHash-&gt;capacity &gt;= pHash-&gt;load_factor)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t_rehash(pHash);  <span class=\"comment\">// rehash </span></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// delete a hash_data from pHash</span></div><div class=\"line\"><span class=\"comment\">#define DELETE_FROM_BUCKET(pHash, ppBucket, previous, hash_data) \\</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> (previous == <span class=\"keyword\">NULL</span>) \\</div><div class=\"line\">\t&#123; \\</div><div class=\"line\">\t\t*ppBucket = hash_data-&gt;next; \\</div><div class=\"line\">\t&#125; \\</div><div class=\"line\">\t<span class=\"keyword\">else</span> \\</div><div class=\"line\">\t&#123; \\</div><div class=\"line\">\t\tprevious-&gt;next = hash_data-&gt;next; \\</div><div class=\"line\">\t&#125; \\</div><div class=\"line\">\tpHash-&gt;item_count--; \\</div><div class=\"line\">\tpHash-&gt;bytes_used -= CALC_NODE_MALLOC_BYTES(hash_data-&gt;key_len, \\</div><div class=\"line\">\t\t\t\thash_data-&gt;malloc_value_size); \\</div><div class=\"line\">\tfree(hash_data);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#define MEM_ALIGN(x)  (((x) + 7) &amp; (~7))</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#define CALC_NODE_MALLOC_BYTES(key_len, value_size) \\</span></div><div class=\"line\">\t\tsizeof(HashData) + key_len + value_size</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#define ADD_TO_BUCKET(pHash, ppBucket, hash_data) \\</span></div><div class=\"line\">\thash_data-&gt;next = *ppBucket; \\</div><div class=\"line\">\t*ppBucket = hash_data; \\</div><div class=\"line\">\tpHash-&gt;item_count++;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> _rehash(HashArray *pHash)</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> result;</div><div class=\"line\">\tunsigned <span class=\"keyword\">int</span> *pOldCapacity;</div><div class=\"line\"></div><div class=\"line\">\tpOldCapacity = pHash-&gt;capacity;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (pHash-&gt;is_malloc_capacity)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tunsigned <span class=\"keyword\">int</span> *pprime;</div><div class=\"line\">\t\tunsigned <span class=\"keyword\">int</span> *prime_end;</div><div class=\"line\"></div><div class=\"line\">\t\tpHash-&gt;capacity = <span class=\"keyword\">NULL</span>;</div><div class=\"line\"></div><div class=\"line\">\t\tprime_end = prime_array + PRIME_ARRAY_SIZE;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (pprime = prime_array; pprime!=prime_end; pprime++)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (*pprime &gt; *pOldCapacity)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tpHash-&gt;capacity = pprime;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tpHash-&gt;capacity++;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=_rehash1(pHash, *pOldCapacity, pHash-&gt;capacity)) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tpHash-&gt;capacity = pOldCapacity;  <span class=\"comment\">//rollback</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (pHash-&gt;is_malloc_capacity)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tfree(pOldCapacity);</div><div class=\"line\">\t\t\tpHash-&gt;is_malloc_capacity = <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/*printf(\"rehash, old_capacity=%d, new_capacity=%d\\n\", \\</span></div><div class=\"line\">\t\told_capacity, *pHash-&gt;capacity);</div><div class=\"line\">\t*/</div><div class=\"line\">\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// rehash by new size: *new_capacity</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> _rehash1(HashArray *pHash, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> old_capacity, \\</div><div class=\"line\">\t\tunsigned <span class=\"keyword\">int</span> *new_capacity)</div><div class=\"line\">&#123;</div><div class=\"line\">\tHashData **old_buckets;</div><div class=\"line\">\tHashData **ppBucket;</div><div class=\"line\">\tHashData **bucket_end;</div><div class=\"line\">\tHashData *hash_data;</div><div class=\"line\">\tHashData *pNext;</div><div class=\"line\">\t<span class=\"keyword\">int</span> result;</div><div class=\"line\"></div><div class=\"line\">\told_buckets = pHash-&gt;buckets;</div><div class=\"line\">\tpHash-&gt;capacity = new_capacity;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=_hash_alloc_buckets(pHash, old_capacity)) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tpHash-&gt;buckets = old_buckets;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//printf(\"old: %d, new: %d\\n\", old_capacity, *pHash-&gt;capacity);</span></div><div class=\"line\"></div><div class=\"line\">\tpHash-&gt;item_count = <span class=\"number\">0</span>;</div><div class=\"line\">\tbucket_end = old_buckets + old_capacity;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">for</span> (ppBucket=old_buckets; ppBucket&lt;bucket_end; ppBucket++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (*ppBucket == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\thash_data = *ppBucket;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (hash_data != <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tpNext = hash_data-&gt;next;</div><div class=\"line\"></div><div class=\"line\">\t\t\tADD_TO_BUCKET(pHash, (pHash-&gt;buckets + \\</div><div class=\"line\">\t\t\t\t(HASH_CODE(pHash, hash_data) % \\</div><div class=\"line\">\t\t\t\t(*pHash-&gt;capacity))), hash_data)</div><div class=\"line\"></div><div class=\"line\">\t\t\thash_data = pNext;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tfree(old_buckets);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">char</span> *iniGetStrValue(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *szSectionName, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *szItemName, \\</div><div class=\"line\">\t\tIniContext *pContext)</div><div class=\"line\">&#123;</div><div class=\"line\">\tIniItem targetItem;</div><div class=\"line\">\tIniSection *pSection;</div><div class=\"line\">\tIniItem *pItem;</div><div class=\"line\"></div><div class=\"line\">\tINI_FIND_ITEM(szSectionName, szItemName, pContext, pSection, \\</div><div class=\"line\">\t\t\ttargetItem, pItem, <span class=\"keyword\">NULL</span>)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (pItem == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">NULL</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> pItem-&gt;value;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#define INI_FIND_ITEM(szSectionName, szItemName, pContext, pSection, \\</span></div><div class=\"line\">\t\t\ttargetItem, pItem, return_val) \\</div><div class=\"line\">\t<span class=\"keyword\">if</span> (szSectionName == <span class=\"keyword\">NULL</span> || *szSectionName == <span class=\"string\">'\\0'</span>) \\</div><div class=\"line\">\t&#123; \\</div><div class=\"line\">\t\tpSection = &amp;pContext-&gt;global; \\</div><div class=\"line\">\t&#125; \\</div><div class=\"line\">\t<span class=\"keyword\">else</span> \\</div><div class=\"line\">\t&#123; \\</div><div class=\"line\">\t\tpSection = (IniSection *)hash_find(&amp;pContext-&gt;sections, \\</div><div class=\"line\">\t\t\t\tszSectionName, strlen(szSectionName)); \\</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (pSection == <span class=\"keyword\">NULL</span>) \\</div><div class=\"line\">\t\t&#123; \\</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> return_val; \\</div><div class=\"line\">\t\t&#125; \\</div><div class=\"line\">\t&#125; \\</div><div class=\"line\">\t\\</div><div class=\"line\">\t<span class=\"keyword\">if</span> (pSection-&gt;count &lt;= <span class=\"number\">0</span>) \\</div><div class=\"line\">\t&#123; \\</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> return_val; \\</div><div class=\"line\">\t&#125; \\</div><div class=\"line\">\t\\</div><div class=\"line\">\tsnprintf(targetItem.name, sizeof(targetItem.name), <span class=\"string\">\"%s\"</span>, szItemName); \\</div><div class=\"line\">\tpItem = (IniItem *)bsearch(&amp;targetItem, pSection-&gt;items, \\</div><div class=\"line\">\t\t\tpSection-&gt;count, sizeof(IniItem), iniCompareByItemName); <span class=\"comment\">// 二分查找</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">static</span> void iniSortItems(IniContext *pContext)</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (pContext-&gt;global.count &gt; <span class=\"number\">1</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tqsort(pContext-&gt;global.items, pContext-&gt;global.count, \\</div><div class=\"line\">\t\t\tsizeof(IniItem), iniCompareByItemName);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\thash_walk(&amp;pContext-&gt;sections, iniSortHashData, <span class=\"keyword\">NULL</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> iniCompareByItemName(<span class=\"keyword\">const</span> void *p1, <span class=\"keyword\">const</span> void *p2)</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> strcmp(((IniItem *)p1)-&gt;name, ((IniItem *)p2)-&gt;name);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> hash_walk(HashArray *pHash, HashWalkFunc walkFunc, void *args)</div><div class=\"line\">&#123;</div><div class=\"line\">\tHashData **ppBucket;</div><div class=\"line\">\tHashData **bucket_end;</div><div class=\"line\">\tHashData *hash_data;</div><div class=\"line\">\t<span class=\"keyword\">int</span> index;</div><div class=\"line\">\t<span class=\"keyword\">int</span> result;</div><div class=\"line\"></div><div class=\"line\">\tindex = <span class=\"number\">0</span>;</div><div class=\"line\">\tbucket_end = pHash-&gt;buckets + (*pHash-&gt;capacity);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">for</span> (ppBucket=pHash-&gt;buckets; ppBucket&lt;bucket_end; ppBucket++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\thash_data = *ppBucket;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (hash_data != <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tresult = walkFunc(index, hash_data, args);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (result != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\tindex++;</div><div class=\"line\">\t\t\thash_data = hash_data-&gt;next;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">void iniFreeContext(IniContext *pContext)</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (pContext == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (pContext-&gt;global.items != <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tfree(pContext-&gt;global.items);</div><div class=\"line\">\t\tmemset(&amp;pContext-&gt;global, <span class=\"number\">0</span>, sizeof(IniSection));</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\thash_walk(&amp;pContext-&gt;sections, iniFreeHashData, <span class=\"keyword\">NULL</span>);</div><div class=\"line\">\thash_destroy(&amp;pContext-&gt;sections);</div><div class=\"line\"></div><div class=\"line\">    iniFreeDynamicContent(pContext);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">void hash_destroy(HashArray *pHash)</div><div class=\"line\">&#123;</div><div class=\"line\">\tHashData **ppBucket;</div><div class=\"line\">\tHashData **bucket_end;</div><div class=\"line\">\tHashData *pNode;</div><div class=\"line\">\tHashData *pDelete;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (pHash == <span class=\"keyword\">NULL</span> || pHash-&gt;buckets == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tbucket_end = pHash-&gt;buckets + (*pHash-&gt;capacity);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">for</span> (ppBucket=pHash-&gt;buckets; ppBucket&lt;bucket_end; ppBucket++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tpNode = *ppBucket;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (pNode != <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tpDelete = pNode;</div><div class=\"line\">\t\t\tpNode = pNode-&gt;next;</div><div class=\"line\">\t\t\tfree(pDelete);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tfree(pHash-&gt;buckets);</div><div class=\"line\">\tpHash-&gt;buckets = <span class=\"keyword\">NULL</span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (pHash-&gt;is_malloc_capacity)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tfree(pHash-&gt;capacity);</div><div class=\"line\">\t\tpHash-&gt;capacity = <span class=\"keyword\">NULL</span>;</div><div class=\"line\">\t\tpHash-&gt;is_malloc_capacity = <span class=\"keyword\">false</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpHash-&gt;item_count = <span class=\"number\">0</span>;</div><div class=\"line\">\tpHash-&gt;bytes_used = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">static</span> void iniFreeDynamicContent(IniContext *pContext)</div><div class=\"line\">&#123;</div><div class=\"line\">    CDCPair *pCDCPair;</div><div class=\"line\">    DynamicContents *pDynamicContents;</div><div class=\"line\">    <span class=\"keyword\">int</span> i;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (g_dynamic_content_count == <span class=\"number\">0</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (g_dynamic_contents[g_dynamic_content_index].context == pContext)</div><div class=\"line\">    &#123;</div><div class=\"line\">        pCDCPair = g_dynamic_contents + g_dynamic_content_index;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        pCDCPair = <span class=\"keyword\">NULL</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">        <span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>; i&lt;_MAX_DYNAMIC_CONTENTS; i++)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (g_dynamic_contents[i].context == pContext)</div><div class=\"line\">            &#123;</div><div class=\"line\">                pCDCPair = g_dynamic_contents + i;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">\t\t</div><div class=\"line\">        <span class=\"keyword\">if</span> (pCDCPair == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    pCDCPair-&gt;used = <span class=\"keyword\">false</span>;</div><div class=\"line\">    pCDCPair-&gt;context = <span class=\"keyword\">NULL</span>;</div><div class=\"line\">    pDynamicContents = &amp;pCDCPair-&gt;dynamicContents;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (pDynamicContents-&gt;contents != <span class=\"keyword\">NULL</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>; i&lt;pDynamicContents-&gt;count; i++)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (pDynamicContents-&gt;contents[i] != <span class=\"keyword\">NULL</span>)</div><div class=\"line\">            &#123;</div><div class=\"line\">                free(pDynamicContents-&gt;contents[i]);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">\t\t</div><div class=\"line\">        free(pDynamicContents-&gt;contents);</div><div class=\"line\">        pDynamicContents-&gt;contents = <span class=\"keyword\">NULL</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    pDynamicContents-&gt;alloc_count = <span class=\"number\">0</span>;</div><div class=\"line\">    pDynamicContents-&gt;count = <span class=\"number\">0</span>;</div><div class=\"line\">    g_dynamic_content_count--;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"<h3 id=\"加载配置文件解析\"><a href=\"#加载配置文件解析\" class=\"headerlink\" title=\"加载配置文件解析\"></a>加载配置文件解析</h3><p>配置文件有： storage.conf,tracker.conf,mod_fastdfs.conf,http.conf等，配置文件中还可以用#include包含其他配置文件，<br>如#include http.conf。该配置文件解析模块就是读取这些配置文件，然后解析保存，方便得到其中的值。<br>如：<br>result=iniLoadFromFileEx(filename, &amp;iniContext, true)<br>pBasePath = iniGetStrValue(NULL, “base_path”, &amp;iniContext); //该函数就可以得到配置文件中base_path的值<br>","more":"</p>\n<p>相关参考：<a href=\"http://slucx.blog.chinaunix.net/uid-29504236-id-4369694.html\">http://slucx.blog.chinaunix.net/uid-29504236-id-4369694.html</a></p>\n<h3 id=\"1-相关数据结构\"><a href=\"#1-相关数据结构\" class=\"headerlink\" title=\"1. 相关数据结构\"></a>1. 相关数据结构</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span></div><div class=\"line\">&#123;</div><div class=\"line\">\tIniSection global;  <span class=\"comment\">//保存全局key,value对</span></div><div class=\"line\">\tHashArray sections;  <span class=\"comment\">//key is session name, and value is IniSection,这里hash数组用来保存[group1]下隶属于group1的&lt;key,value&gt;对</span></div><div class=\"line\">\tIniSection *current_section; <span class=\"comment\">//for load from ini file，当前正在处理的IniSection</span></div><div class=\"line\">\t<span class=\"keyword\">char</span> config_path[MAX_PATH_SIZE];  <span class=\"comment\">//save the config filepath, such as conf file is /etc/data/xxx.conf, config_path is /etc/data</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">bool</span> ignore_annotation; <span class=\"comment\">// 是否忽略注解，看代码时可以略过不看</span></div><div class=\"line\">&#125; IniContext;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span></div><div class=\"line\">&#123;</div><div class=\"line\">\tIniItem *items;</div><div class=\"line\">\t<span class=\"keyword\">int</span> count;  <span class=\"comment\">//item count</span></div><div class=\"line\">\t<span class=\"keyword\">int</span> alloc_count;</div><div class=\"line\">&#125; IniSection;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">char</span> name[FAST_INI_ITEM_NAME_LEN + <span class=\"number\">1</span>];</div><div class=\"line\">\t<span class=\"keyword\">char</span> value[FAST_INI_ITEM_VALUE_LEN + <span class=\"number\">1</span>];</div><div class=\"line\">&#125; IniItem;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> tagHashArray</div><div class=\"line\">&#123;</div><div class=\"line\">\tHashData **buckets;</div><div class=\"line\">\tHashFunc hash_func; <span class=\"comment\">// default is Time33Hash func</span></div><div class=\"line\">\t<span class=\"keyword\">int</span> item_count;  <span class=\"comment\">// is all the item saved in buckets</span></div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> *capacity; <span class=\"comment\">// pointer to prime global aarray, see hash_init_ex func</span></div><div class=\"line\">\t<span class=\"keyword\">double</span> load_factor;</div><div class=\"line\">\t<span class=\"keyword\">int64_t</span> max_bytes; <span class=\"comment\">// means the max size of space which can be used in hashArray</span></div><div class=\"line\">\t<span class=\"keyword\">int64_t</span> bytes_used; <span class=\"comment\">// means the size of have been used, is the *capacity * sizeof(HashData *)，为已经使用的字节数</span></div><div class=\"line\">\t<span class=\"keyword\">bool</span> is_malloc_capacity;</div><div class=\"line\">\t<span class=\"comment\">// is_malloc_value is true: means the buffer of value is allocated in outer space, rather than beening allocated in the end of the key buffer</span></div><div class=\"line\">\t<span class=\"keyword\">bool</span> is_malloc_value;  <span class=\"comment\">// it means hashArray whether  malloc space for value or not, default is false</span></div><div class=\"line\">\t                       </div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> lock_count;</div><div class=\"line\">\t<span class=\"keyword\">pthread_mutex_t</span> *locks;</div><div class=\"line\">&#125; HashArray;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> tagHashData</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> key_len;</div><div class=\"line\">\t<span class=\"keyword\">int</span> value_len;</div><div class=\"line\">\t<span class=\"keyword\">int</span> malloc_value_size;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> HASH_STORE_HASH_CODE</span></div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> hash_code;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">char</span> *value;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> tagHashData *next;</div><div class=\"line\">\t<span class=\"keyword\">char</span> key[<span class=\"number\">0</span>];</div><div class=\"line\">&#125; HashData;   <span class=\"comment\">// 元素</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">int</span> <span class=\"params\">(*HashFunc)</span> <span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *key, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> key_len)</span></span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">static</span> CDCPair g_dynamic_contents[_MAX_DYNAMIC_CONTENTS] = &#123;&#123;<span class=\"literal\">false</span>, <span class=\"literal\">NULL</span>, &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>&#125;&#125;&#125;; <span class=\"comment\">//用一个全局数组来保存已经解析过的文件</span></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">bool</span> used;</div><div class=\"line\">    IniContext *context;</div><div class=\"line\">    DynamicContents dynamicContents;</div><div class=\"line\">&#125; CDCPair;</div></pre></td></tr></table></figure>\n<p>其中的sections是一个hash数组，用到的hash函数默认为Time33Hash函数<br>进行hash插入时，具体见hash_insert函数：<br>hash_code = pHash-&gt;hash_func(key, key_len);<br>ppBucket = pHash-&gt;buckets + (hash_code % (*pHash-&gt;capacity));</p>\n<p>key是section_name, key_len是section_len，而<br>section_name, section_len为”[]”包围的字符串，见iniDoLoadItemsFromBuffer函数<br>如： [group1], section_name, section_len分别为group1和6<br>mod_fastdfs.conf文件中有：<br><figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#[group1]</span></div><div class=\"line\"><span class=\"meta\">#group_name=group1</span></div><div class=\"line\"><span class=\"meta\">#storage_server_port=23000</span></div><div class=\"line\"><span class=\"meta\">#store_path_count=2</span></div><div class=\"line\"><span class=\"meta\">#store_path0=/home/yuqing/fastdfs</span></div><div class=\"line\"><span class=\"meta\">#store_path1=/home/yuqing/fastdfs1</span></div></pre></td></tr></table></figure></p>\n<p>这里的group1就为section_name, section_len是6，此时current_section会指向一个新分配的IniSection，接着会将读取得到的<br>group_name等<key,value>对插入到current_section中去，然后插入到hash数组中去。<br>配置文件模块其实就是读取配置文件，然后初始化IniContext结构体。</p>\n<h3 id=\"2-下面讲解各个函数\"><a href=\"#2-下面讲解各个函数\" class=\"headerlink\" title=\"2. 下面讲解各个函数\"></a>2. 下面讲解各个函数</h3><figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">调用路径如下：</div><div class=\"line\"><span class=\"function\"><span class=\"title\">iniLoadFromFile</span> -&gt;</span> <span class=\"function\"><span class=\"title\">iniLoadFromFileEx</span> -&gt;</span> iniInitContext、iniDoLoadFromFile、iniSortItems、iniFreeContext</div><div class=\"line\"><span class=\"function\"><span class=\"title\">iniInitContext</span> -&gt;</span> hash_init</div><div class=\"line\"><span class=\"function\"><span class=\"title\">hash_init</span>-&gt;</span><span class=\"function\"><span class=\"title\">hash_init_ex</span>-&gt;</span>_hash_alloc_buckets</div></pre></td></tr></table></figure>\n<figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div><div class=\"line\">338</div><div class=\"line\">339</div><div class=\"line\">340</div><div class=\"line\">341</div><div class=\"line\">342</div><div class=\"line\">343</div><div class=\"line\">344</div><div class=\"line\">345</div><div class=\"line\">346</div><div class=\"line\">347</div><div class=\"line\">348</div><div class=\"line\">349</div><div class=\"line\">350</div><div class=\"line\">351</div><div class=\"line\">352</div><div class=\"line\">353</div><div class=\"line\">354</div><div class=\"line\">355</div><div class=\"line\">356</div><div class=\"line\">357</div><div class=\"line\">358</div><div class=\"line\">359</div><div class=\"line\">360</div><div class=\"line\">361</div><div class=\"line\">362</div><div class=\"line\">363</div><div class=\"line\">364</div><div class=\"line\">365</div><div class=\"line\">366</div><div class=\"line\">367</div><div class=\"line\">368</div><div class=\"line\">369</div><div class=\"line\">370</div><div class=\"line\">371</div><div class=\"line\">372</div><div class=\"line\">373</div><div class=\"line\">374</div><div class=\"line\">375</div><div class=\"line\">376</div><div class=\"line\">377</div><div class=\"line\">378</div><div class=\"line\">379</div><div class=\"line\">380</div><div class=\"line\">381</div><div class=\"line\">382</div><div class=\"line\">383</div><div class=\"line\">384</div><div class=\"line\">385</div><div class=\"line\">386</div><div class=\"line\">387</div><div class=\"line\">388</div><div class=\"line\">389</div><div class=\"line\">390</div><div class=\"line\">391</div><div class=\"line\">392</div><div class=\"line\">393</div><div class=\"line\">394</div><div class=\"line\">395</div><div class=\"line\">396</div><div class=\"line\">397</div><div class=\"line\">398</div><div class=\"line\">399</div><div class=\"line\">400</div><div class=\"line\">401</div><div class=\"line\">402</div><div class=\"line\">403</div><div class=\"line\">404</div><div class=\"line\">405</div><div class=\"line\">406</div><div class=\"line\">407</div><div class=\"line\">408</div><div class=\"line\">409</div><div class=\"line\">410</div><div class=\"line\">411</div><div class=\"line\">412</div><div class=\"line\">413</div><div class=\"line\">414</div><div class=\"line\">415</div><div class=\"line\">416</div><div class=\"line\">417</div><div class=\"line\">418</div><div class=\"line\">419</div><div class=\"line\">420</div><div class=\"line\">421</div><div class=\"line\">422</div><div class=\"line\">423</div><div class=\"line\">424</div><div class=\"line\">425</div><div class=\"line\">426</div><div class=\"line\">427</div><div class=\"line\">428</div><div class=\"line\">429</div><div class=\"line\">430</div><div class=\"line\">431</div><div class=\"line\">432</div><div class=\"line\">433</div><div class=\"line\">434</div><div class=\"line\">435</div><div class=\"line\">436</div><div class=\"line\">437</div><div class=\"line\">438</div><div class=\"line\">439</div><div class=\"line\">440</div><div class=\"line\">441</div><div class=\"line\">442</div><div class=\"line\">443</div><div class=\"line\">444</div><div class=\"line\">445</div><div class=\"line\">446</div><div class=\"line\">447</div><div class=\"line\">448</div><div class=\"line\">449</div><div class=\"line\">450</div><div class=\"line\">451</div><div class=\"line\">452</div><div class=\"line\">453</div><div class=\"line\">454</div><div class=\"line\">455</div><div class=\"line\">456</div><div class=\"line\">457</div><div class=\"line\">458</div><div class=\"line\">459</div><div class=\"line\">460</div><div class=\"line\">461</div><div class=\"line\">462</div><div class=\"line\">463</div><div class=\"line\">464</div><div class=\"line\">465</div><div class=\"line\">466</div><div class=\"line\">467</div><div class=\"line\">468</div><div class=\"line\">469</div><div class=\"line\">470</div><div class=\"line\">471</div><div class=\"line\">472</div><div class=\"line\">473</div><div class=\"line\">474</div><div class=\"line\">475</div><div class=\"line\">476</div><div class=\"line\">477</div><div class=\"line\">478</div><div class=\"line\">479</div><div class=\"line\">480</div><div class=\"line\">481</div><div class=\"line\">482</div><div class=\"line\">483</div><div class=\"line\">484</div><div class=\"line\">485</div><div class=\"line\">486</div><div class=\"line\">487</div><div class=\"line\">488</div><div class=\"line\">489</div><div class=\"line\">490</div><div class=\"line\">491</div><div class=\"line\">492</div><div class=\"line\">493</div><div class=\"line\">494</div><div class=\"line\">495</div><div class=\"line\">496</div><div class=\"line\">497</div><div class=\"line\">498</div><div class=\"line\">499</div><div class=\"line\">500</div><div class=\"line\">501</div><div class=\"line\">502</div><div class=\"line\">503</div><div class=\"line\">504</div><div class=\"line\">505</div><div class=\"line\">506</div><div class=\"line\">507</div><div class=\"line\">508</div><div class=\"line\">509</div><div class=\"line\">510</div><div class=\"line\">511</div><div class=\"line\">512</div><div class=\"line\">513</div><div class=\"line\">514</div><div class=\"line\">515</div><div class=\"line\">516</div><div class=\"line\">517</div><div class=\"line\">518</div><div class=\"line\">519</div><div class=\"line\">520</div><div class=\"line\">521</div><div class=\"line\">522</div><div class=\"line\">523</div><div class=\"line\">524</div><div class=\"line\">525</div><div class=\"line\">526</div><div class=\"line\">527</div><div class=\"line\">528</div><div class=\"line\">529</div><div class=\"line\">530</div><div class=\"line\">531</div><div class=\"line\">532</div><div class=\"line\">533</div><div class=\"line\">534</div><div class=\"line\">535</div><div class=\"line\">536</div><div class=\"line\">537</div><div class=\"line\">538</div><div class=\"line\">539</div><div class=\"line\">540</div><div class=\"line\">541</div><div class=\"line\">542</div><div class=\"line\">543</div><div class=\"line\">544</div><div class=\"line\">545</div><div class=\"line\">546</div><div class=\"line\">547</div><div class=\"line\">548</div><div class=\"line\">549</div><div class=\"line\">550</div><div class=\"line\">551</div><div class=\"line\">552</div><div class=\"line\">553</div><div class=\"line\">554</div><div class=\"line\">555</div><div class=\"line\">556</div><div class=\"line\">557</div><div class=\"line\">558</div><div class=\"line\">559</div><div class=\"line\">560</div><div class=\"line\">561</div><div class=\"line\">562</div><div class=\"line\">563</div><div class=\"line\">564</div><div class=\"line\">565</div><div class=\"line\">566</div><div class=\"line\">567</div><div class=\"line\">568</div><div class=\"line\">569</div><div class=\"line\">570</div><div class=\"line\">571</div><div class=\"line\">572</div><div class=\"line\">573</div><div class=\"line\">574</div><div class=\"line\">575</div><div class=\"line\">576</div><div class=\"line\">577</div><div class=\"line\">578</div><div class=\"line\">579</div><div class=\"line\">580</div><div class=\"line\">581</div><div class=\"line\">582</div><div class=\"line\">583</div><div class=\"line\">584</div><div class=\"line\">585</div><div class=\"line\">586</div><div class=\"line\">587</div><div class=\"line\">588</div><div class=\"line\">589</div><div class=\"line\">590</div><div class=\"line\">591</div><div class=\"line\">592</div><div class=\"line\">593</div><div class=\"line\">594</div><div class=\"line\">595</div><div class=\"line\">596</div><div class=\"line\">597</div><div class=\"line\">598</div><div class=\"line\">599</div><div class=\"line\">600</div><div class=\"line\">601</div><div class=\"line\">602</div><div class=\"line\">603</div><div class=\"line\">604</div><div class=\"line\">605</div><div class=\"line\">606</div><div class=\"line\">607</div><div class=\"line\">608</div><div class=\"line\">609</div><div class=\"line\">610</div><div class=\"line\">611</div><div class=\"line\">612</div><div class=\"line\">613</div><div class=\"line\">614</div><div class=\"line\">615</div><div class=\"line\">616</div><div class=\"line\">617</div><div class=\"line\">618</div><div class=\"line\">619</div><div class=\"line\">620</div><div class=\"line\">621</div><div class=\"line\">622</div><div class=\"line\">623</div><div class=\"line\">624</div><div class=\"line\">625</div><div class=\"line\">626</div><div class=\"line\">627</div><div class=\"line\">628</div><div class=\"line\">629</div><div class=\"line\">630</div><div class=\"line\">631</div><div class=\"line\">632</div><div class=\"line\">633</div><div class=\"line\">634</div><div class=\"line\">635</div><div class=\"line\">636</div><div class=\"line\">637</div><div class=\"line\">638</div><div class=\"line\">639</div><div class=\"line\">640</div><div class=\"line\">641</div><div class=\"line\">642</div><div class=\"line\">643</div><div class=\"line\">644</div><div class=\"line\">645</div><div class=\"line\">646</div><div class=\"line\">647</div><div class=\"line\">648</div><div class=\"line\">649</div><div class=\"line\">650</div><div class=\"line\">651</div><div class=\"line\">652</div><div class=\"line\">653</div><div class=\"line\">654</div><div class=\"line\">655</div><div class=\"line\">656</div><div class=\"line\">657</div><div class=\"line\">658</div><div class=\"line\">659</div><div class=\"line\">660</div><div class=\"line\">661</div><div class=\"line\">662</div><div class=\"line\">663</div><div class=\"line\">664</div><div class=\"line\">665</div><div class=\"line\">666</div><div class=\"line\">667</div><div class=\"line\">668</div><div class=\"line\">669</div><div class=\"line\">670</div><div class=\"line\">671</div><div class=\"line\">672</div><div class=\"line\">673</div><div class=\"line\">674</div><div class=\"line\">675</div><div class=\"line\">676</div><div class=\"line\">677</div><div class=\"line\">678</div><div class=\"line\">679</div><div class=\"line\">680</div><div class=\"line\">681</div><div class=\"line\">682</div><div class=\"line\">683</div><div class=\"line\">684</div><div class=\"line\">685</div><div class=\"line\">686</div><div class=\"line\">687</div><div class=\"line\">688</div><div class=\"line\">689</div><div class=\"line\">690</div><div class=\"line\">691</div><div class=\"line\">692</div><div class=\"line\">693</div><div class=\"line\">694</div><div class=\"line\">695</div><div class=\"line\">696</div><div class=\"line\">697</div><div class=\"line\">698</div><div class=\"line\">699</div><div class=\"line\">700</div><div class=\"line\">701</div><div class=\"line\">702</div><div class=\"line\">703</div><div class=\"line\">704</div><div class=\"line\">705</div><div class=\"line\">706</div><div class=\"line\">707</div><div class=\"line\">708</div><div class=\"line\">709</div><div class=\"line\">710</div><div class=\"line\">711</div><div class=\"line\">712</div><div class=\"line\">713</div><div class=\"line\">714</div><div class=\"line\">715</div><div class=\"line\">716</div><div class=\"line\">717</div><div class=\"line\">718</div><div class=\"line\">719</div><div class=\"line\">720</div><div class=\"line\">721</div><div class=\"line\">722</div><div class=\"line\">723</div><div class=\"line\">724</div><div class=\"line\">725</div><div class=\"line\">726</div><div class=\"line\">727</div><div class=\"line\">728</div><div class=\"line\">729</div><div class=\"line\">730</div><div class=\"line\">731</div><div class=\"line\">732</div><div class=\"line\">733</div><div class=\"line\">734</div><div class=\"line\">735</div><div class=\"line\">736</div><div class=\"line\">737</div><div class=\"line\">738</div><div class=\"line\">739</div><div class=\"line\">740</div><div class=\"line\">741</div><div class=\"line\">742</div><div class=\"line\">743</div><div class=\"line\">744</div><div class=\"line\">745</div><div class=\"line\">746</div><div class=\"line\">747</div><div class=\"line\">748</div><div class=\"line\">749</div><div class=\"line\">750</div><div class=\"line\">751</div><div class=\"line\">752</div><div class=\"line\">753</div><div class=\"line\">754</div><div class=\"line\">755</div><div class=\"line\">756</div><div class=\"line\">757</div><div class=\"line\">758</div><div class=\"line\">759</div><div class=\"line\">760</div><div class=\"line\">761</div><div class=\"line\">762</div><div class=\"line\">763</div><div class=\"line\">764</div><div class=\"line\">765</div><div class=\"line\">766</div><div class=\"line\">767</div><div class=\"line\">768</div><div class=\"line\">769</div><div class=\"line\">770</div><div class=\"line\">771</div><div class=\"line\">772</div><div class=\"line\">773</div><div class=\"line\">774</div><div class=\"line\">775</div><div class=\"line\">776</div><div class=\"line\">777</div><div class=\"line\">778</div><div class=\"line\">779</div><div class=\"line\">780</div><div class=\"line\">781</div><div class=\"line\">782</div><div class=\"line\">783</div><div class=\"line\">784</div><div class=\"line\">785</div><div class=\"line\">786</div><div class=\"line\">787</div><div class=\"line\">788</div><div class=\"line\">789</div><div class=\"line\">790</div><div class=\"line\">791</div><div class=\"line\">792</div><div class=\"line\">793</div><div class=\"line\">794</div><div class=\"line\">795</div><div class=\"line\">796</div><div class=\"line\">797</div><div class=\"line\">798</div><div class=\"line\">799</div><div class=\"line\">800</div><div class=\"line\">801</div><div class=\"line\">802</div><div class=\"line\">803</div><div class=\"line\">804</div><div class=\"line\">805</div><div class=\"line\">806</div><div class=\"line\">807</div><div class=\"line\">808</div><div class=\"line\">809</div><div class=\"line\">810</div><div class=\"line\">811</div><div class=\"line\">812</div><div class=\"line\">813</div><div class=\"line\">814</div><div class=\"line\">815</div><div class=\"line\">816</div><div class=\"line\">817</div><div class=\"line\">818</div><div class=\"line\">819</div><div class=\"line\">820</div><div class=\"line\">821</div><div class=\"line\">822</div><div class=\"line\">823</div><div class=\"line\">824</div><div class=\"line\">825</div><div class=\"line\">826</div><div class=\"line\">827</div><div class=\"line\">828</div><div class=\"line\">829</div><div class=\"line\">830</div><div class=\"line\">831</div><div class=\"line\">832</div><div class=\"line\">833</div><div class=\"line\">834</div><div class=\"line\">835</div><div class=\"line\">836</div><div class=\"line\">837</div><div class=\"line\">838</div><div class=\"line\">839</div><div class=\"line\">840</div><div class=\"line\">841</div><div class=\"line\">842</div><div class=\"line\">843</div><div class=\"line\">844</div><div class=\"line\">845</div><div class=\"line\">846</div><div class=\"line\">847</div><div class=\"line\">848</div><div class=\"line\">849</div><div class=\"line\">850</div><div class=\"line\">851</div><div class=\"line\">852</div><div class=\"line\">853</div><div class=\"line\">854</div><div class=\"line\">855</div><div class=\"line\">856</div><div class=\"line\">857</div><div class=\"line\">858</div><div class=\"line\">859</div><div class=\"line\">860</div><div class=\"line\">861</div><div class=\"line\">862</div><div class=\"line\">863</div><div class=\"line\">864</div><div class=\"line\">865</div><div class=\"line\">866</div><div class=\"line\">867</div><div class=\"line\">868</div><div class=\"line\">869</div><div class=\"line\">870</div><div class=\"line\">871</div><div class=\"line\">872</div><div class=\"line\">873</div><div class=\"line\">874</div><div class=\"line\">875</div><div class=\"line\">876</div><div class=\"line\">877</div><div class=\"line\">878</div><div class=\"line\">879</div><div class=\"line\">880</div><div class=\"line\">881</div><div class=\"line\">882</div><div class=\"line\">883</div><div class=\"line\">884</div><div class=\"line\">885</div><div class=\"line\">886</div><div class=\"line\">887</div><div class=\"line\">888</div><div class=\"line\">889</div><div class=\"line\">890</div><div class=\"line\">891</div><div class=\"line\">892</div><div class=\"line\">893</div><div class=\"line\">894</div><div class=\"line\">895</div><div class=\"line\">896</div><div class=\"line\">897</div><div class=\"line\">898</div><div class=\"line\">899</div><div class=\"line\">900</div><div class=\"line\">901</div><div class=\"line\">902</div><div class=\"line\">903</div><div class=\"line\">904</div><div class=\"line\">905</div><div class=\"line\">906</div><div class=\"line\">907</div><div class=\"line\">908</div><div class=\"line\">909</div><div class=\"line\">910</div><div class=\"line\">911</div><div class=\"line\">912</div><div class=\"line\">913</div><div class=\"line\">914</div><div class=\"line\">915</div><div class=\"line\">916</div><div class=\"line\">917</div><div class=\"line\">918</div><div class=\"line\">919</div><div class=\"line\">920</div><div class=\"line\">921</div><div class=\"line\">922</div><div class=\"line\">923</div><div class=\"line\">924</div><div class=\"line\">925</div><div class=\"line\">926</div><div class=\"line\">927</div><div class=\"line\">928</div><div class=\"line\">929</div><div class=\"line\">930</div><div class=\"line\">931</div><div class=\"line\">932</div><div class=\"line\">933</div><div class=\"line\">934</div><div class=\"line\">935</div><div class=\"line\">936</div><div class=\"line\">937</div><div class=\"line\">938</div><div class=\"line\">939</div><div class=\"line\">940</div><div class=\"line\">941</div><div class=\"line\">942</div><div class=\"line\">943</div><div class=\"line\">944</div><div class=\"line\">945</div><div class=\"line\">946</div><div class=\"line\">947</div><div class=\"line\">948</div><div class=\"line\">949</div><div class=\"line\">950</div><div class=\"line\">951</div><div class=\"line\">952</div><div class=\"line\">953</div><div class=\"line\">954</div><div class=\"line\">955</div><div class=\"line\">956</div><div class=\"line\">957</div><div class=\"line\">958</div><div class=\"line\">959</div><div class=\"line\">960</div><div class=\"line\">961</div><div class=\"line\">962</div><div class=\"line\">963</div><div class=\"line\">964</div><div class=\"line\">965</div><div class=\"line\">966</div><div class=\"line\">967</div><div class=\"line\">968</div><div class=\"line\">969</div><div class=\"line\">970</div><div class=\"line\">971</div><div class=\"line\">972</div><div class=\"line\">973</div><div class=\"line\">974</div><div class=\"line\">975</div><div class=\"line\">976</div><div class=\"line\">977</div><div class=\"line\">978</div><div class=\"line\">979</div><div class=\"line\">980</div><div class=\"line\">981</div><div class=\"line\">982</div><div class=\"line\">983</div><div class=\"line\">984</div><div class=\"line\">985</div><div class=\"line\">986</div><div class=\"line\">987</div><div class=\"line\">988</div><div class=\"line\">989</div><div class=\"line\">990</div><div class=\"line\">991</div><div class=\"line\">992</div><div class=\"line\">993</div><div class=\"line\">994</div><div class=\"line\">995</div><div class=\"line\">996</div><div class=\"line\">997</div><div class=\"line\">998</div><div class=\"line\">999</div><div class=\"line\">1000</div><div class=\"line\">1001</div><div class=\"line\">1002</div><div class=\"line\">1003</div><div class=\"line\">1004</div><div class=\"line\">1005</div><div class=\"line\">1006</div><div class=\"line\">1007</div><div class=\"line\">1008</div><div class=\"line\">1009</div><div class=\"line\">1010</div><div class=\"line\">1011</div><div class=\"line\">1012</div><div class=\"line\">1013</div><div class=\"line\">1014</div><div class=\"line\">1015</div><div class=\"line\">1016</div><div class=\"line\">1017</div><div class=\"line\">1018</div><div class=\"line\">1019</div><div class=\"line\">1020</div><div class=\"line\">1021</div><div class=\"line\">1022</div><div class=\"line\">1023</div><div class=\"line\">1024</div><div class=\"line\">1025</div><div class=\"line\">1026</div><div class=\"line\">1027</div><div class=\"line\">1028</div><div class=\"line\">1029</div><div class=\"line\">1030</div><div class=\"line\">1031</div><div class=\"line\">1032</div><div class=\"line\">1033</div><div class=\"line\">1034</div><div class=\"line\">1035</div><div class=\"line\">1036</div><div class=\"line\">1037</div><div class=\"line\">1038</div><div class=\"line\">1039</div><div class=\"line\">1040</div><div class=\"line\">1041</div><div class=\"line\">1042</div><div class=\"line\">1043</div><div class=\"line\">1044</div><div class=\"line\">1045</div><div class=\"line\">1046</div><div class=\"line\">1047</div><div class=\"line\">1048</div><div class=\"line\">1049</div><div class=\"line\">1050</div><div class=\"line\">1051</div><div class=\"line\">1052</div><div class=\"line\">1053</div><div class=\"line\">1054</div><div class=\"line\">1055</div><div class=\"line\">1056</div><div class=\"line\">1057</div><div class=\"line\">1058</div><div class=\"line\">1059</div><div class=\"line\">1060</div><div class=\"line\">1061</div><div class=\"line\">1062</div><div class=\"line\">1063</div><div class=\"line\">1064</div><div class=\"line\">1065</div><div class=\"line\">1066</div><div class=\"line\">1067</div><div class=\"line\">1068</div><div class=\"line\">1069</div><div class=\"line\">1070</div><div class=\"line\">1071</div><div class=\"line\">1072</div><div class=\"line\">1073</div><div class=\"line\">1074</div><div class=\"line\">1075</div><div class=\"line\">1076</div><div class=\"line\">1077</div><div class=\"line\">1078</div><div class=\"line\">1079</div><div class=\"line\">1080</div><div class=\"line\">1081</div><div class=\"line\">1082</div><div class=\"line\">1083</div><div class=\"line\">1084</div><div class=\"line\">1085</div><div class=\"line\">1086</div><div class=\"line\">1087</div><div class=\"line\">1088</div><div class=\"line\">1089</div><div class=\"line\">1090</div><div class=\"line\">1091</div><div class=\"line\">1092</div><div class=\"line\">1093</div><div class=\"line\">1094</div><div class=\"line\">1095</div><div class=\"line\">1096</div><div class=\"line\">1097</div><div class=\"line\">1098</div><div class=\"line\">1099</div><div class=\"line\">1100</div><div class=\"line\">1101</div><div class=\"line\">1102</div><div class=\"line\">1103</div><div class=\"line\">1104</div><div class=\"line\">1105</div><div class=\"line\">1106</div><div class=\"line\">1107</div><div class=\"line\">1108</div><div class=\"line\">1109</div><div class=\"line\">1110</div><div class=\"line\">1111</div><div class=\"line\">1112</div><div class=\"line\">1113</div><div class=\"line\">1114</div><div class=\"line\">1115</div><div class=\"line\">1116</div><div class=\"line\">1117</div><div class=\"line\">1118</div><div class=\"line\">1119</div><div class=\"line\">1120</div><div class=\"line\">1121</div><div class=\"line\">1122</div><div class=\"line\">1123</div><div class=\"line\">1124</div><div class=\"line\">1125</div><div class=\"line\">1126</div><div class=\"line\">1127</div><div class=\"line\">1128</div><div class=\"line\">1129</div><div class=\"line\">1130</div><div class=\"line\">1131</div><div class=\"line\">1132</div><div class=\"line\">1133</div><div class=\"line\">1134</div><div class=\"line\">1135</div><div class=\"line\">1136</div><div class=\"line\">1137</div><div class=\"line\">1138</div><div class=\"line\">1139</div><div class=\"line\">1140</div><div class=\"line\">1141</div><div class=\"line\">1142</div><div class=\"line\">1143</div><div class=\"line\">1144</div><div class=\"line\">1145</div><div class=\"line\">1146</div><div class=\"line\">1147</div><div class=\"line\">1148</div><div class=\"line\">1149</div><div class=\"line\">1150</div><div class=\"line\">1151</div><div class=\"line\">1152</div><div class=\"line\">1153</div><div class=\"line\">1154</div><div class=\"line\">1155</div><div class=\"line\">1156</div><div class=\"line\">1157</div><div class=\"line\">1158</div><div class=\"line\">1159</div><div class=\"line\">1160</div><div class=\"line\">1161</div><div class=\"line\">1162</div><div class=\"line\">1163</div><div class=\"line\">1164</div><div class=\"line\">1165</div><div class=\"line\">1166</div><div class=\"line\">1167</div><div class=\"line\">1168</div><div class=\"line\">1169</div><div class=\"line\">1170</div><div class=\"line\">1171</div><div class=\"line\">1172</div><div class=\"line\">1173</div><div class=\"line\">1174</div><div class=\"line\">1175</div><div class=\"line\">1176</div><div class=\"line\">1177</div><div class=\"line\">1178</div><div class=\"line\">1179</div><div class=\"line\">1180</div><div class=\"line\">1181</div><div class=\"line\">1182</div><div class=\"line\">1183</div><div class=\"line\">1184</div><div class=\"line\">1185</div><div class=\"line\">1186</div><div class=\"line\">1187</div><div class=\"line\">1188</div><div class=\"line\">1189</div><div class=\"line\">1190</div><div class=\"line\">1191</div><div class=\"line\">1192</div><div class=\"line\">1193</div><div class=\"line\">1194</div><div class=\"line\">1195</div><div class=\"line\">1196</div><div class=\"line\">1197</div><div class=\"line\">1198</div><div class=\"line\">1199</div><div class=\"line\">1200</div><div class=\"line\">1201</div><div class=\"line\">1202</div><div class=\"line\">1203</div><div class=\"line\">1204</div><div class=\"line\">1205</div><div class=\"line\">1206</div><div class=\"line\">1207</div><div class=\"line\">1208</div><div class=\"line\">1209</div><div class=\"line\">1210</div><div class=\"line\">1211</div><div class=\"line\">1212</div><div class=\"line\">1213</div><div class=\"line\">1214</div><div class=\"line\">1215</div><div class=\"line\">1216</div><div class=\"line\">1217</div><div class=\"line\">1218</div><div class=\"line\">1219</div><div class=\"line\">1220</div><div class=\"line\">1221</div><div class=\"line\">1222</div><div class=\"line\">1223</div><div class=\"line\">1224</div><div class=\"line\">1225</div><div class=\"line\">1226</div><div class=\"line\">1227</div><div class=\"line\">1228</div><div class=\"line\">1229</div><div class=\"line\">1230</div><div class=\"line\">1231</div><div class=\"line\">1232</div><div class=\"line\">1233</div><div class=\"line\">1234</div><div class=\"line\">1235</div><div class=\"line\">1236</div><div class=\"line\">1237</div><div class=\"line\">1238</div><div class=\"line\">1239</div><div class=\"line\">1240</div><div class=\"line\">1241</div><div class=\"line\">1242</div><div class=\"line\">1243</div><div class=\"line\">1244</div><div class=\"line\">1245</div><div class=\"line\">1246</div><div class=\"line\">1247</div><div class=\"line\">1248</div><div class=\"line\">1249</div><div class=\"line\">1250</div><div class=\"line\">1251</div><div class=\"line\">1252</div><div class=\"line\">1253</div><div class=\"line\">1254</div><div class=\"line\">1255</div><div class=\"line\">1256</div><div class=\"line\">1257</div><div class=\"line\">1258</div><div class=\"line\">1259</div><div class=\"line\">1260</div><div class=\"line\">1261</div><div class=\"line\">1262</div><div class=\"line\">1263</div><div class=\"line\">1264</div><div class=\"line\">1265</div><div class=\"line\">1266</div><div class=\"line\">1267</div><div class=\"line\">1268</div><div class=\"line\">1269</div><div class=\"line\">1270</div><div class=\"line\">1271</div><div class=\"line\">1272</div><div class=\"line\">1273</div><div class=\"line\">1274</div><div class=\"line\">1275</div><div class=\"line\">1276</div><div class=\"line\">1277</div><div class=\"line\">1278</div><div class=\"line\">1279</div><div class=\"line\">1280</div><div class=\"line\">1281</div><div class=\"line\">1282</div><div class=\"line\">1283</div><div class=\"line\">1284</div><div class=\"line\">1285</div><div class=\"line\">1286</div><div class=\"line\">1287</div><div class=\"line\">1288</div><div class=\"line\">1289</div><div class=\"line\">1290</div><div class=\"line\">1291</div><div class=\"line\">1292</div><div class=\"line\">1293</div><div class=\"line\">1294</div><div class=\"line\">1295</div><div class=\"line\">1296</div><div class=\"line\">1297</div><div class=\"line\">1298</div><div class=\"line\">1299</div><div class=\"line\">1300</div><div class=\"line\">1301</div><div class=\"line\">1302</div><div class=\"line\">1303</div><div class=\"line\">1304</div><div class=\"line\">1305</div><div class=\"line\">1306</div><div class=\"line\">1307</div><div class=\"line\">1308</div><div class=\"line\">1309</div><div class=\"line\">1310</div><div class=\"line\">1311</div><div class=\"line\">1312</div><div class=\"line\">1313</div><div class=\"line\">1314</div><div class=\"line\">1315</div><div class=\"line\">1316</div><div class=\"line\">1317</div><div class=\"line\">1318</div><div class=\"line\">1319</div><div class=\"line\">1320</div><div class=\"line\">1321</div><div class=\"line\">1322</div><div class=\"line\">1323</div><div class=\"line\">1324</div><div class=\"line\">1325</div><div class=\"line\">1326</div><div class=\"line\">1327</div><div class=\"line\">1328</div><div class=\"line\">1329</div><div class=\"line\">1330</div><div class=\"line\">1331</div><div class=\"line\">1332</div><div class=\"line\">1333</div><div class=\"line\">1334</div><div class=\"line\">1335</div><div class=\"line\">1336</div><div class=\"line\">1337</div><div class=\"line\">1338</div><div class=\"line\">1339</div><div class=\"line\">1340</div><div class=\"line\">1341</div><div class=\"line\">1342</div><div class=\"line\">1343</div><div class=\"line\">1344</div><div class=\"line\">1345</div><div class=\"line\">1346</div><div class=\"line\">1347</div><div class=\"line\">1348</div><div class=\"line\">1349</div><div class=\"line\">1350</div><div class=\"line\">1351</div><div class=\"line\">1352</div><div class=\"line\">1353</div><div class=\"line\">1354</div><div class=\"line\">1355</div><div class=\"line\">1356</div><div class=\"line\">1357</div><div class=\"line\">1358</div><div class=\"line\">1359</div><div class=\"line\">1360</div><div class=\"line\">1361</div><div class=\"line\">1362</div><div class=\"line\">1363</div><div class=\"line\">1364</div><div class=\"line\">1365</div><div class=\"line\">1366</div><div class=\"line\">1367</div><div class=\"line\">1368</div><div class=\"line\">1369</div><div class=\"line\">1370</div><div class=\"line\">1371</div><div class=\"line\">1372</div><div class=\"line\">1373</div><div class=\"line\">1374</div><div class=\"line\">1375</div><div class=\"line\">1376</div><div class=\"line\">1377</div><div class=\"line\">1378</div><div class=\"line\">1379</div><div class=\"line\">1380</div><div class=\"line\">1381</div><div class=\"line\">1382</div><div class=\"line\">1383</div><div class=\"line\">1384</div><div class=\"line\">1385</div><div class=\"line\">1386</div><div class=\"line\">1387</div><div class=\"line\">1388</div><div class=\"line\">1389</div><div class=\"line\">1390</div><div class=\"line\">1391</div><div class=\"line\">1392</div><div class=\"line\">1393</div><div class=\"line\">1394</div><div class=\"line\">1395</div><div class=\"line\">1396</div><div class=\"line\">1397</div><div class=\"line\">1398</div><div class=\"line\">1399</div><div class=\"line\">1400</div><div class=\"line\">1401</div><div class=\"line\">1402</div><div class=\"line\">1403</div><div class=\"line\">1404</div><div class=\"line\">1405</div><div class=\"line\">1406</div><div class=\"line\">1407</div><div class=\"line\">1408</div><div class=\"line\">1409</div><div class=\"line\">1410</div><div class=\"line\">1411</div><div class=\"line\">1412</div><div class=\"line\">1413</div><div class=\"line\">1414</div><div class=\"line\">1415</div><div class=\"line\">1416</div><div class=\"line\">1417</div><div class=\"line\">1418</div><div class=\"line\">1419</div><div class=\"line\">1420</div><div class=\"line\">1421</div><div class=\"line\">1422</div><div class=\"line\">1423</div><div class=\"line\">1424</div><div class=\"line\">1425</div><div class=\"line\">1426</div><div class=\"line\">1427</div><div class=\"line\">1428</div><div class=\"line\">1429</div><div class=\"line\">1430</div><div class=\"line\">1431</div><div class=\"line\">1432</div><div class=\"line\">1433</div><div class=\"line\">1434</div><div class=\"line\">1435</div><div class=\"line\">1436</div><div class=\"line\">1437</div><div class=\"line\">1438</div><div class=\"line\">1439</div><div class=\"line\">1440</div><div class=\"line\">1441</div><div class=\"line\">1442</div><div class=\"line\">1443</div><div class=\"line\">1444</div><div class=\"line\">1445</div><div class=\"line\">1446</div><div class=\"line\">1447</div><div class=\"line\">1448</div><div class=\"line\">1449</div><div class=\"line\">1450</div><div class=\"line\">1451</div><div class=\"line\">1452</div><div class=\"line\">1453</div><div class=\"line\">1454</div><div class=\"line\">1455</div><div class=\"line\">1456</div><div class=\"line\">1457</div><div class=\"line\">1458</div><div class=\"line\">1459</div><div class=\"line\">1460</div><div class=\"line\">1461</div><div class=\"line\">1462</div><div class=\"line\">1463</div><div class=\"line\">1464</div><div class=\"line\">1465</div><div class=\"line\">1466</div><div class=\"line\">1467</div><div class=\"line\">1468</div><div class=\"line\">1469</div><div class=\"line\">1470</div><div class=\"line\">1471</div><div class=\"line\">1472</div><div class=\"line\">1473</div><div class=\"line\">1474</div><div class=\"line\">1475</div><div class=\"line\">1476</div><div class=\"line\">1477</div><div class=\"line\">1478</div><div class=\"line\">1479</div><div class=\"line\">1480</div><div class=\"line\">1481</div><div class=\"line\">1482</div><div class=\"line\">1483</div><div class=\"line\">1484</div><div class=\"line\">1485</div><div class=\"line\">1486</div><div class=\"line\">1487</div><div class=\"line\">1488</div><div class=\"line\">1489</div><div class=\"line\">1490</div><div class=\"line\">1491</div><div class=\"line\">1492</div><div class=\"line\">1493</div><div class=\"line\">1494</div><div class=\"line\">1495</div><div class=\"line\">1496</div><div class=\"line\">1497</div><div class=\"line\">1498</div><div class=\"line\">1499</div><div class=\"line\">1500</div><div class=\"line\">1501</div><div class=\"line\">1502</div><div class=\"line\">1503</div><div class=\"line\">1504</div><div class=\"line\">1505</div><div class=\"line\">1506</div><div class=\"line\">1507</div><div class=\"line\">1508</div><div class=\"line\">1509</div><div class=\"line\">1510</div><div class=\"line\">1511</div><div class=\"line\">1512</div><div class=\"line\">1513</div><div class=\"line\">1514</div><div class=\"line\">1515</div><div class=\"line\">1516</div><div class=\"line\">1517</div><div class=\"line\">1518</div><div class=\"line\">1519</div><div class=\"line\">1520</div><div class=\"line\">1521</div><div class=\"line\">1522</div><div class=\"line\">1523</div><div class=\"line\">1524</div><div class=\"line\">1525</div><div class=\"line\">1526</div><div class=\"line\">1527</div><div class=\"line\">1528</div><div class=\"line\">1529</div><div class=\"line\">1530</div><div class=\"line\">1531</div><div class=\"line\">1532</div><div class=\"line\">1533</div><div class=\"line\">1534</div><div class=\"line\">1535</div><div class=\"line\">1536</div><div class=\"line\">1537</div><div class=\"line\">1538</div><div class=\"line\">1539</div><div class=\"line\">1540</div><div class=\"line\">1541</div><div class=\"line\">1542</div><div class=\"line\">1543</div><div class=\"line\">1544</div><div class=\"line\">1545</div><div class=\"line\">1546</div><div class=\"line\">1547</div><div class=\"line\">1548</div><div class=\"line\">1549</div><div class=\"line\">1550</div><div class=\"line\">1551</div><div class=\"line\">1552</div><div class=\"line\">1553</div><div class=\"line\">1554</div><div class=\"line\">1555</div><div class=\"line\">1556</div><div class=\"line\">1557</div><div class=\"line\">1558</div><div class=\"line\">1559</div><div class=\"line\">1560</div><div class=\"line\">1561</div><div class=\"line\">1562</div><div class=\"line\">1563</div><div class=\"line\">1564</div><div class=\"line\">1565</div><div class=\"line\">1566</div><div class=\"line\">1567</div><div class=\"line\">1568</div><div class=\"line\">1569</div><div class=\"line\">1570</div><div class=\"line\">1571</div><div class=\"line\">1572</div><div class=\"line\">1573</div><div class=\"line\">1574</div><div class=\"line\">1575</div><div class=\"line\">1576</div><div class=\"line\">1577</div><div class=\"line\">1578</div><div class=\"line\">1579</div><div class=\"line\">1580</div><div class=\"line\">1581</div><div class=\"line\">1582</div><div class=\"line\">1583</div><div class=\"line\">1584</div><div class=\"line\">1585</div><div class=\"line\">1586</div><div class=\"line\">1587</div><div class=\"line\">1588</div><div class=\"line\">1589</div><div class=\"line\">1590</div><div class=\"line\">1591</div><div class=\"line\">1592</div><div class=\"line\">1593</div><div class=\"line\">1594</div><div class=\"line\">1595</div><div class=\"line\">1596</div><div class=\"line\">1597</div><div class=\"line\">1598</div><div class=\"line\">1599</div><div class=\"line\">1600</div><div class=\"line\">1601</div><div class=\"line\">1602</div><div class=\"line\">1603</div><div class=\"line\">1604</div><div class=\"line\">1605</div><div class=\"line\">1606</div><div class=\"line\">1607</div><div class=\"line\">1608</div><div class=\"line\">1609</div><div class=\"line\">1610</div><div class=\"line\">1611</div><div class=\"line\">1612</div><div class=\"line\">1613</div><div class=\"line\">1614</div><div class=\"line\">1615</div><div class=\"line\">1616</div><div class=\"line\">1617</div><div class=\"line\">1618</div><div class=\"line\">1619</div><div class=\"line\">1620</div><div class=\"line\">1621</div><div class=\"line\">1622</div><div class=\"line\">1623</div><div class=\"line\">1624</div><div class=\"line\">1625</div><div class=\"line\">1626</div><div class=\"line\">1627</div><div class=\"line\">1628</div><div class=\"line\">1629</div><div class=\"line\">1630</div><div class=\"line\">1631</div><div class=\"line\">1632</div><div class=\"line\">1633</div><div class=\"line\">1634</div><div class=\"line\">1635</div><div class=\"line\">1636</div><div class=\"line\">1637</div><div class=\"line\">1638</div><div class=\"line\">1639</div><div class=\"line\">1640</div><div class=\"line\">1641</div><div class=\"line\">1642</div><div class=\"line\">1643</div><div class=\"line\">1644</div><div class=\"line\">1645</div><div class=\"line\">1646</div><div class=\"line\">1647</div><div class=\"line\">1648</div><div class=\"line\">1649</div><div class=\"line\">1650</div><div class=\"line\">1651</div><div class=\"line\">1652</div><div class=\"line\">1653</div><div class=\"line\">1654</div><div class=\"line\">1655</div><div class=\"line\">1656</div><div class=\"line\">1657</div><div class=\"line\">1658</div><div class=\"line\">1659</div><div class=\"line\">1660</div><div class=\"line\">1661</div><div class=\"line\">1662</div><div class=\"line\">1663</div><div class=\"line\">1664</div><div class=\"line\">1665</div><div class=\"line\">1666</div><div class=\"line\">1667</div><div class=\"line\">1668</div><div class=\"line\">1669</div><div class=\"line\">1670</div><div class=\"line\">1671</div><div class=\"line\">1672</div><div class=\"line\">1673</div><div class=\"line\">1674</div><div class=\"line\">1675</div><div class=\"line\">1676</div><div class=\"line\">1677</div><div class=\"line\">1678</div><div class=\"line\">1679</div><div class=\"line\">1680</div><div class=\"line\">1681</div><div class=\"line\">1682</div><div class=\"line\">1683</div><div class=\"line\">1684</div><div class=\"line\">1685</div><div class=\"line\">1686</div><div class=\"line\">1687</div><div class=\"line\">1688</div><div class=\"line\">1689</div><div class=\"line\">1690</div><div class=\"line\">1691</div><div class=\"line\">1692</div><div class=\"line\">1693</div><div class=\"line\">1694</div><div class=\"line\">1695</div><div class=\"line\">1696</div><div class=\"line\">1697</div><div class=\"line\">1698</div><div class=\"line\">1699</div><div class=\"line\">1700</div><div class=\"line\">1701</div><div class=\"line\">1702</div><div class=\"line\">1703</div><div class=\"line\">1704</div><div class=\"line\">1705</div><div class=\"line\">1706</div><div class=\"line\">1707</div><div class=\"line\">1708</div><div class=\"line\">1709</div><div class=\"line\">1710</div><div class=\"line\">1711</div><div class=\"line\">1712</div><div class=\"line\">1713</div><div class=\"line\">1714</div><div class=\"line\">1715</div><div class=\"line\">1716</div><div class=\"line\">1717</div><div class=\"line\">1718</div><div class=\"line\">1719</div><div class=\"line\">1720</div><div class=\"line\">1721</div><div class=\"line\">1722</div><div class=\"line\">1723</div><div class=\"line\">1724</div><div class=\"line\">1725</div><div class=\"line\">1726</div><div class=\"line\">1727</div><div class=\"line\">1728</div><div class=\"line\">1729</div><div class=\"line\">1730</div><div class=\"line\">1731</div><div class=\"line\">1732</div><div class=\"line\">1733</div><div class=\"line\">1734</div><div class=\"line\">1735</div><div class=\"line\">1736</div><div class=\"line\">1737</div><div class=\"line\">1738</div><div class=\"line\">1739</div><div class=\"line\">1740</div><div class=\"line\">1741</div><div class=\"line\">1742</div><div class=\"line\">1743</div><div class=\"line\">1744</div><div class=\"line\">1745</div><div class=\"line\">1746</div><div class=\"line\">1747</div><div class=\"line\">1748</div><div class=\"line\">1749</div><div class=\"line\">1750</div><div class=\"line\">1751</div><div class=\"line\">1752</div><div class=\"line\">1753</div><div class=\"line\">1754</div><div class=\"line\">1755</div><div class=\"line\">1756</div><div class=\"line\">1757</div><div class=\"line\">1758</div><div class=\"line\">1759</div><div class=\"line\">1760</div><div class=\"line\">1761</div><div class=\"line\">1762</div><div class=\"line\">1763</div><div class=\"line\">1764</div><div class=\"line\">1765</div><div class=\"line\">1766</div><div class=\"line\">1767</div><div class=\"line\">1768</div><div class=\"line\">1769</div><div class=\"line\">1770</div><div class=\"line\">1771</div><div class=\"line\">1772</div><div class=\"line\">1773</div><div class=\"line\">1774</div><div class=\"line\">1775</div><div class=\"line\">1776</div><div class=\"line\">1777</div><div class=\"line\">1778</div><div class=\"line\">1779</div><div class=\"line\">1780</div><div class=\"line\">1781</div><div class=\"line\">1782</div><div class=\"line\">1783</div><div class=\"line\">1784</div><div class=\"line\">1785</div><div class=\"line\">1786</div><div class=\"line\">1787</div><div class=\"line\">1788</div><div class=\"line\">1789</div><div class=\"line\">1790</div><div class=\"line\">1791</div><div class=\"line\">1792</div><div class=\"line\">1793</div><div class=\"line\">1794</div><div class=\"line\">1795</div><div class=\"line\">1796</div><div class=\"line\">1797</div><div class=\"line\">1798</div><div class=\"line\">1799</div><div class=\"line\">1800</div><div class=\"line\">1801</div><div class=\"line\">1802</div><div class=\"line\">1803</div><div class=\"line\">1804</div><div class=\"line\">1805</div><div class=\"line\">1806</div><div class=\"line\">1807</div><div class=\"line\">1808</div><div class=\"line\">1809</div><div class=\"line\">1810</div><div class=\"line\">1811</div><div class=\"line\">1812</div><div class=\"line\">1813</div><div class=\"line\">1814</div><div class=\"line\">1815</div><div class=\"line\">1816</div><div class=\"line\">1817</div><div class=\"line\">1818</div><div class=\"line\">1819</div><div class=\"line\">1820</div><div class=\"line\">1821</div><div class=\"line\">1822</div><div class=\"line\">1823</div><div class=\"line\">1824</div><div class=\"line\">1825</div><div class=\"line\">1826</div><div class=\"line\">1827</div><div class=\"line\">1828</div><div class=\"line\">1829</div><div class=\"line\">1830</div><div class=\"line\">1831</div><div class=\"line\">1832</div><div class=\"line\">1833</div><div class=\"line\">1834</div><div class=\"line\">1835</div><div class=\"line\">1836</div><div class=\"line\">1837</div><div class=\"line\">1838</div><div class=\"line\">1839</div><div class=\"line\">1840</div><div class=\"line\">1841</div><div class=\"line\">1842</div><div class=\"line\">1843</div><div class=\"line\">1844</div><div class=\"line\">1845</div><div class=\"line\">1846</div><div class=\"line\">1847</div><div class=\"line\">1848</div><div class=\"line\">1849</div><div class=\"line\">1850</div><div class=\"line\">1851</div><div class=\"line\">1852</div><div class=\"line\">1853</div><div class=\"line\">1854</div><div class=\"line\">1855</div><div class=\"line\">1856</div><div class=\"line\">1857</div><div class=\"line\">1858</div><div class=\"line\">1859</div><div class=\"line\">1860</div><div class=\"line\">1861</div><div class=\"line\">1862</div><div class=\"line\">1863</div><div class=\"line\">1864</div><div class=\"line\">1865</div><div class=\"line\">1866</div><div class=\"line\">1867</div><div class=\"line\">1868</div><div class=\"line\">1869</div><div class=\"line\">1870</div><div class=\"line\">1871</div><div class=\"line\">1872</div><div class=\"line\">1873</div><div class=\"line\">1874</div><div class=\"line\">1875</div><div class=\"line\">1876</div><div class=\"line\">1877</div><div class=\"line\">1878</div><div class=\"line\">1879</div><div class=\"line\">1880</div><div class=\"line\">1881</div><div class=\"line\">1882</div><div class=\"line\">1883</div><div class=\"line\">1884</div><div class=\"line\">1885</div><div class=\"line\">1886</div><div class=\"line\">1887</div><div class=\"line\">1888</div><div class=\"line\">1889</div><div class=\"line\">1890</div><div class=\"line\">1891</div><div class=\"line\">1892</div><div class=\"line\">1893</div><div class=\"line\">1894</div><div class=\"line\">1895</div><div class=\"line\">1896</div><div class=\"line\">1897</div><div class=\"line\">1898</div><div class=\"line\">1899</div><div class=\"line\">1900</div><div class=\"line\">1901</div><div class=\"line\">1902</div><div class=\"line\">1903</div><div class=\"line\">1904</div><div class=\"line\">1905</div><div class=\"line\">1906</div><div class=\"line\">1907</div><div class=\"line\">1908</div><div class=\"line\">1909</div><div class=\"line\">1910</div><div class=\"line\">1911</div><div class=\"line\">1912</div><div class=\"line\">1913</div><div class=\"line\">1914</div><div class=\"line\">1915</div><div class=\"line\">1916</div><div class=\"line\">1917</div><div class=\"line\">1918</div><div class=\"line\">1919</div><div class=\"line\">1920</div><div class=\"line\">1921</div><div class=\"line\">1922</div><div class=\"line\">1923</div><div class=\"line\">1924</div><div class=\"line\">1925</div><div class=\"line\">1926</div><div class=\"line\">1927</div><div class=\"line\">1928</div><div class=\"line\">1929</div><div class=\"line\">1930</div><div class=\"line\">1931</div><div class=\"line\">1932</div><div class=\"line\">1933</div><div class=\"line\">1934</div><div class=\"line\">1935</div><div class=\"line\">1936</div><div class=\"line\">1937</div><div class=\"line\">1938</div><div class=\"line\">1939</div><div class=\"line\">1940</div><div class=\"line\">1941</div><div class=\"line\">1942</div><div class=\"line\">1943</div><div class=\"line\">1944</div><div class=\"line\">1945</div><div class=\"line\">1946</div><div class=\"line\">1947</div><div class=\"line\">1948</div><div class=\"line\">1949</div><div class=\"line\">1950</div><div class=\"line\">1951</div><div class=\"line\">1952</div><div class=\"line\">1953</div><div class=\"line\">1954</div><div class=\"line\">1955</div><div class=\"line\">1956</div><div class=\"line\">1957</div><div class=\"line\">1958</div><div class=\"line\">1959</div><div class=\"line\">1960</div><div class=\"line\">1961</div><div class=\"line\">1962</div><div class=\"line\">1963</div><div class=\"line\">1964</div><div class=\"line\">1965</div><div class=\"line\">1966</div><div class=\"line\">1967</div><div class=\"line\">1968</div><div class=\"line\">1969</div><div class=\"line\">1970</div><div class=\"line\">1971</div><div class=\"line\">1972</div><div class=\"line\">1973</div><div class=\"line\">1974</div><div class=\"line\">1975</div><div class=\"line\">1976</div><div class=\"line\">1977</div><div class=\"line\">1978</div><div class=\"line\">1979</div><div class=\"line\">1980</div><div class=\"line\">1981</div><div class=\"line\">1982</div><div class=\"line\">1983</div><div class=\"line\">1984</div><div class=\"line\">1985</div><div class=\"line\">1986</div><div class=\"line\">1987</div><div class=\"line\">1988</div><div class=\"line\">1989</div><div class=\"line\">1990</div><div class=\"line\">1991</div><div class=\"line\">1992</div><div class=\"line\">1993</div><div class=\"line\">1994</div><div class=\"line\">1995</div><div class=\"line\">1996</div><div class=\"line\">1997</div><div class=\"line\">1998</div><div class=\"line\">1999</div><div class=\"line\">2000</div><div class=\"line\">2001</div><div class=\"line\">2002</div><div class=\"line\">2003</div><div class=\"line\">2004</div><div class=\"line\">2005</div><div class=\"line\">2006</div><div class=\"line\">2007</div><div class=\"line\">2008</div><div class=\"line\">2009</div><div class=\"line\">2010</div><div class=\"line\">2011</div><div class=\"line\">2012</div><div class=\"line\">2013</div><div class=\"line\">2014</div><div class=\"line\">2015</div><div class=\"line\">2016</div><div class=\"line\">2017</div><div class=\"line\">2018</div><div class=\"line\">2019</div><div class=\"line\">2020</div><div class=\"line\">2021</div><div class=\"line\">2022</div><div class=\"line\">2023</div><div class=\"line\">2024</div><div class=\"line\">2025</div><div class=\"line\">2026</div><div class=\"line\">2027</div><div class=\"line\">2028</div><div class=\"line\">2029</div><div class=\"line\">2030</div><div class=\"line\">2031</div><div class=\"line\">2032</div><div class=\"line\">2033</div><div class=\"line\">2034</div><div class=\"line\">2035</div><div class=\"line\">2036</div><div class=\"line\">2037</div><div class=\"line\">2038</div><div class=\"line\">2039</div><div class=\"line\">2040</div><div class=\"line\">2041</div><div class=\"line\">2042</div><div class=\"line\">2043</div><div class=\"line\">2044</div><div class=\"line\">2045</div><div class=\"line\">2046</div><div class=\"line\">2047</div><div class=\"line\">2048</div><div class=\"line\">2049</div><div class=\"line\">2050</div><div class=\"line\">2051</div><div class=\"line\">2052</div><div class=\"line\">2053</div><div class=\"line\">2054</div><div class=\"line\">2055</div><div class=\"line\">2056</div><div class=\"line\">2057</div><div class=\"line\">2058</div><div class=\"line\">2059</div><div class=\"line\">2060</div><div class=\"line\">2061</div><div class=\"line\">2062</div><div class=\"line\">2063</div><div class=\"line\">2064</div><div class=\"line\">2065</div><div class=\"line\">2066</div><div class=\"line\">2067</div><div class=\"line\">2068</div><div class=\"line\">2069</div><div class=\"line\">2070</div><div class=\"line\">2071</div><div class=\"line\">2072</div><div class=\"line\">2073</div><div class=\"line\">2074</div><div class=\"line\">2075</div><div class=\"line\">2076</div><div class=\"line\">2077</div><div class=\"line\">2078</div><div class=\"line\">2079</div><div class=\"line\">2080</div><div class=\"line\">2081</div><div class=\"line\">2082</div><div class=\"line\">2083</div><div class=\"line\">2084</div><div class=\"line\">2085</div><div class=\"line\">2086</div><div class=\"line\">2087</div><div class=\"line\">2088</div><div class=\"line\">2089</div><div class=\"line\">2090</div><div class=\"line\">2091</div><div class=\"line\">2092</div><div class=\"line\">2093</div><div class=\"line\">2094</div><div class=\"line\">2095</div><div class=\"line\">2096</div><div class=\"line\">2097</div><div class=\"line\">2098</div><div class=\"line\">2099</div><div class=\"line\">2100</div><div class=\"line\">2101</div><div class=\"line\">2102</div><div class=\"line\">2103</div><div class=\"line\">2104</div><div class=\"line\">2105</div><div class=\"line\">2106</div><div class=\"line\">2107</div><div class=\"line\">2108</div><div class=\"line\">2109</div><div class=\"line\">2110</div><div class=\"line\">2111</div><div class=\"line\">2112</div><div class=\"line\">2113</div><div class=\"line\">2114</div><div class=\"line\">2115</div><div class=\"line\">2116</div><div class=\"line\">2117</div><div class=\"line\">2118</div><div class=\"line\">2119</div><div class=\"line\">2120</div><div class=\"line\">2121</div><div class=\"line\">2122</div><div class=\"line\">2123</div><div class=\"line\">2124</div><div class=\"line\">2125</div><div class=\"line\">2126</div><div class=\"line\">2127</div><div class=\"line\">2128</div><div class=\"line\">2129</div><div class=\"line\">2130</div><div class=\"line\">2131</div><div class=\"line\">2132</div><div class=\"line\">2133</div><div class=\"line\">2134</div><div class=\"line\">2135</div><div class=\"line\">2136</div><div class=\"line\">2137</div><div class=\"line\">2138</div><div class=\"line\">2139</div><div class=\"line\">2140</div><div class=\"line\">2141</div><div class=\"line\">2142</div><div class=\"line\">2143</div><div class=\"line\">2144</div><div class=\"line\">2145</div><div class=\"line\">2146</div><div class=\"line\">2147</div><div class=\"line\">2148</div><div class=\"line\">2149</div><div class=\"line\">2150</div><div class=\"line\">2151</div><div class=\"line\">2152</div><div class=\"line\">2153</div><div class=\"line\">2154</div><div class=\"line\">2155</div><div class=\"line\">2156</div><div class=\"line\">2157</div><div class=\"line\">2158</div><div class=\"line\">2159</div><div class=\"line\">2160</div><div class=\"line\">2161</div><div class=\"line\">2162</div><div class=\"line\">2163</div><div class=\"line\">2164</div><div class=\"line\">2165</div><div class=\"line\">2166</div><div class=\"line\">2167</div><div class=\"line\">2168</div><div class=\"line\">2169</div><div class=\"line\">2170</div><div class=\"line\">2171</div><div class=\"line\">2172</div><div class=\"line\">2173</div><div class=\"line\">2174</div><div class=\"line\">2175</div><div class=\"line\">2176</div><div class=\"line\">2177</div><div class=\"line\">2178</div><div class=\"line\">2179</div><div class=\"line\">2180</div><div class=\"line\">2181</div><div class=\"line\">2182</div><div class=\"line\">2183</div><div class=\"line\">2184</div><div class=\"line\">2185</div><div class=\"line\">2186</div><div class=\"line\">2187</div><div class=\"line\">2188</div><div class=\"line\">2189</div><div class=\"line\">2190</div><div class=\"line\">2191</div><div class=\"line\">2192</div><div class=\"line\">2193</div><div class=\"line\">2194</div><div class=\"line\">2195</div><div class=\"line\">2196</div><div class=\"line\">2197</div><div class=\"line\">2198</div><div class=\"line\">2199</div><div class=\"line\">2200</div><div class=\"line\">2201</div><div class=\"line\">2202</div><div class=\"line\">2203</div><div class=\"line\">2204</div><div class=\"line\">2205</div><div class=\"line\">2206</div><div class=\"line\">2207</div><div class=\"line\">2208</div><div class=\"line\">2209</div><div class=\"line\">2210</div><div class=\"line\">2211</div><div class=\"line\">2212</div><div class=\"line\">2213</div><div class=\"line\">2214</div><div class=\"line\">2215</div><div class=\"line\">2216</div><div class=\"line\">2217</div><div class=\"line\">2218</div><div class=\"line\">2219</div><div class=\"line\">2220</div><div class=\"line\">2221</div><div class=\"line\">2222</div><div class=\"line\">2223</div><div class=\"line\">2224</div><div class=\"line\">2225</div><div class=\"line\">2226</div><div class=\"line\">2227</div><div class=\"line\">2228</div><div class=\"line\">2229</div><div class=\"line\">2230</div><div class=\"line\">2231</div><div class=\"line\">2232</div><div class=\"line\">2233</div><div class=\"line\">2234</div><div class=\"line\">2235</div><div class=\"line\">2236</div><div class=\"line\">2237</div><div class=\"line\">2238</div><div class=\"line\">2239</div><div class=\"line\">2240</div><div class=\"line\">2241</div><div class=\"line\">2242</div><div class=\"line\">2243</div><div class=\"line\">2244</div><div class=\"line\">2245</div><div class=\"line\">2246</div><div class=\"line\">2247</div><div class=\"line\">2248</div><div class=\"line\">2249</div><div class=\"line\">2250</div><div class=\"line\">2251</div><div class=\"line\">2252</div><div class=\"line\">2253</div><div class=\"line\">2254</div><div class=\"line\">2255</div><div class=\"line\">2256</div><div class=\"line\">2257</div><div class=\"line\">2258</div><div class=\"line\">2259</div><div class=\"line\">2260</div><div class=\"line\">2261</div><div class=\"line\">2262</div><div class=\"line\">2263</div><div class=\"line\">2264</div><div class=\"line\">2265</div><div class=\"line\">2266</div><div class=\"line\">2267</div><div class=\"line\">2268</div><div class=\"line\">2269</div><div class=\"line\">2270</div><div class=\"line\">2271</div><div class=\"line\">2272</div><div class=\"line\">2273</div><div class=\"line\">2274</div><div class=\"line\">2275</div><div class=\"line\">2276</div><div class=\"line\">2277</div><div class=\"line\">2278</div><div class=\"line\">2279</div><div class=\"line\">2280</div><div class=\"line\">2281</div><div class=\"line\">2282</div><div class=\"line\">2283</div><div class=\"line\">2284</div><div class=\"line\">2285</div><div class=\"line\">2286</div><div class=\"line\">2287</div><div class=\"line\">2288</div><div class=\"line\">2289</div><div class=\"line\">2290</div><div class=\"line\">2291</div><div class=\"line\">2292</div><div class=\"line\">2293</div><div class=\"line\">2294</div><div class=\"line\">2295</div><div class=\"line\">2296</div><div class=\"line\">2297</div><div class=\"line\">2298</div><div class=\"line\">2299</div><div class=\"line\">2300</div><div class=\"line\">2301</div><div class=\"line\">2302</div><div class=\"line\">2303</div><div class=\"line\">2304</div><div class=\"line\">2305</div><div class=\"line\">2306</div><div class=\"line\">2307</div><div class=\"line\">2308</div><div class=\"line\">2309</div><div class=\"line\">2310</div><div class=\"line\">2311</div><div class=\"line\">2312</div><div class=\"line\">2313</div><div class=\"line\">2314</div><div class=\"line\">2315</div><div class=\"line\">2316</div><div class=\"line\">2317</div><div class=\"line\">2318</div><div class=\"line\">2319</div><div class=\"line\">2320</div><div class=\"line\">2321</div><div class=\"line\">2322</div><div class=\"line\">2323</div><div class=\"line\">2324</div><div class=\"line\">2325</div><div class=\"line\">2326</div><div class=\"line\">2327</div><div class=\"line\">2328</div><div class=\"line\">2329</div><div class=\"line\">2330</div><div class=\"line\">2331</div><div class=\"line\">2332</div><div class=\"line\">2333</div><div class=\"line\">2334</div><div class=\"line\">2335</div><div class=\"line\">2336</div><div class=\"line\">2337</div><div class=\"line\">2338</div><div class=\"line\">2339</div><div class=\"line\">2340</div><div class=\"line\">2341</div><div class=\"line\">2342</div><div class=\"line\">2343</div><div class=\"line\">2344</div><div class=\"line\">2345</div><div class=\"line\">2346</div><div class=\"line\">2347</div><div class=\"line\">2348</div><div class=\"line\">2349</div><div class=\"line\">2350</div><div class=\"line\">2351</div><div class=\"line\">2352</div><div class=\"line\">2353</div><div class=\"line\">2354</div><div class=\"line\">2355</div><div class=\"line\">2356</div><div class=\"line\">2357</div><div class=\"line\">2358</div><div class=\"line\">2359</div><div class=\"line\">2360</div><div class=\"line\">2361</div><div class=\"line\">2362</div><div class=\"line\">2363</div><div class=\"line\">2364</div><div class=\"line\">2365</div><div class=\"line\">2366</div><div class=\"line\">2367</div><div class=\"line\">2368</div><div class=\"line\">2369</div><div class=\"line\">2370</div><div class=\"line\">2371</div><div class=\"line\">2372</div><div class=\"line\">2373</div><div class=\"line\">2374</div><div class=\"line\">2375</div><div class=\"line\">2376</div><div class=\"line\">2377</div><div class=\"line\">2378</div><div class=\"line\">2379</div><div class=\"line\">2380</div><div class=\"line\">2381</div><div class=\"line\">2382</div><div class=\"line\">2383</div><div class=\"line\">2384</div><div class=\"line\">2385</div><div class=\"line\">2386</div><div class=\"line\">2387</div><div class=\"line\">2388</div><div class=\"line\">2389</div><div class=\"line\">2390</div><div class=\"line\">2391</div><div class=\"line\">2392</div><div class=\"line\">2393</div><div class=\"line\">2394</div><div class=\"line\">2395</div><div class=\"line\">2396</div><div class=\"line\">2397</div><div class=\"line\">2398</div><div class=\"line\">2399</div><div class=\"line\">2400</div><div class=\"line\">2401</div><div class=\"line\">2402</div><div class=\"line\">2403</div><div class=\"line\">2404</div><div class=\"line\">2405</div><div class=\"line\">2406</div><div class=\"line\">2407</div><div class=\"line\">2408</div><div class=\"line\">2409</div><div class=\"line\">2410</div><div class=\"line\">2411</div><div class=\"line\">2412</div><div class=\"line\">2413</div><div class=\"line\">2414</div><div class=\"line\">2415</div><div class=\"line\">2416</div><div class=\"line\">2417</div><div class=\"line\">2418</div><div class=\"line\">2419</div><div class=\"line\">2420</div><div class=\"line\">2421</div><div class=\"line\">2422</div><div class=\"line\">2423</div><div class=\"line\">2424</div><div class=\"line\">2425</div><div class=\"line\">2426</div><div class=\"line\">2427</div><div class=\"line\">2428</div><div class=\"line\">2429</div><div class=\"line\">2430</div><div class=\"line\">2431</div><div class=\"line\">2432</div><div class=\"line\">2433</div><div class=\"line\">2434</div><div class=\"line\">2435</div><div class=\"line\">2436</div><div class=\"line\">2437</div><div class=\"line\">2438</div><div class=\"line\">2439</div><div class=\"line\">2440</div><div class=\"line\">2441</div><div class=\"line\">2442</div><div class=\"line\">2443</div><div class=\"line\">2444</div><div class=\"line\">2445</div><div class=\"line\">2446</div><div class=\"line\">2447</div><div class=\"line\">2448</div><div class=\"line\">2449</div><div class=\"line\">2450</div><div class=\"line\">2451</div><div class=\"line\">2452</div><div class=\"line\">2453</div><div class=\"line\">2454</div><div class=\"line\">2455</div><div class=\"line\">2456</div><div class=\"line\">2457</div><div class=\"line\">2458</div><div class=\"line\">2459</div><div class=\"line\">2460</div><div class=\"line\">2461</div><div class=\"line\">2462</div><div class=\"line\">2463</div><div class=\"line\">2464</div><div class=\"line\">2465</div><div class=\"line\">2466</div><div class=\"line\">2467</div><div class=\"line\">2468</div><div class=\"line\">2469</div><div class=\"line\">2470</div><div class=\"line\">2471</div><div class=\"line\">2472</div><div class=\"line\">2473</div><div class=\"line\">2474</div><div class=\"line\">2475</div><div class=\"line\">2476</div><div class=\"line\">2477</div><div class=\"line\">2478</div><div class=\"line\">2479</div><div class=\"line\">2480</div><div class=\"line\">2481</div><div class=\"line\">2482</div><div class=\"line\">2483</div><div class=\"line\">2484</div><div class=\"line\">2485</div><div class=\"line\">2486</div><div class=\"line\">2487</div><div class=\"line\">2488</div><div class=\"line\">2489</div><div class=\"line\">2490</div><div class=\"line\">2491</div><div class=\"line\">2492</div><div class=\"line\">2493</div><div class=\"line\">2494</div><div class=\"line\">2495</div><div class=\"line\">2496</div><div class=\"line\">2497</div><div class=\"line\">2498</div><div class=\"line\">2499</div><div class=\"line\">2500</div><div class=\"line\">2501</div><div class=\"line\">2502</div><div class=\"line\">2503</div><div class=\"line\">2504</div><div class=\"line\">2505</div><div class=\"line\">2506</div><div class=\"line\">2507</div><div class=\"line\">2508</div><div class=\"line\">2509</div><div class=\"line\">2510</div><div class=\"line\">2511</div><div class=\"line\">2512</div><div class=\"line\">2513</div><div class=\"line\">2514</div><div class=\"line\">2515</div><div class=\"line\">2516</div><div class=\"line\">2517</div><div class=\"line\">2518</div><div class=\"line\">2519</div><div class=\"line\">2520</div><div class=\"line\">2521</div><div class=\"line\">2522</div><div class=\"line\">2523</div><div class=\"line\">2524</div><div class=\"line\">2525</div><div class=\"line\">2526</div><div class=\"line\">2527</div><div class=\"line\">2528</div><div class=\"line\">2529</div><div class=\"line\">2530</div><div class=\"line\">2531</div><div class=\"line\">2532</div><div class=\"line\">2533</div><div class=\"line\">2534</div><div class=\"line\">2535</div><div class=\"line\">2536</div><div class=\"line\">2537</div><div class=\"line\">2538</div><div class=\"line\">2539</div><div class=\"line\">2540</div><div class=\"line\">2541</div><div class=\"line\">2542</div><div class=\"line\">2543</div><div class=\"line\">2544</div><div class=\"line\">2545</div><div class=\"line\">2546</div><div class=\"line\">2547</div><div class=\"line\">2548</div><div class=\"line\">2549</div><div class=\"line\">2550</div><div class=\"line\">2551</div><div class=\"line\">2552</div><div class=\"line\">2553</div><div class=\"line\">2554</div><div class=\"line\">2555</div><div class=\"line\">2556</div><div class=\"line\">2557</div><div class=\"line\">2558</div><div class=\"line\">2559</div><div class=\"line\">2560</div><div class=\"line\">2561</div><div class=\"line\">2562</div><div class=\"line\">2563</div><div class=\"line\">2564</div><div class=\"line\">2565</div><div class=\"line\">2566</div><div class=\"line\">2567</div><div class=\"line\">2568</div><div class=\"line\">2569</div><div class=\"line\">2570</div><div class=\"line\">2571</div><div class=\"line\">2572</div><div class=\"line\">2573</div><div class=\"line\">2574</div><div class=\"line\">2575</div><div class=\"line\">2576</div><div class=\"line\">2577</div><div class=\"line\">2578</div><div class=\"line\">2579</div><div class=\"line\">2580</div><div class=\"line\">2581</div><div class=\"line\">2582</div><div class=\"line\">2583</div><div class=\"line\">2584</div><div class=\"line\">2585</div><div class=\"line\">2586</div><div class=\"line\">2587</div><div class=\"line\">2588</div><div class=\"line\">2589</div><div class=\"line\">2590</div><div class=\"line\">2591</div><div class=\"line\">2592</div><div class=\"line\">2593</div><div class=\"line\">2594</div><div class=\"line\">2595</div><div class=\"line\">2596</div><div class=\"line\">2597</div><div class=\"line\">2598</div><div class=\"line\">2599</div><div class=\"line\">2600</div><div class=\"line\">2601</div><div class=\"line\">2602</div><div class=\"line\">2603</div><div class=\"line\">2604</div><div class=\"line\">2605</div><div class=\"line\">2606</div><div class=\"line\">2607</div><div class=\"line\">2608</div><div class=\"line\">2609</div><div class=\"line\">2610</div><div class=\"line\">2611</div><div class=\"line\">2612</div><div class=\"line\">2613</div><div class=\"line\">2614</div><div class=\"line\">2615</div><div class=\"line\">2616</div><div class=\"line\">2617</div><div class=\"line\">2618</div><div class=\"line\">2619</div><div class=\"line\">2620</div><div class=\"line\">2621</div><div class=\"line\">2622</div><div class=\"line\">2623</div><div class=\"line\">2624</div><div class=\"line\">2625</div><div class=\"line\">2626</div><div class=\"line\">2627</div><div class=\"line\">2628</div><div class=\"line\">2629</div><div class=\"line\">2630</div><div class=\"line\">2631</div><div class=\"line\">2632</div><div class=\"line\">2633</div><div class=\"line\">2634</div><div class=\"line\">2635</div><div class=\"line\">2636</div><div class=\"line\">2637</div><div class=\"line\">2638</div><div class=\"line\">2639</div><div class=\"line\">2640</div><div class=\"line\">2641</div><div class=\"line\">2642</div><div class=\"line\">2643</div><div class=\"line\">2644</div><div class=\"line\">2645</div><div class=\"line\">2646</div><div class=\"line\">2647</div><div class=\"line\">2648</div><div class=\"line\">2649</div><div class=\"line\">2650</div><div class=\"line\">2651</div><div class=\"line\">2652</div><div class=\"line\">2653</div><div class=\"line\">2654</div><div class=\"line\">2655</div><div class=\"line\">2656</div><div class=\"line\">2657</div><div class=\"line\">2658</div><div class=\"line\">2659</div><div class=\"line\">2660</div><div class=\"line\">2661</div><div class=\"line\">2662</div><div class=\"line\">2663</div><div class=\"line\">2664</div><div class=\"line\">2665</div><div class=\"line\">2666</div><div class=\"line\">2667</div><div class=\"line\">2668</div><div class=\"line\">2669</div><div class=\"line\">2670</div><div class=\"line\">2671</div><div class=\"line\">2672</div><div class=\"line\">2673</div><div class=\"line\">2674</div><div class=\"line\">2675</div><div class=\"line\">2676</div><div class=\"line\">2677</div><div class=\"line\">2678</div><div class=\"line\">2679</div><div class=\"line\">2680</div><div class=\"line\">2681</div><div class=\"line\">2682</div><div class=\"line\">2683</div><div class=\"line\">2684</div><div class=\"line\">2685</div><div class=\"line\">2686</div><div class=\"line\">2687</div><div class=\"line\">2688</div><div class=\"line\">2689</div><div class=\"line\">2690</div><div class=\"line\">2691</div><div class=\"line\">2692</div><div class=\"line\">2693</div><div class=\"line\">2694</div><div class=\"line\">2695</div><div class=\"line\">2696</div><div class=\"line\">2697</div><div class=\"line\">2698</div><div class=\"line\">2699</div><div class=\"line\">2700</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> iniLoadFromFile(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *szFilename, IniContext *pContext)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> iniLoadFromFileEx(szFilename, pContext, <span class=\"keyword\">false</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> iniLoadFromFileEx(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *szFilename, IniContext *pContext,</div><div class=\"line\">    <span class=\"keyword\">bool</span> ignore_annotation) <span class=\"comment\">// annotation is 注释, such as symbol = /* */</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> result;</div><div class=\"line\">\t<span class=\"keyword\">int</span> len;</div><div class=\"line\">\t<span class=\"keyword\">char</span> *pLast;</div><div class=\"line\">\t<span class=\"keyword\">char</span> full_filename[MAX_PATH_SIZE]; <span class=\"comment\">//保存完整文件名路径</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=iniInitContext(pContext)) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">        pContext-&gt;ignore_annotation = ignore_annotation; <span class=\"comment\">//default is true</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (strncasecmp(szFilename, <span class=\"string\">\"http://\"</span>, <span class=\"number\">7</span>) == <span class=\"number\">0</span>) <span class=\"comment\">// szFilename可以为类似： http://www.abc.com/sdfs/xxx.conf</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t*pContext-&gt;config_path = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">\t\tsnprintf(full_filename, sizeof(full_filename),<span class=\"string\">\"%s\"</span>,szFilename); </div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (*szFilename == <span class=\"string\">'/'</span>) <span class=\"comment\">// szFilename is the absolute path</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tpLast = strrchr(szFilename, <span class=\"string\">'/'</span>); <span class=\"comment\">//从后面开始查找第一个字符'/'</span></div><div class=\"line\">\t\t\tlen = pLast - szFilename;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (len &gt;= sizeof(pContext-&gt;config_path))</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span>\\</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">\"the path of the config file: %s is \"</span> \\</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">\"too long!\"</span>, <span class=\"keyword\">__LINE__</span>, szFilename);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> ENOSPC;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\tmemcpy(pContext-&gt;config_path, szFilename, len);</div><div class=\"line\">\t\t\t*(pContext-&gt;config_path + len) = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">\t\t\tsnprintf(full_filename, sizeof(full_filename), \\</div><div class=\"line\">\t\t\t\t<span class=\"string\">\"%s\"</span>, szFilename);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span>  <span class=\"comment\">// 表明是从当前路径下的文件名，szFilename is the conf file name or is current_dir/xxx1/xxx2/xxx.conf</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tmemset(pContext-&gt;config_path, <span class=\"number\">0</span>, \\</div><div class=\"line\">\t\t\t\tsizeof(pContext-&gt;config_path));</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (getcwd(pContext-&gt;config_path, sizeof( \\</div><div class=\"line\">\t\t\t\tpContext-&gt;config_path)) == <span class=\"keyword\">NULL</span>)  <span class=\"comment\">//getcwd函数为得到当前目录</span></div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">\"getcwd fail, errno: %d, \"</span> \\</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">\"error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">__LINE__</span>, errno, STRERROR(errno));</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> errno != <span class=\"number\">0</span> ? errno : EPERM;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\tlen = strlen(pContext-&gt;config_path);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (len &gt; <span class=\"number\">0</span> &amp;&amp; pContext-&gt;config_path[len - <span class=\"number\">1</span>] == <span class=\"string\">'/'</span>)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tlen--;</div><div class=\"line\">\t\t\t\t*(pContext-&gt;config_path + len) = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">\t\t\t&#125;  <span class=\"comment\">// make sure the last char is not '/'</span></div><div class=\"line\"></div><div class=\"line\">\t\t\tsnprintf(full_filename, sizeof(full_filename), \\</div><div class=\"line\">\t\t\t\t<span class=\"string\">\"%s/%s\"</span>, pContext-&gt;config_path, szFilename);</div><div class=\"line\"></div><div class=\"line\">\t\t\tpLast = strrchr(szFilename, <span class=\"string\">'/'</span>);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (pLast != <span class=\"keyword\">NULL</span>)  <span class=\"comment\">// such as szFilename is \"data/xxx.conf\"</span></div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> tail_len;</div><div class=\"line\">\t\t\t\ttail_len = pLast - szFilename;</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (len + <span class=\"number\">1</span> + tail_len &gt;= sizeof( \\</div><div class=\"line\">\t\t\t\t\t\tpContext-&gt;config_path))</div><div class=\"line\">\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span>\\</div><div class=\"line\">\t\t\t\t\t\t<span class=\"string\">\"the path of the config \"</span> \\</div><div class=\"line\">\t\t\t\t\t\t<span class=\"string\">\"file: %s is too long!\"</span>, \\</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">__LINE__</span>, szFilename);</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> ENOSPC;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">                *(pContext-&gt;config_path + len++) = <span class=\"string\">'/'</span>;</div><div class=\"line\">\t\t\t\tmemcpy(pContext-&gt;config_path + len, \\</div><div class=\"line\">\t\t\t\t\tszFilename, tail_len);</div><div class=\"line\">\t\t\t\tlen += tail_len;</div><div class=\"line\">\t\t\t\t*(pContext-&gt;config_path + len) = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// now full_filename is the absolute path of conf file, pContext-&gt;config_path</span></div><div class=\"line\">    <span class=\"comment\">// is the conf file directory</span></div><div class=\"line\">\tresult = iniDoLoadFromFile(full_filename, pContext);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (result == <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tiniSortItems(pContext);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tiniFreeContext(pContext);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// init the member of IniContext, such as init the hash member:pContext-&gt;sections</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> iniInitContext(IniContext *pContext)</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> result;</div><div class=\"line\"></div><div class=\"line\">\tmemset(pContext, <span class=\"number\">0</span>, sizeof(IniContext));</div><div class=\"line\">\tpContext-&gt;current_section = &amp;pContext-&gt;global; <span class=\"comment\">//指向global,用于保存全局key,value对</span></div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=hash_init(&amp;pContext-&gt;sections, Time33Hash, <span class=\"number\">32</span>, <span class=\"number\">0.75</span>)) != <span class=\"number\">0</span>) <span class=\"comment\">//hash数组初始化，Time33Hash为hash函数，32为容量，0.75为负载因子</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"hash_init fail, errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t<span class=\"keyword\">__LINE__</span>, result, STRERROR(result));</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">hash函数如下：</div><div class=\"line\"><span class=\"comment\">#define TIME33_HASH_FUNC(init_value) \\</span></div><div class=\"line\">\t<span class=\"keyword\">int</span> nHash; \\</div><div class=\"line\">\tunsigned <span class=\"keyword\">char</span> *pKey; \\</div><div class=\"line\">\tunsigned <span class=\"keyword\">char</span> *pEnd; \\</div><div class=\"line\"> \\</div><div class=\"line\">\tnHash = init_value; \\</div><div class=\"line\">\tpEnd = (unsigned <span class=\"keyword\">char</span> *)key + key_len; \\</div><div class=\"line\">\t<span class=\"keyword\">for</span> (pKey = (unsigned <span class=\"keyword\">char</span> *)key; pKey != pEnd; pKey++) \\</div><div class=\"line\">\t&#123; \\</div><div class=\"line\">\t\tnHash += (nHash &lt;&lt; <span class=\"number\">5</span>) + (*pKey); \\</div><div class=\"line\">\t&#125; \\</div><div class=\"line\"> \\</div><div class=\"line\">\t<span class=\"keyword\">return</span> nHash; \\</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// get a int value according to the key value</span></div><div class=\"line\"><span class=\"keyword\">int</span> Time33Hash(<span class=\"keyword\">const</span> void *key, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> key_len)</div><div class=\"line\">&#123;</div><div class=\"line\">\tTIME33_HASH_FUNC(<span class=\"number\">0</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#define hash_init(pHash, hash_func, capacity, load_factor) \\</span></div><div class=\"line\">\thash_init_ex(pHash, hash_func, capacity, load_factor, <span class=\"number\">0</span>, <span class=\"keyword\">false</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 参数依次为：要初始化的hash数组，hash函数，容量，负载因子（当前保存的项数/capacity）,hash数组能用的最大字节数，保存value的空间是否已经在外部被分配了</span></div><div class=\"line\"><span class=\"keyword\">int</span> hash_init_ex(HashArray *pHash, HashFunc hash_func, \\</div><div class=\"line\">\t\t<span class=\"keyword\">const</span> unsigned <span class=\"keyword\">int</span> capacity, <span class=\"keyword\">const</span> <span class=\"keyword\">double</span> load_factor, \\</div><div class=\"line\">\t\t<span class=\"keyword\">const</span> int64_t max_bytes, <span class=\"keyword\">const</span> <span class=\"keyword\">bool</span> bMallocValue)</div><div class=\"line\">&#123;</div><div class=\"line\">\tunsigned <span class=\"keyword\">int</span> *pprime;</div><div class=\"line\">\tunsigned <span class=\"keyword\">int</span> *prime_end;</div><div class=\"line\">\t<span class=\"keyword\">int</span> result;</div><div class=\"line\"></div><div class=\"line\">\tmemset(pHash, <span class=\"number\">0</span>, sizeof(HashArray));</div><div class=\"line\">\tprime_end = prime_array + PRIME_ARRAY_SIZE;  <span class=\"comment\">// 素数数组</span></div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">for</span> (pprime = prime_array; pprime!=prime_end; pprime++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ( *pprime &gt; capacity ) <span class=\"comment\">//找到第一个大于容量的素数</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tpHash-&gt;capacity = pprime;</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (pHash-&gt;capacity == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> EINVAL;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=_hash_alloc_buckets(pHash, <span class=\"number\">0</span>)) != <span class=\"number\">0</span>) <span class=\"comment\">//分配桶</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpHash-&gt;hash_func = hash_func;</div><div class=\"line\">\tpHash-&gt;max_bytes = max_bytes; <span class=\"comment\">//hash数组能够使用的最大字节数</span></div><div class=\"line\">\tpHash-&gt;is_malloc_value = bMallocValue;  <span class=\"comment\">// default is false，保存key,value中的value数据时的空间是否已经在外部被分配</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// load_factor default is 0.75</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> (load_factor &gt;= <span class=\"number\">0.00</span> &amp;&amp; load_factor &lt;= <span class=\"number\">1.00</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tpHash-&gt;load_factor = load_factor;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tpHash-&gt;load_factor = <span class=\"number\">0.50</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 素数数组</span></div><div class=\"line\"><span class=\"keyword\">static</span> unsigned <span class=\"keyword\">int</span> prime_array[] = &#123;</div><div class=\"line\">    <span class=\"number\">1</span>,              <span class=\"comment\">/* 0 */</span></div><div class=\"line\">    <span class=\"number\">3</span>,              <span class=\"comment\">/* 1 */</span></div><div class=\"line\">    <span class=\"number\">17</span>,             <span class=\"comment\">/* 2 */</span></div><div class=\"line\">    <span class=\"number\">37</span>,             <span class=\"comment\">/* 3 */</span></div><div class=\"line\">    <span class=\"number\">79</span>,             <span class=\"comment\">/* 4 */</span></div><div class=\"line\">    <span class=\"number\">163</span>,            <span class=\"comment\">/* 5 */</span></div><div class=\"line\">    <span class=\"number\">331</span>,            <span class=\"comment\">/* 6 */</span></div><div class=\"line\">    <span class=\"number\">673</span>,            <span class=\"comment\">/* 7 */</span></div><div class=\"line\">    <span class=\"number\">1361</span>,           <span class=\"comment\">/* 8 */</span></div><div class=\"line\">    <span class=\"number\">2729</span>,           <span class=\"comment\">/* 9 */</span></div><div class=\"line\">    <span class=\"number\">5471</span>,           <span class=\"comment\">/* 10 */</span></div><div class=\"line\">    <span class=\"number\">10949</span>,          <span class=\"comment\">/* 11 */</span></div><div class=\"line\">    <span class=\"number\">21911</span>,          <span class=\"comment\">/* 12 */</span></div><div class=\"line\">    <span class=\"number\">43853</span>,          <span class=\"comment\">/* 13 */</span></div><div class=\"line\">    <span class=\"number\">87719</span>,          <span class=\"comment\">/* 14 */</span></div><div class=\"line\">    <span class=\"number\">175447</span>,         <span class=\"comment\">/* 15 */</span></div><div class=\"line\">    <span class=\"number\">350899</span>,         <span class=\"comment\">/* 16 */</span></div><div class=\"line\">    <span class=\"number\">701819</span>,         <span class=\"comment\">/* 17 */</span></div><div class=\"line\">    <span class=\"number\">1403641</span>,        <span class=\"comment\">/* 18 */</span></div><div class=\"line\">    <span class=\"number\">2807303</span>,        <span class=\"comment\">/* 19 */</span></div><div class=\"line\">    <span class=\"number\">5614657</span>,        <span class=\"comment\">/* 20 */</span></div><div class=\"line\">    <span class=\"number\">11229331</span>,       <span class=\"comment\">/* 21 */</span></div><div class=\"line\">    <span class=\"number\">22458671</span>,       <span class=\"comment\">/* 22 */</span></div><div class=\"line\">    <span class=\"number\">44917381</span>,       <span class=\"comment\">/* 23 */</span></div><div class=\"line\">    <span class=\"number\">89834777</span>,       <span class=\"comment\">/* 24 */</span></div><div class=\"line\">    <span class=\"number\">179669557</span>,      <span class=\"comment\">/* 25 */</span></div><div class=\"line\">    <span class=\"number\">359339171</span>,      <span class=\"comment\">/* 26 */</span></div><div class=\"line\">    <span class=\"number\">718678369</span>,      <span class=\"comment\">/* 27 */</span></div><div class=\"line\">    <span class=\"number\">1437356741</span>,     <span class=\"comment\">/* 28 */</span></div><div class=\"line\">    <span class=\"number\">2147483647</span>      <span class=\"comment\">/* 29 (largest signed int prime) */</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#define PRIME_ARRAY_SIZE  30</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// allocate the space of hash array</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> _hash_alloc_buckets(HashArray *pHash, <span class=\"keyword\">const</span> unsigned <span class=\"keyword\">int</span> old_capacity)</div><div class=\"line\">&#123;</div><div class=\"line\">\tsize_t bytes;</div><div class=\"line\"></div><div class=\"line\">\tbytes = sizeof(HashData *) * (*pHash-&gt;capacity);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (pHash-&gt;max_bytes &gt; <span class=\"number\">0</span> &amp;&amp; pHash-&gt;bytes_used+bytes &gt; pHash-&gt;max_bytes)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> ENOSPC; <span class=\"comment\">// no more memory in device </span></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpHash-&gt;buckets = (HashData **)malloc(bytes);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (pHash-&gt;buckets == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> ENOMEM;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tmemset(pHash-&gt;buckets, <span class=\"number\">0</span>, bytes); <span class=\"comment\">// sizeof(HashData *) * old_capacity为旧数组的大小</span></div><div class=\"line\">\tpHash-&gt;bytes_used += bytes - sizeof(HashData *) * old_capacity; <span class=\"comment\">//bytes为新大小，减去旧数组大小则为新增大小</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> iniDoLoadFromFile(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *szFilename, \\</div><div class=\"line\">\t\tIniContext *pContext)</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">char</span> *content;</div><div class=\"line\">\t<span class=\"keyword\">int</span> result;</div><div class=\"line\">\t<span class=\"keyword\">int</span> http_status;</div><div class=\"line\">\t<span class=\"keyword\">int</span> content_len;</div><div class=\"line\">\tint64_t file_size;</div><div class=\"line\">\t<span class=\"keyword\">char</span> error_info[<span class=\"number\">512</span>];</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (strncasecmp(szFilename, <span class=\"string\">\"http://\"</span>, <span class=\"number\">7</span>) == <span class=\"number\">0</span>) <span class=\"comment\">// 是否为http://xxx.xx.xx/xx1/xx.conf形式</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t    <span class=\"comment\">// szFilename: http://xx1.xx2.xx3/haha/dir/xxx.conf</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((result=get_url_content(szFilename, <span class=\"number\">10</span>, <span class=\"number\">60</span>, &amp;http_status, \\   </div><div class=\"line\">\t\t\t\t&amp;content, &amp;content_len, error_info)) != <span class=\"number\">0</span>)  <span class=\"comment\">//get_url_content函数发送http请求获得文件内容</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t\t<span class=\"string\">\"get_url_content fail, \"</span> \\</div><div class=\"line\">\t\t\t\t<span class=\"string\">\"url: %s, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">__LINE__</span>, szFilename, error_info);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (http_status != <span class=\"number\">200</span>) <span class=\"comment\">// means http response status is not correct</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tfree(content);</div><div class=\"line\">\t\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t\t<span class=\"string\">\"HTTP status code: %d != 200, url: %s\"</span>, \\</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">__LINE__</span>, http_status, szFilename);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> EINVAL;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((result=getFileContent(szFilename, &amp;content, \\</div><div class=\"line\">\t\t\t\t&amp;file_size)) != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tresult = iniLoadItemsFromBuffer(content, pContext);</div><div class=\"line\">\tfree(content);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> get_url_content(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *url, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> connect_timeout, \\</div><div class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> network_timeout, <span class=\"keyword\">int</span> *http_status, \\</div><div class=\"line\">\t<span class=\"keyword\">char</span> **content, <span class=\"keyword\">int</span> *content_len, <span class=\"keyword\">char</span> *error_info)</div><div class=\"line\">&#123;</div><div class=\"line\">    *content = <span class=\"keyword\">NULL</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> get_url_content_ex(url, strlen(url), connect_timeout, network_timeout,</div><div class=\"line\">            http_status, content, content_len, error_info);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\">get the content of url, the func will send http request and recv http response</div><div class=\"line\">// connect_timeout is 10 default</div><div class=\"line\">// network_timeout is 60 default</div><div class=\"line\">http_status用于保存http响应报文的状态，如http 1.1 200 ok中的200</div><div class=\"line\">content和content_len用于保存内容和长度</div><div class=\"line\">error_info用于保存错误信息</div><div class=\"line\">*/</span></div><div class=\"line\"><span class=\"keyword\">int</span> get_url_content_ex(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *url, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> url_len,</div><div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> connect_timeout, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> network_timeout,</div><div class=\"line\">        <span class=\"keyword\">int</span> *http_status, <span class=\"keyword\">char</span> **content, <span class=\"keyword\">int</span> *content_len, <span class=\"keyword\">char</span> *error_info)</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">char</span> domain_name[<span class=\"number\">256</span>];</div><div class=\"line\">\t<span class=\"keyword\">char</span> ip_addr[IP_ADDRESS_SIZE];</div><div class=\"line\">\t<span class=\"keyword\">char</span> out_buff[<span class=\"number\">4096</span>];</div><div class=\"line\">\t<span class=\"keyword\">int</span> domain_len;</div><div class=\"line\">\t<span class=\"keyword\">int</span> out_len;</div><div class=\"line\">\t<span class=\"keyword\">int</span> alloc_size;</div><div class=\"line\">\t<span class=\"keyword\">int</span> recv_bytes;</div><div class=\"line\">\t<span class=\"keyword\">int</span> result;</div><div class=\"line\">\t<span class=\"keyword\">int</span> sock;</div><div class=\"line\">\t<span class=\"keyword\">int</span> port;</div><div class=\"line\">    <span class=\"keyword\">bool</span> bNeedAlloc;</div><div class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *pDomain;</div><div class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *pContent;</div><div class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *pURI;</div><div class=\"line\">\t<span class=\"keyword\">char</span> *pPort;</div><div class=\"line\">\t<span class=\"keyword\">char</span> *pSpace;</div><div class=\"line\"></div><div class=\"line\">\t*http_status = <span class=\"number\">0</span>;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (*content == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        bNeedAlloc = <span class=\"keyword\">true</span>;</div><div class=\"line\">        alloc_size = <span class=\"number\">64</span> * <span class=\"number\">1024</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        bNeedAlloc = <span class=\"keyword\">false</span>;</div><div class=\"line\">        alloc_size = *content_len - <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">\t*content_len = <span class=\"number\">0</span>;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (url_len &gt; sizeof(out_buff) - <span class=\"number\">128</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">\t\tsprintf(error_info, <span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span></div><div class=\"line\">                <span class=\"string\">\"url too long, url length: %d &gt; %d\"</span>, <span class=\"keyword\">__LINE__</span>,</div><div class=\"line\">                url_len, (<span class=\"keyword\">int</span>)(sizeof(out_buff) - <span class=\"number\">128</span>));</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> ENAMETOOLONG;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (url_len &lt;= <span class=\"number\">7</span> || strncasecmp(url, <span class=\"string\">\"http://\"</span>, <span class=\"number\">7</span>) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tsprintf(error_info, <span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"invalid url.\"</span>, <span class=\"keyword\">__LINE__</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> EINVAL;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpDomain = url + <span class=\"number\">7</span>;</div><div class=\"line\">\tpURI = strchr(pDomain, <span class=\"string\">'/'</span>);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (pURI == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tdomain_len = url_len - <span class=\"number\">7</span>;</div><div class=\"line\">\t\tpURI = <span class=\"string\">\"/\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tdomain_len = pURI - pDomain;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (domain_len &gt;= sizeof(domain_name))</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tsprintf(error_info, <span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"domain is too large, exceed %d.\"</span>, \\</div><div class=\"line\">\t\t\t<span class=\"keyword\">__LINE__</span>, (<span class=\"keyword\">int</span>)sizeof(domain_name));</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> EINVAL;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tmemcpy(domain_name, pDomain, domain_len);</div><div class=\"line\">\t*(domain_name + domain_len) = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">\tpPort = strchr(domain_name, <span class=\"string\">':'</span>);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (pPort == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tport = <span class=\"number\">80</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t*pPort = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">\t\tport = atoi(pPort + <span class=\"number\">1</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (getIpaddrByName(domain_name, ip_addr, \\</div><div class=\"line\">\t\tsizeof(ip_addr)) == INADDR_NONE)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tsprintf(error_info, <span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"resolve domain \\\"%s\\\" fail.\"</span>, \\</div><div class=\"line\">\t\t\t<span class=\"keyword\">__LINE__</span>, domain_name);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> EINVAL;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tsock = socket(AF_INET, SOCK_STREAM, <span class=\"number\">0</span>);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span>(sock &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tsprintf(error_info, <span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"socket create failed, errno: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"error info: %s\"</span>, <span class=\"keyword\">__LINE__</span>, \\</div><div class=\"line\">\t\t\terrno, STRERROR(errno));</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> errno != <span class=\"number\">0</span> ? errno : EPERM;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=connectserverbyip_nb_auto(sock, ip_addr, port, \\</div><div class=\"line\">\t\t\tconnect_timeout)) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tclose(sock);</div><div class=\"line\"></div><div class=\"line\">\t\tsprintf(error_info, <span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"connect to %s:%d fail, errno: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"error info: %s\"</span>, <span class=\"keyword\">__LINE__</span>, domain_name, \\</div><div class=\"line\">\t\t\tport, result, STRERROR(result));</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tout_len = snprintf(out_buff, sizeof(out_buff), \\</div><div class=\"line\">\t\t<span class=\"string\">\"GET %s HTTP/1.0\\r\\n\"</span> \\</div><div class=\"line\">\t\t<span class=\"string\">\"Host: %s:%d\\r\\n\"</span> \\</div><div class=\"line\">\t\t<span class=\"string\">\"Connection: close\\r\\n\"</span> \\</div><div class=\"line\">\t\t<span class=\"string\">\"\\r\\n\"</span>, pURI, domain_name, port);</div><div class=\"line\">\t<span class=\"comment\">// we have Connection: close means: the peer will shutdown the socket when it has finished sending data</span></div><div class=\"line\">\t<span class=\"comment\">// send http request </span></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=tcpsenddata(sock, out_buff, out_len, network_timeout)) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tclose(sock);</div><div class=\"line\"></div><div class=\"line\">\t\tsprintf(error_info, <span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"send data to %s:%d fail, errno: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"error info: %s\"</span>, <span class=\"keyword\">__LINE__</span>, domain_name, \\</div><div class=\"line\">\t\t\tport, result, STRERROR(result));</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (bNeedAlloc)</div><div class=\"line\">    &#123;</div><div class=\"line\">        *content = (<span class=\"keyword\">char</span> *)malloc(alloc_size + <span class=\"number\">1</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">        <span class=\"keyword\">if</span> (*content == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            close(sock);</div><div class=\"line\">            result = errno != <span class=\"number\">0</span> ? errno : ENOMEM;</div><div class=\"line\"></div><div class=\"line\">            sprintf(error_info, <span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">                    <span class=\"string\">\"malloc %d bytes fail, errno: %d, \"</span> \\</div><div class=\"line\">                    <span class=\"string\">\"error info: %s\"</span>, <span class=\"keyword\">__LINE__</span>, alloc_size + <span class=\"number\">1</span>, \\</div><div class=\"line\">                    result, STRERROR(result));</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">return</span> result;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">do</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\trecv_bytes = alloc_size - *content_len; <span class=\"comment\">// recv_bytes: left space to recv data</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (recv_bytes &lt;= <span class=\"number\">0</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (bNeedAlloc)</div><div class=\"line\">            &#123;</div><div class=\"line\">                alloc_size *= <span class=\"number\">2</span>;</div><div class=\"line\">                *content = (<span class=\"keyword\">char</span> *)realloc(*content, alloc_size + <span class=\"number\">1</span>);</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">                <span class=\"keyword\">if</span> (*content == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    *content_len = <span class=\"number\">0</span>;</div><div class=\"line\">                    close(sock);</div><div class=\"line\">                    result = errno != <span class=\"number\">0</span> ? errno : ENOMEM;</div><div class=\"line\"></div><div class=\"line\">                    sprintf(error_info, <span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">                            <span class=\"string\">\"realloc %d bytes fail, errno: %d, \"</span> \\</div><div class=\"line\">                            <span class=\"string\">\"error info: %s\"</span>, <span class=\"keyword\">__LINE__</span>, \\</div><div class=\"line\">                            alloc_size + <span class=\"number\">1</span>, \\</div><div class=\"line\">                            result, STRERROR(result));</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">return</span> result;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                recv_bytes = alloc_size - *content_len;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span></div><div class=\"line\">            &#123;</div><div class=\"line\">                    sprintf(error_info, <span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">                            <span class=\"string\">\"buffer size: %d is too small\"</span>, \\</div><div class=\"line\">                            <span class=\"keyword\">__LINE__</span>, alloc_size);</div><div class=\"line\">                    <span class=\"keyword\">return</span> ENOSPC;</div><div class=\"line\">            &#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tresult = tcprecvdata_ex(sock, *content + *content_len, \\</div><div class=\"line\">\t\t\t\trecv_bytes, network_timeout, &amp;recv_bytes);</div><div class=\"line\"></div><div class=\"line\">\t\t*content_len += recv_bytes;</div><div class=\"line\">\t&#125; <span class=\"keyword\">while</span> (result == <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">do</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (result == ENOTCONN) <span class=\"comment\">// means the peer has shutdowned the socket</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            result = <span class=\"number\">0</span>;   <span class=\"comment\">// success value</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> </div><div class=\"line\">\t&#123;</div><div class=\"line\">            sprintf(error_info, <span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">                    <span class=\"string\">\"recv data from %s:%d fail, errno: %d, \"</span> \\</div><div class=\"line\">                    <span class=\"string\">\"error info: %s\"</span>, <span class=\"keyword\">__LINE__</span>, domain_name, \\</div><div class=\"line\">                    port, result, STRERROR(result));</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        *(*content + *content_len) = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">        pContent = strstr(*content, <span class=\"string\">\"\\r\\n\\r\\n\"</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">        <span class=\"keyword\">if</span> (pContent == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            sprintf(error_info, <span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">                    <span class=\"string\">\"response data from %s:%d is invalid\"</span>, \\</div><div class=\"line\">                    <span class=\"keyword\">__LINE__</span>, domain_name, port);</div><div class=\"line\"></div><div class=\"line\">            result = EINVAL;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        pContent += <span class=\"number\">4</span>;   <span class=\"comment\">// pointer to the next line</span></div><div class=\"line\">        pSpace = strchr(*content, <span class=\"string\">' '</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">        <span class=\"keyword\">if</span> (pSpace == <span class=\"keyword\">NULL</span> || pSpace &gt;= pContent)</div><div class=\"line\">        &#123;</div><div class=\"line\">            sprintf(error_info, <span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">                    <span class=\"string\">\"response data from %s:%d is invalid\"</span>, \\</div><div class=\"line\">                    <span class=\"keyword\">__LINE__</span>, domain_name, port);</div><div class=\"line\"></div><div class=\"line\">            result = EINVAL;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        *http_status = atoi(pSpace + <span class=\"number\">1</span>);  <span class=\"comment\">// http response status: such as http/1.1 200 ok</span></div><div class=\"line\">        *content_len -= pContent - *content;  <span class=\"comment\">// minus the length of status line: http/1.1 200 ok</span></div><div class=\"line\">        memcpy(*content, pContent, *content_len);  <span class=\"comment\">// remove the status line</span></div><div class=\"line\">        *(*content + *content_len) = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">        *error_info = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">while</span> (<span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">\tclose(sock);</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (result != <span class=\"number\">0</span> &amp;&amp; bNeedAlloc)  <span class=\"comment\">// result !=0: means error occured</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        free(*content);</div><div class=\"line\">        *content = <span class=\"keyword\">NULL</span>;</div><div class=\"line\">        *content_len = <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// return the string ip addr by ip name(maybe is digital ip addr or domain addr)</span></div><div class=\"line\">in_addr_t getIpaddrByName(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name, <span class=\"keyword\">char</span> *buff, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> bufferSize)</div><div class=\"line\">&#123;</div><div class=\"line\">\tstruct in_addr ip_addr;</div><div class=\"line\">\tstruct hostent *ent;</div><div class=\"line\">\tin_addr_t **addr_list;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((*name &gt;= <span class=\"string\">'0'</span> &amp;&amp; *name &lt;= <span class=\"string\">'9'</span>) &amp;&amp;   <span class=\"comment\">// name is the digital ip address </span></div><div class=\"line\">\t\tinet_pton(AF_INET, name, &amp;ip_addr) == <span class=\"number\">1</span>)  <span class=\"comment\">// success</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (buff != <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tsnprintf(buff, bufferSize, <span class=\"string\">\"%s\"</span>, name);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> ip_addr.s_addr;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tent = gethostbyname(name);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (ent == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> INADDR_NONE;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">    addr_list = (in_addr_t **)ent-&gt;h_addr_list;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (addr_list[<span class=\"number\">0</span>] == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> INADDR_NONE;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tmemset(&amp;ip_addr, <span class=\"number\">0</span>, sizeof(ip_addr));</div><div class=\"line\">\tip_addr.s_addr = *(addr_list[<span class=\"number\">0</span>]);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (buff != <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (inet_ntop(AF_INET, &amp;ip_addr, buff, bufferSize) == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t*buff = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> ip_addr.s_addr;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/** connect to server by non-block mode, auto detect socket block mode</div><div class=\"line\"> *  parameters:</div><div class=\"line\"> *          sock: the socket, can be block mode</div><div class=\"line\"> *          server_ip: ip address of the server</div><div class=\"line\"> *          server_port: port of the server</div><div class=\"line\"> *          timeout: connect timeout in seconds</div><div class=\"line\"> *  return: error no, 0 success, != 0 fail</div><div class=\"line\">*/</span></div><div class=\"line\"><span class=\"comment\">#define connectserverbyip_nb_auto(sock, server_ip, server_port, timeout) \\</span></div><div class=\"line\">\tconnectserverbyip_nb_ex(sock, server_ip, server_port, timeout, <span class=\"keyword\">true</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// connect the server by ip , return 0 stands for connect succeed</span></div><div class=\"line\"><span class=\"keyword\">int</span> connectserverbyip_nb_ex(<span class=\"keyword\">int</span> sock, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *server_ip, \\</div><div class=\"line\">\t\t<span class=\"keyword\">const</span> short server_port, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> timeout, \\</div><div class=\"line\">\t\t<span class=\"keyword\">const</span> <span class=\"keyword\">bool</span> auto_detect)</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> result;</div><div class=\"line\">\t<span class=\"keyword\">int</span> flags;</div><div class=\"line\">\t<span class=\"keyword\">bool</span> needRestore;</div><div class=\"line\">\tsocklen_t len;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#ifdef USE_SELECT</span></div><div class=\"line\">\tfd_set rset;</div><div class=\"line\">\tfd_set wset;</div><div class=\"line\">\tstruct timeval tval;</div><div class=\"line\"><span class=\"comment\">#else</span></div><div class=\"line\">\tstruct pollfd pollfds;</div><div class=\"line\"><span class=\"comment\">#endif</span></div><div class=\"line\"></div><div class=\"line\">\tstruct sockaddr_in addr;</div><div class=\"line\">\tstruct sockaddr_in6 addr6;</div><div class=\"line\">    void *dest;</div><div class=\"line\">    <span class=\"keyword\">int</span> size;</div><div class=\"line\"></div><div class=\"line\">    memset(&amp;addr, <span class=\"number\">0</span>, sizeof(struct sockaddr_in));</div><div class=\"line\">    memset(&amp;addr6, <span class=\"number\">0</span>, sizeof(struct sockaddr_in6));</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> ((result=setsockaddrbyip(server_ip, server_port, &amp;addr, &amp;addr6,</div><div class=\"line\">                    &amp;dest, &amp;size)) != <span class=\"number\">0</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (auto_detect)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tflags = fcntl(sock, F_GETFL, <span class=\"number\">0</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (flags &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> errno != <span class=\"number\">0</span> ? errno : EACCES;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ((flags &amp; O_NONBLOCK) == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (fcntl(sock, F_SETFL, flags | O_NONBLOCK) &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> errno != <span class=\"number\">0</span> ? errno : EACCES;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\tneedRestore = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tneedRestore = <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tneedRestore = <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\tflags = <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">do</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (connect(sock, (<span class=\"keyword\">const</span> struct sockaddr*)dest, size) &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tresult = errno != <span class=\"number\">0</span> ? errno : EINPROGRESS;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (result != EINPROGRESS)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span>  <span class=\"comment\">// connect return 0: success, -1: failure</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tresult = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// after call connect, we call select or poll to get error if error occurs</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#ifdef USE_SELECT</span></div><div class=\"line\">\t\tFD_ZERO(&amp;rset);</div><div class=\"line\">\t\tFD_ZERO(&amp;wset);</div><div class=\"line\">\t\tFD_SET(sock, &amp;rset);</div><div class=\"line\">\t\tFD_SET(sock, &amp;wset);</div><div class=\"line\">\t\ttval.tv_sec = timeout;</div><div class=\"line\">\t\ttval.tv_usec = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tresult = select(sock+<span class=\"number\">1</span>, &amp;rset, &amp;wset, <span class=\"keyword\">NULL</span>, \\</div><div class=\"line\">\t\t\t\ttimeout &gt; <span class=\"number\">0</span> ? &amp;tval : <span class=\"keyword\">NULL</span>);</div><div class=\"line\"><span class=\"comment\">#else</span></div><div class=\"line\">\t\tpollfds.fd = sock;</div><div class=\"line\">\t\tpollfds.events = POLLIN | POLLOUT;</div><div class=\"line\">\t\tresult = poll(&amp;pollfds, <span class=\"number\">1</span>, <span class=\"number\">1000</span> * timeout);</div><div class=\"line\"><span class=\"comment\">#endif</span></div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (result == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tresult = ETIMEDOUT;</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (result &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tresult = errno != <span class=\"number\">0</span> ? errno : EINTR;</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// means return value &gt; 0</span></div><div class=\"line\">\t\tlen = sizeof(result);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// getsockopt: 0: success, -1:failure</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (getsockopt(sock, SOL_SOCKET, SO_ERROR, &amp;result, &amp;len) &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tresult = errno != <span class=\"number\">0</span> ? errno : EACCES; <span class=\"comment\">// means failure</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125; <span class=\"keyword\">while</span> (<span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (needRestore)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tfcntl(sock, F_SETFL, flags);</div><div class=\"line\">\t&#125;</div><div class=\"line\">  </div><div class=\"line\">\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\">get the content of filename, which is saved to *buff, the size of filename is saved to file_size</div><div class=\"line\">*/</span></div><div class=\"line\"><span class=\"keyword\">int</span> getFileContent(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *filename, <span class=\"keyword\">char</span> **buff, int64_t *file_size)</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> fd;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!isFile(filename))</div><div class=\"line\">    &#123;</div><div class=\"line\">\t\t*buff = <span class=\"keyword\">NULL</span>;</div><div class=\"line\">\t\t*file_size = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span></div><div class=\"line\">                <span class=\"string\">\"%s is not a regular file\"</span>, <span class=\"keyword\">__LINE__</span>, filename);</div><div class=\"line\">        <span class=\"keyword\">return</span> EINVAL;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">\tfd = open(filename, O_RDONLY);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (fd &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t*buff = <span class=\"keyword\">NULL</span>;</div><div class=\"line\">\t\t*file_size = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"open file %s fail, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"errno: %d, error info: %s\"</span>, <span class=\"keyword\">__LINE__</span>, \\</div><div class=\"line\">\t\t\tfilename, errno, STRERROR(errno));</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> errno != <span class=\"number\">0</span> ? errno : ENOENT;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((*file_size=lseek(fd, <span class=\"number\">0</span>, SEEK_END)) &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t*buff = <span class=\"keyword\">NULL</span>;</div><div class=\"line\">\t\t*file_size = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tclose(fd);</div><div class=\"line\">\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"lseek file %s fail, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"errno: %d, error info: %s\"</span>, <span class=\"keyword\">__LINE__</span>, \\</div><div class=\"line\">\t\t\tfilename, errno, STRERROR(errno));</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> errno != <span class=\"number\">0</span> ? errno : EIO;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t*buff = (<span class=\"keyword\">char</span> *)malloc(*file_size + <span class=\"number\">1</span>);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (*buff == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t*file_size = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tclose(fd);</div><div class=\"line\"></div><div class=\"line\">\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"malloc %d bytes fail\"</span>, <span class=\"keyword\">__LINE__</span>, \\</div><div class=\"line\">\t\t\t(<span class=\"keyword\">int</span>)(*file_size + <span class=\"number\">1</span>));</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> errno != <span class=\"number\">0</span> ? errno : ENOMEM;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (lseek(fd, <span class=\"number\">0</span>, SEEK_SET) &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t*buff = <span class=\"keyword\">NULL</span>;</div><div class=\"line\">\t\t*file_size = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tclose(fd);</div><div class=\"line\">\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"lseek file %s fail, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"errno: %d, error info: %s\"</span>, <span class=\"keyword\">__LINE__</span>, \\</div><div class=\"line\">\t\t\tfilename, errno, STRERROR(errno));</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> errno != <span class=\"number\">0</span> ? errno : EIO;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (read(fd, *buff, *file_size) != *file_size)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tfree(*buff);</div><div class=\"line\">\t\t*buff = <span class=\"keyword\">NULL</span>;</div><div class=\"line\">\t\t*file_size = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tclose(fd);</div><div class=\"line\">\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"read from file %s fail, \"</span> \\</div><div class=\"line\">\t\t\t<span class=\"string\">\"errno: %d, error info: %s\"</span>, <span class=\"keyword\">__LINE__</span>, \\</div><div class=\"line\">\t\t\tfilename, errno, STRERROR(errno));</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> errno != <span class=\"number\">0</span> ? errno : EIO;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t(*buff)[*file_size] = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">\tclose(fd);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> iniLoadItemsFromBuffer(<span class=\"keyword\">char</span> *content, IniContext *pContext)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">char</span> *pContent;</div><div class=\"line\">    <span class=\"keyword\">char</span> *new_content;</div><div class=\"line\">    <span class=\"keyword\">int</span> content_len;</div><div class=\"line\">    <span class=\"keyword\">int</span> new_content_len;</div><div class=\"line\"></div><div class=\"line\">    new_content = content;</div><div class=\"line\">    new_content_len = strlen(content);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">do</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        pContent = new_content; <span class=\"comment\">// after get rid of first #@if, process left #@if</span></div><div class=\"line\">        content_len = new_content_len;</div><div class=\"line\">\t\t</div><div class=\"line\">        <span class=\"keyword\">if</span> ((new_content=iniProccessIf(pContent, content_len,</div><div class=\"line\">                        pContext, &amp;new_content_len)) == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> ENOMEM;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">\t\t</div><div class=\"line\">    &#125; <span class=\"keyword\">while</span> (new_content != pContent);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">do</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        pContent = new_content;</div><div class=\"line\">        content_len = new_content_len;</div><div class=\"line\">\t\t</div><div class=\"line\">        <span class=\"keyword\">if</span> ((new_content=iniProccessFor(pContent, content_len,</div><div class=\"line\">                        pContext, &amp;new_content_len)) == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> ENOMEM;</div><div class=\"line\">\t\t</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">while</span> (new_content != pContent);  <span class=\"comment\">// loop processing</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> iniDoLoadItemsFromBuffer(new_content, pContext);</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\">function: reslove the content, and get rid of #<span class=\"doctag\">@if</span> and #<span class=\"doctag\">@endif</span>, save to new buffer</div><div class=\"line\">returnd by iniProcessIf, such as:</div><div class=\"line\">content is:</div><div class=\"line\">#<span class=\"doctag\">@if</span> xxx</div><div class=\"line\">...abc</div><div class=\"line\">#<span class=\"doctag\">@endif</span></div><div class=\"line\">...def</div><div class=\"line\"></div><div class=\"line\">new buffer is: </div><div class=\"line\">...abc</div><div class=\"line\">...def</div><div class=\"line\">returned by iniProcessIf</div><div class=\"line\"></div><div class=\"line\">该函数看不懂感觉可以略过不看</div><div class=\"line\">*/</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">char</span> *iniProccessIf(<span class=\"keyword\">char</span> *content, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> content_len,</div><div class=\"line\">        IniContext *pContext, <span class=\"keyword\">int</span> *new_content_len)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">char</span> *pStart;</div><div class=\"line\">    <span class=\"keyword\">char</span> *pEnd;</div><div class=\"line\">    <span class=\"keyword\">char</span> *pCondition;</div><div class=\"line\">    <span class=\"keyword\">char</span> *pElse;</div><div class=\"line\">    <span class=\"keyword\">char</span> *pIfPart;</div><div class=\"line\">    <span class=\"keyword\">char</span> *pElsePart;</div><div class=\"line\">    <span class=\"keyword\">int</span> conditionLen;</div><div class=\"line\">    <span class=\"keyword\">int</span> ifPartLen;</div><div class=\"line\">    <span class=\"keyword\">int</span> elsePartLen;</div><div class=\"line\">    <span class=\"keyword\">int</span> copyLen;</div><div class=\"line\">    <span class=\"keyword\">char</span> *newContent;</div><div class=\"line\">    <span class=\"keyword\">char</span> *pDest;</div><div class=\"line\"></div><div class=\"line\">    *new_content_len = content_len;</div><div class=\"line\">\t</div><div class=\"line\">    pStart = strstr(content, _PREPROCESS_TAG_STR_IF);</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (pStart == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> content;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    pCondition = pStart + _PREPROCESS_TAG_LEN_IF;</div><div class=\"line\">    pIfPart = strchr(pCondition, <span class=\"string\">'\\n'</span>);</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (pIfPart == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> content;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    conditionLen = pIfPart - pCondition;</div><div class=\"line\"></div><div class=\"line\">    pEnd = strstr(pIfPart, _PREPROCESS_TAG_STR_ENDIF);</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (pEnd == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> content;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    pElse = strstr(pIfPart, _PREPROCESS_TAG_STR_ELSE);</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (pElse == <span class=\"keyword\">NULL</span> || pElse &gt; pEnd)</div><div class=\"line\">    &#123;</div><div class=\"line\">        ifPartLen = pEnd - pIfPart;</div><div class=\"line\">        pElsePart = <span class=\"keyword\">NULL</span>;</div><div class=\"line\">        elsePartLen = <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        ifPartLen = pElse - pIfPart;</div><div class=\"line\">        pElsePart = strchr(pElse + _PREPROCESS_TAG_LEN_ELSE, <span class=\"string\">'\\n'</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">        <span class=\"keyword\">if</span> (pElsePart == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> content;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        elsePartLen = pEnd - pElsePart;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    newContent = iniAllocContent(pContext, content_len); <span class=\"comment\">// newContent is the buffer address</span></div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (newContent == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">NULL</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    pDest = newContent;</div><div class=\"line\">    copyLen = pStart - content;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (copyLen &gt; <span class=\"number\">0</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        memcpy(pDest, content, copyLen);</div><div class=\"line\">        pDest += copyLen;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (iniCalcCondition(pCondition, conditionLen))</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (ifPartLen &gt; <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            memcpy(pDest, pIfPart, ifPartLen);</div><div class=\"line\">            pDest += ifPartLen;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (elsePartLen &gt; <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            memcpy(pDest, pElsePart, elsePartLen);</div><div class=\"line\">            pDest += elsePartLen;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    copyLen = (content + content_len) - (pEnd + _PREPROCESS_TAG_LEN_ENDIF);</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (copyLen &gt; <span class=\"number\">0</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        memcpy(pDest, pEnd + _PREPROCESS_TAG_LEN_ENDIF, copyLen);</div><div class=\"line\">        pDest += copyLen;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    *pDest = <span class=\"string\">'\\0'</span>;   </div><div class=\"line\">    *new_content_len = pDest - newContent;</div><div class=\"line\">    <span class=\"keyword\">return</span> newContent;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* process the for block: #<span class=\"doctag\">@for</span>  ... #<span class=\"doctag\">@endfor</span></div><div class=\"line\">get rid of the #<span class=\"doctag\">@endfor</span>, #<span class=\"doctag\">@for</span>, and expand the for loop which replace &#123;$i&#125; with the real value</div><div class=\"line\">and saved to new buffer returned by iniProcessFor</div><div class=\"line\">该函数与上一个函数类似</div><div class=\"line\"></div><div class=\"line\">*/</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">char</span> *iniProccessFor(<span class=\"keyword\">char</span> *content, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> content_len,</div><div class=\"line\">        IniContext *pContext, <span class=\"keyword\">int</span> *new_content_len)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">char</span> *pStart;</div><div class=\"line\">    <span class=\"keyword\">char</span> *pEnd;</div><div class=\"line\">    <span class=\"keyword\">char</span> *pForRange;</div><div class=\"line\">    <span class=\"keyword\">char</span> *pForBlock;</div><div class=\"line\">    <span class=\"keyword\">char</span> *id;</div><div class=\"line\">    <span class=\"keyword\">char</span> tag[<span class=\"number\">80</span>];</div><div class=\"line\">    <span class=\"keyword\">char</span> value[<span class=\"number\">16</span>];</div><div class=\"line\">    <span class=\"keyword\">int</span> idLen;</div><div class=\"line\">    <span class=\"keyword\">int</span> rangeLen;</div><div class=\"line\">    <span class=\"keyword\">int</span> forBlockLen;</div><div class=\"line\">    <span class=\"keyword\">int</span> start;</div><div class=\"line\">    <span class=\"keyword\">int</span> end;</div><div class=\"line\">    <span class=\"keyword\">int</span> step;</div><div class=\"line\">    <span class=\"keyword\">int</span> count;</div><div class=\"line\">    <span class=\"keyword\">int</span> i;</div><div class=\"line\">    <span class=\"keyword\">int</span> copyLen;</div><div class=\"line\">    <span class=\"keyword\">int</span> tagLen;</div><div class=\"line\">    <span class=\"keyword\">int</span> valueLen;</div><div class=\"line\">    <span class=\"keyword\">char</span> *newContent;</div><div class=\"line\">    <span class=\"keyword\">char</span> *pDest;</div><div class=\"line\"></div><div class=\"line\">    *new_content_len = content_len;</div><div class=\"line\">    pStart = strstr(content, _PREPROCESS_TAG_STR_FOR);</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (pStart == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> content;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    pForRange = pStart + _PREPROCESS_TAG_LEN_FOR; <span class=\"comment\">// for condition begin</span></div><div class=\"line\">    pForBlock = strchr(pForRange, <span class=\"string\">'\\n'</span>);  <span class=\"comment\">// for block begin</span></div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (pForBlock == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> content;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    rangeLen = pForBlock - pForRange;</div><div class=\"line\"></div><div class=\"line\">    pEnd = strstr(pForBlock, _PREPROCESS_TAG_STR_ENDFOR);</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (pEnd == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> content;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    forBlockLen = pEnd - pForBlock;  <span class=\"comment\">// for block len</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (iniParseForRange(pForRange, rangeLen, &amp;id, &amp;idLen,</div><div class=\"line\">                &amp;start, &amp;end, &amp;step) != <span class=\"number\">0</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">NULL</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (step == <span class=\"number\">0</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">\t\tlogWarning(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span></div><div class=\"line\">                <span class=\"string\">\"invalid step: %d for range: %.*s\"</span>, <span class=\"keyword\">__LINE__</span>,</div><div class=\"line\">                step, rangeLen, pForRange);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">NULL</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    count = (end - start) / step;  <span class=\"comment\">// how many steps</span></div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (count &lt; <span class=\"number\">0</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">\t\tlogWarning(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span></div><div class=\"line\">                <span class=\"string\">\"invalid step: %d for range: %.*s\"</span>, <span class=\"keyword\">__LINE__</span>,</div><div class=\"line\">                step, rangeLen, pForRange);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">NULL</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    newContent = iniAllocContent(pContext, content_len + (forBlockLen + <span class=\"number\">16</span>) * count);</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (newContent == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">NULL</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    pDest = newContent;  <span class=\"comment\">// newContent is the buffer addr to stored for block content</span></div><div class=\"line\">    copyLen = pStart - content;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (copyLen &gt; <span class=\"number\">0</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        memcpy(pDest, content, copyLen);</div><div class=\"line\">        pDest += copyLen;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// id=\"i\", idLen=1, tag will be \"&#123;$i&#125;\", tagLen will be 4 = strlen(\"&#123;$i&#125;\")</span></div><div class=\"line\">    tagLen = sprintf(tag, <span class=\"string\">\"&#123;$%.*s&#125;\"</span>, idLen, id);</div><div class=\"line\">\t<span class=\"comment\">// tagLen is the variable length</span></div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">for</span> (i=start; i&lt;=end; i+=step)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">char</span> *p;</div><div class=\"line\">        <span class=\"keyword\">char</span> *pRemain;</div><div class=\"line\">        <span class=\"keyword\">int</span> remainLen;</div><div class=\"line\"></div><div class=\"line\">        valueLen = sprintf(value, <span class=\"string\">\"%d\"</span>, i);</div><div class=\"line\"></div><div class=\"line\">        pRemain = pForBlock;</div><div class=\"line\">        remainLen = forBlockLen;</div><div class=\"line\">\t\t</div><div class=\"line\">        <span class=\"keyword\">while</span> (remainLen &gt;= tagLen)</div><div class=\"line\">        &#123;</div><div class=\"line\">            p = (<span class=\"keyword\">char</span> *)memmem(pRemain, remainLen, tag, tagLen);</div><div class=\"line\">\t\t\t</div><div class=\"line\">            <span class=\"keyword\">if</span> (p == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">            &#123;</div><div class=\"line\">                memcpy(pDest, pRemain, remainLen);</div><div class=\"line\">                pDest += remainLen;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            copyLen = p - pRemain;</div><div class=\"line\">\t\t\t</div><div class=\"line\">            <span class=\"keyword\">if</span> (copyLen &gt; <span class=\"number\">0</span>)</div><div class=\"line\">            &#123;</div><div class=\"line\">                memcpy(pDest, pRemain, copyLen);</div><div class=\"line\">                pDest += copyLen;</div><div class=\"line\">            &#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">            memcpy(pDest, value, valueLen);</div><div class=\"line\">            pDest += valueLen;</div><div class=\"line\"></div><div class=\"line\">            pRemain = p + tagLen;</div><div class=\"line\">            remainLen -= copyLen + tagLen;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    copyLen = (content + content_len) - (pEnd + _PREPROCESS_TAG_LEN_ENDFOR);</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (copyLen &gt; <span class=\"number\">0</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        memcpy(pDest, pEnd + _PREPROCESS_TAG_LEN_ENDFOR, copyLen);</div><div class=\"line\">        pDest += copyLen;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    *pDest = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">    *new_content_len = pDest - newContent;</div><div class=\"line\">    <span class=\"keyword\">return</span> newContent;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//alloc space for the length of content_len, return the buffer addr</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">char</span> *iniAllocContent(IniContext *pContext, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> content_len)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">char</span> *buff;</div><div class=\"line\">    DynamicContents *pDynamicContents;</div><div class=\"line\">    pDynamicContents = iniAllocDynamicContent(pContext);</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (pDynamicContents == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        logError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span></div><div class=\"line\">                <span class=\"string\">\"malloc dynamic contents fail\"</span>, <span class=\"keyword\">__LINE__</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">NULL</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// default: pDynamicContents-&gt;count = 0, pDynamicContents-&gt;alloc_count=0</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (pDynamicContents-&gt;count &gt;= pDynamicContents-&gt;alloc_count)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> alloc_count;</div><div class=\"line\">        <span class=\"keyword\">int</span> bytes;</div><div class=\"line\">        <span class=\"keyword\">char</span> **contents;</div><div class=\"line\">\t\t</div><div class=\"line\">        <span class=\"keyword\">if</span> (pDynamicContents-&gt;alloc_count == <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            alloc_count = <span class=\"number\">8</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            alloc_count = pDynamicContents-&gt;alloc_count * <span class=\"number\">2</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">\t\t</div><div class=\"line\">        bytes = sizeof(<span class=\"keyword\">char</span> *) * alloc_count;</div><div class=\"line\">        contents = (<span class=\"keyword\">char</span> **)malloc(bytes);</div><div class=\"line\">\t\t</div><div class=\"line\">        <span class=\"keyword\">if</span> (contents == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            logError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span></div><div class=\"line\">                    <span class=\"string\">\"malloc %d bytes fail\"</span>, <span class=\"keyword\">__LINE__</span>, bytes);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">NULL</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">\t\t</div><div class=\"line\">        memset(contents, <span class=\"number\">0</span>, bytes);</div><div class=\"line\">\t\t</div><div class=\"line\">        <span class=\"keyword\">if</span> (pDynamicContents-&gt;count &gt; <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            memcpy(contents, pDynamicContents-&gt;contents,</div><div class=\"line\">                    sizeof(<span class=\"keyword\">char</span> *) * pDynamicContents-&gt;count);</div><div class=\"line\">            free(pDynamicContents-&gt;contents);</div><div class=\"line\">        &#125;</div><div class=\"line\">\t\t</div><div class=\"line\">        pDynamicContents-&gt;contents = contents;</div><div class=\"line\">        pDynamicContents-&gt;alloc_count = alloc_count;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    buff = malloc(content_len);</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (buff == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        logError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span></div><div class=\"line\">                <span class=\"string\">\"malloc %d bytes fail\"</span>, <span class=\"keyword\">__LINE__</span>, content_len);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">NULL</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    pDynamicContents-&gt;contents[pDynamicContents-&gt;count++] = buff;</div><div class=\"line\">    <span class=\"keyword\">return</span> buff;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// find pContext in g_dynamic_contents, if find: return, or add pContext to g_dynamic_contents</span></div><div class=\"line\"><span class=\"keyword\">static</span> DynamicContents *iniAllocDynamicContent(IniContext *pContext)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> i;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (g_dynamic_contents[g_dynamic_content_index].context == pContext)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &amp;g_dynamic_contents[g_dynamic_content_index].dynamicContents;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (g_dynamic_content_count &gt; <span class=\"number\">0</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>; i&lt;_MAX_DYNAMIC_CONTENTS; i++)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (g_dynamic_contents[i].context == pContext)</div><div class=\"line\">            &#123;</div><div class=\"line\">                g_dynamic_content_index = i;</div><div class=\"line\">                <span class=\"keyword\">return</span> &amp;g_dynamic_contents[g_dynamic_content_index].dynamicContents;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (g_dynamic_content_count == _MAX_DYNAMIC_CONTENTS)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">NULL</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>; i&lt;_MAX_DYNAMIC_CONTENTS; i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!g_dynamic_contents[i].used)</div><div class=\"line\">        &#123;</div><div class=\"line\">            g_dynamic_contents[i].used = <span class=\"keyword\">true</span>;</div><div class=\"line\">            g_dynamic_contents[i].context = pContext;</div><div class=\"line\">            g_dynamic_content_index = i;</div><div class=\"line\">            g_dynamic_content_count++;</div><div class=\"line\">            <span class=\"keyword\">return</span> &amp;g_dynamic_contents[g_dynamic_content_index].dynamicContents;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">NULL</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\">function: resolve the format:</div><div class=\"line\">%&#123;LOCAL_IP&#125; in [10.0.11.89,10.0.11.99]</div><div class=\"line\">%&#123;LOCAL_HOST&#125; in [10.0.11.89,10.0.11.99]</div><div class=\"line\">and compare g_local_host_ip_addrs array, check every elem in g_local_host_ip_addrs is</div><div class=\"line\">whether exists in [10.0.11.89,10.0.11.99] or not, exists return true or return false</div><div class=\"line\">*/</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> iniCalcCondition(<span class=\"keyword\">char</span> *condition, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> condition_len)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">/*</div><div class=\"line\">     * current only support %&#123;VARIABLE&#125; in [x,y,..]</div><div class=\"line\">     * support variables are: LOCAL_IP and LOCAL_HOST</div><div class=\"line\">     * such as: %&#123;LOCAL_IP&#125; in [10.0.11.89,10.0.11.99]</div><div class=\"line\">     **/</span></div><div class=\"line\"><span class=\"comment\">#define _PREPROCESS_VARIABLE_TYPE_LOCAL_IP   1</span></div><div class=\"line\"><span class=\"comment\">#define _PREPROCESS_VARIABLE_TYPE_LOCAL_HOST 2</span></div><div class=\"line\"><span class=\"comment\">#define _PREPROCESS_MAX_LIST_VALUE_COUNT    32</span></div><div class=\"line\">    <span class=\"keyword\">char</span> *p;</div><div class=\"line\">    <span class=\"keyword\">char</span> *pEnd;</div><div class=\"line\">    <span class=\"keyword\">char</span> *pSquareEnd;</div><div class=\"line\">    <span class=\"keyword\">char</span> *values[_PREPROCESS_MAX_LIST_VALUE_COUNT];</div><div class=\"line\">    <span class=\"keyword\">int</span> varType;</div><div class=\"line\">    <span class=\"keyword\">int</span> count;</div><div class=\"line\">    <span class=\"keyword\">int</span> i;</div><div class=\"line\"></div><div class=\"line\">    pEnd = condition + condition_len;</div><div class=\"line\">    p = pEnd - <span class=\"number\">1</span>;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">while</span> (p &gt; condition &amp;&amp; (*p == <span class=\"string\">' '</span> || *p == <span class=\"string\">'\\t'</span>))</div><div class=\"line\">    &#123;</div><div class=\"line\">        p--;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (*p != <span class=\"string\">']'</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">\t\tlogWarning(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span></div><div class=\"line\">                <span class=\"string\">\"expect \\\"]\\\", condition: %.*s\"</span>, <span class=\"keyword\">__LINE__</span>,</div><div class=\"line\">                condition_len, condition);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    pSquareEnd = p;</div><div class=\"line\"></div><div class=\"line\">    p = condition;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">while</span> (p &lt; pEnd &amp;&amp; (*p == <span class=\"string\">' '</span> || *p == <span class=\"string\">'\\t'</span>))</div><div class=\"line\">    &#123;</div><div class=\"line\">        p++;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (pEnd - p &lt; <span class=\"number\">12</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">\t\tlogWarning(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span></div><div class=\"line\">                <span class=\"string\">\"unkown condition: %.*s\"</span>, <span class=\"keyword\">__LINE__</span>,</div><div class=\"line\">                condition_len, condition);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (memcmp(p, _PREPROCESS_VARIABLE_STR_LOCAL_IP,</div><div class=\"line\">                _PREPROCESS_VARIABLE_LEN_LOCAL_IP) == <span class=\"number\">0</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        varType = _PREPROCESS_VARIABLE_TYPE_LOCAL_IP;</div><div class=\"line\">        p += _PREPROCESS_VARIABLE_LEN_LOCAL_IP;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (memcmp(p, _PREPROCESS_VARIABLE_STR_LOCAL_HOST,</div><div class=\"line\">                _PREPROCESS_VARIABLE_LEN_LOCAL_HOST) == <span class=\"number\">0</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        varType = _PREPROCESS_VARIABLE_TYPE_LOCAL_HOST;</div><div class=\"line\">        p += _PREPROCESS_VARIABLE_LEN_LOCAL_HOST;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">    &#123;</div><div class=\"line\">\t\tlogWarning(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span></div><div class=\"line\">                <span class=\"string\">\"unkown condition: %.*s\"</span>, <span class=\"keyword\">__LINE__</span>,</div><div class=\"line\">                condition_len, condition);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (p &lt; pEnd &amp;&amp; (*p == <span class=\"string\">' '</span> || *p == <span class=\"string\">'\\t'</span>))</div><div class=\"line\">    &#123;</div><div class=\"line\">        p++;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (pEnd - p &lt; <span class=\"number\">4</span> || memcmp(p, <span class=\"string\">\"in\"</span>, <span class=\"number\">2</span>) != <span class=\"number\">0</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">\t\tlogWarning(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span></div><div class=\"line\">                <span class=\"string\">\"expect \\\"in\\\", condition: %.*s\"</span>, <span class=\"keyword\">__LINE__</span>,</div><div class=\"line\">                condition_len, condition);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    p += <span class=\"number\">2</span>;  <span class=\"comment\">//skip in</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (p &lt; pEnd &amp;&amp; (*p == <span class=\"string\">' '</span> || *p == <span class=\"string\">'\\t'</span>))</div><div class=\"line\">    &#123;</div><div class=\"line\">        p++;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (*p != <span class=\"string\">'['</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">\t\tlogWarning(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span></div><div class=\"line\">                <span class=\"string\">\"expect \\\"[\\\", condition: %.*s\"</span>, <span class=\"keyword\">__LINE__</span>,</div><div class=\"line\">                condition_len, condition);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    *pSquareEnd = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">    count = splitEx(p + <span class=\"number\">1</span>, <span class=\"string\">','</span>, values, _PREPROCESS_MAX_LIST_VALUE_COUNT);</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>; i&lt;count; i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        values[i] = trim(values[i]);</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (varType == _PREPROCESS_VARIABLE_TYPE_LOCAL_HOST)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">char</span> host[<span class=\"number\">128</span>];</div><div class=\"line\">\t\t</div><div class=\"line\">        <span class=\"keyword\">if</span> (gethostname(host, sizeof(host)) != <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            logWarning(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span></div><div class=\"line\">                    <span class=\"string\">\"call gethostname fail, \"</span></div><div class=\"line\">                    <span class=\"string\">\"errno: %d, error info: %s\"</span>, <span class=\"keyword\">__LINE__</span>,</div><div class=\"line\">                    errno, STRERROR(errno));</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">\t\t</div><div class=\"line\">        <span class=\"keyword\">return</span> iniMatchValue(host, values, count);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *local_ip;</div><div class=\"line\">        local_ip = get_first_local_ip();</div><div class=\"line\">\t\t</div><div class=\"line\">        <span class=\"keyword\">while</span> (local_ip != <span class=\"keyword\">NULL</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (iniMatchValue(local_ip, values, count))</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">            local_ip = get_next_local_ip(local_ip);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// find target in array: values, if find return true, else return false</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> iniMatchValue(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *target, <span class=\"keyword\">char</span> **values, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> count)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> i;</div><div class=\"line\">    <span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>; i&lt;count; i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (strcmp(target, values[i]) == <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// get a integer from str ended by pEnd, nlen is the length of integer</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">char</span> *iniGetInteger(<span class=\"keyword\">char</span> *str, <span class=\"keyword\">char</span> *pEnd, <span class=\"keyword\">int</span> *nlen)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">char</span> *p;</div><div class=\"line\">    <span class=\"keyword\">char</span> *pNumber;</div><div class=\"line\"></div><div class=\"line\">    p = str;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">while</span> (p &lt; pEnd &amp;&amp; (*p == <span class=\"string\">' '</span> || *p == <span class=\"string\">'\\t'</span>))</div><div class=\"line\">    &#123;</div><div class=\"line\">        p++;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    pNumber = p;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">while</span> (p &lt; pEnd &amp;&amp; (*p &gt;= <span class=\"string\">'0'</span> &amp;&amp; *p &lt;= <span class=\"string\">'9'</span>))</div><div class=\"line\">    &#123;</div><div class=\"line\">        p++;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    *nlen = p - pNumber;</div><div class=\"line\">    <span class=\"keyword\">return</span> pNumber;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// parse the format: #@for i from 0 to 15 step 1</span></div><div class=\"line\"><span class=\"comment\">// *id pointer to i, idLen=1, start=0, end=15, step=1</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> iniParseForRange(<span class=\"keyword\">char</span> *range, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> range_len,</div><div class=\"line\">        <span class=\"keyword\">char</span> **id, <span class=\"keyword\">int</span> *idLen, <span class=\"keyword\">int</span> *start, <span class=\"keyword\">int</span> *end, <span class=\"keyword\">int</span> *step)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     *</div><div class=\"line\">     * #<span class=\"doctag\">@for</span> i from 0 to 15 step 1</div><div class=\"line\">     */</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">char</span> *p;</div><div class=\"line\">    <span class=\"keyword\">char</span> *pEnd;</div><div class=\"line\">    <span class=\"keyword\">char</span> *pNumber;</div><div class=\"line\">    <span class=\"keyword\">int</span> nlen;</div><div class=\"line\"></div><div class=\"line\">    pEnd = range + range_len;</div><div class=\"line\">    p = range;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">while</span> (p &lt; pEnd &amp;&amp; (*p == <span class=\"string\">' '</span> || *p == <span class=\"string\">'\\t'</span>))</div><div class=\"line\">    &#123;</div><div class=\"line\">        p++;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (pEnd - p &lt; <span class=\"number\">10</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">\t\tlogWarning(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span></div><div class=\"line\">                <span class=\"string\">\"unkown for range: %.*s\"</span>, <span class=\"keyword\">__LINE__</span>,</div><div class=\"line\">                range_len, range);</div><div class=\"line\">        <span class=\"keyword\">return</span> EINVAL;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    *id = p;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">while</span> (p &lt; pEnd &amp;&amp; !(*p == <span class=\"string\">' '</span> || *p == <span class=\"string\">'\\t'</span>))</div><div class=\"line\">    &#123;</div><div class=\"line\">        p++;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    *idLen = p - *id;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (*idLen == <span class=\"number\">0</span> || *idLen &gt; <span class=\"number\">64</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">\t\tlogWarning(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span></div><div class=\"line\">                <span class=\"string\">\"invalid for range: %.*s\"</span>, <span class=\"keyword\">__LINE__</span>,</div><div class=\"line\">                range_len, range);</div><div class=\"line\">        <span class=\"keyword\">return</span> EINVAL;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (pEnd - p &lt; <span class=\"number\">8</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">\t\tlogWarning(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span></div><div class=\"line\">                <span class=\"string\">\"invalid for range: %.*s\"</span>, <span class=\"keyword\">__LINE__</span>,</div><div class=\"line\">                range_len, range);</div><div class=\"line\">        <span class=\"keyword\">return</span> EINVAL;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    p++;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">while</span> (p &lt; pEnd &amp;&amp; (*p == <span class=\"string\">' '</span> || *p == <span class=\"string\">'\\t'</span>))</div><div class=\"line\">    &#123;</div><div class=\"line\">        p++;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (!(memcmp(p, _PREPROCESS_TAG_STR_FOR_FROM,</div><div class=\"line\">                    _PREPROCESS_TAG_LEN_FOR_FROM) == <span class=\"number\">0</span> &amp;&amp;</div><div class=\"line\">                (*(p+_PREPROCESS_TAG_LEN_FOR_FROM) == <span class=\"string\">' '</span> ||</div><div class=\"line\">                 *(p+_PREPROCESS_TAG_LEN_FOR_FROM) == <span class=\"string\">'\\t'</span>)))</div><div class=\"line\">    &#123;</div><div class=\"line\">\t\tlogWarning(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span></div><div class=\"line\">                <span class=\"string\">\"invalid for range: %.*s\"</span>, <span class=\"keyword\">__LINE__</span>,</div><div class=\"line\">                range_len, range);</div><div class=\"line\">        <span class=\"keyword\">return</span> EINVAL;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    p += _PREPROCESS_TAG_LEN_FOR_FROM + <span class=\"number\">1</span>;</div><div class=\"line\">    pNumber = iniGetInteger(p, pEnd, &amp;nlen);</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (nlen == <span class=\"number\">0</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">\t\tlogWarning(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span></div><div class=\"line\">                <span class=\"string\">\"invalid for range: %.*s\"</span>, <span class=\"keyword\">__LINE__</span>,</div><div class=\"line\">                range_len, range);</div><div class=\"line\">        <span class=\"keyword\">return</span> EINVAL;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    *start = atoi(pNumber);  <span class=\"comment\">//atoi meets non-numbers will stop transfer</span></div><div class=\"line\">    p = pNumber + nlen;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (pEnd - p &lt; <span class=\"number\">4</span> || !(*p == <span class=\"string\">' '</span> || *p == <span class=\"string\">'\\t'</span>))</div><div class=\"line\">    &#123;</div><div class=\"line\">\t\tlogWarning(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span></div><div class=\"line\">                <span class=\"string\">\"invalid for range: %.*s\"</span>, <span class=\"keyword\">__LINE__</span>,</div><div class=\"line\">                range_len, range);</div><div class=\"line\">        <span class=\"keyword\">return</span> EINVAL;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    p++;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">while</span> (p &lt; pEnd &amp;&amp; (*p == <span class=\"string\">' '</span> || *p == <span class=\"string\">'\\t'</span>))</div><div class=\"line\">    &#123;</div><div class=\"line\">        p++;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (!(memcmp(p, _PREPROCESS_TAG_STR_FOR_TO,</div><div class=\"line\">                    _PREPROCESS_TAG_LEN_FOR_TO) == <span class=\"number\">0</span> &amp;&amp;</div><div class=\"line\">                (*(p+_PREPROCESS_TAG_LEN_FOR_TO) == <span class=\"string\">' '</span> ||</div><div class=\"line\">                 *(p+_PREPROCESS_TAG_LEN_FOR_TO) == <span class=\"string\">'\\t'</span>)))</div><div class=\"line\">    &#123;</div><div class=\"line\">\t\tlogWarning(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span></div><div class=\"line\">                <span class=\"string\">\"unkown for range: %.*s\"</span>, <span class=\"keyword\">__LINE__</span>,</div><div class=\"line\">                range_len, range);</div><div class=\"line\">        <span class=\"keyword\">return</span> EINVAL;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    p += _PREPROCESS_TAG_LEN_FOR_TO + <span class=\"number\">1</span>;</div><div class=\"line\">    pNumber = iniGetInteger(p, pEnd, &amp;nlen);</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (nlen == <span class=\"number\">0</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">\t\tlogWarning(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span></div><div class=\"line\">                <span class=\"string\">\"invalid for range: %.*s\"</span>, <span class=\"keyword\">__LINE__</span>,</div><div class=\"line\">                range_len, range);</div><div class=\"line\">        <span class=\"keyword\">return</span> EINVAL;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    *end = atoi(pNumber);</div><div class=\"line\">    p = pNumber + nlen;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (p == pEnd) <span class=\"comment\">// default step is set to 1</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        *step = <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!(*p == <span class=\"string\">' '</span> || *p == <span class=\"string\">'\\t'</span>))</div><div class=\"line\">    &#123;</div><div class=\"line\">\t\tlogWarning(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span></div><div class=\"line\">                <span class=\"string\">\"invalid for range: %.*s\"</span>, <span class=\"keyword\">__LINE__</span>,</div><div class=\"line\">                range_len, range);</div><div class=\"line\">        <span class=\"keyword\">return</span> EINVAL;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">while</span> (p &lt; pEnd &amp;&amp; (*p == <span class=\"string\">' '</span> || *p == <span class=\"string\">'\\t'</span>))</div><div class=\"line\">    &#123;</div><div class=\"line\">        p++;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (!(memcmp(p, _PREPROCESS_TAG_STR_FOR_STEP,</div><div class=\"line\">                    _PREPROCESS_TAG_LEN_FOR_STEP) == <span class=\"number\">0</span> &amp;&amp;</div><div class=\"line\">                (*(p+_PREPROCESS_TAG_LEN_FOR_STEP) == <span class=\"string\">' '</span> ||</div><div class=\"line\">                 *(p+_PREPROCESS_TAG_LEN_FOR_STEP) == <span class=\"string\">'\\t'</span>)))</div><div class=\"line\">    &#123;</div><div class=\"line\">\t\tlogWarning(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span></div><div class=\"line\">                <span class=\"string\">\"unkown for range: %.*s\"</span>, <span class=\"keyword\">__LINE__</span>,</div><div class=\"line\">                range_len, range);</div><div class=\"line\">        <span class=\"keyword\">return</span> EINVAL;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    p += _PREPROCESS_TAG_LEN_FOR_STEP + <span class=\"number\">1</span>;</div><div class=\"line\">    pNumber = iniGetInteger(p, pEnd, &amp;nlen);</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (nlen == <span class=\"number\">0</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">\t\tlogWarning(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span></div><div class=\"line\">                <span class=\"string\">\"invalid for range: %.*s\"</span>, <span class=\"keyword\">__LINE__</span>,</div><div class=\"line\">                range_len, range);</div><div class=\"line\">        <span class=\"keyword\">return</span> EINVAL;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    *step = atoi(pNumber);</div><div class=\"line\">    p = pNumber + nlen;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">while</span> (p &lt; pEnd &amp;&amp; (*p == <span class=\"string\">' '</span> || *p == <span class=\"string\">'\\t'</span>))</div><div class=\"line\">    &#123;</div><div class=\"line\">        p++;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (p != pEnd)</div><div class=\"line\">    &#123;</div><div class=\"line\">\t\tlogWarning(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span></div><div class=\"line\">                <span class=\"string\">\"invalid for range: %.*s\"</span>, <span class=\"keyword\">__LINE__</span>,</div><div class=\"line\">                range_len, range);</div><div class=\"line\">        <span class=\"keyword\">return</span> EINVAL;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// content is the conf file content which has been preProcessed</span></div><div class=\"line\"><span class=\"comment\">// return 0: success</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> iniDoLoadItemsFromBuffer(<span class=\"keyword\">char</span> *content, IniContext *pContext)</div><div class=\"line\">&#123;</div><div class=\"line\">    AnnotationMap *pAnnoMap;</div><div class=\"line\">\tIniSection *pSection;</div><div class=\"line\">\tIniItem *pItem;</div><div class=\"line\">\t<span class=\"keyword\">char</span> *pLine;</div><div class=\"line\">\t<span class=\"keyword\">char</span> *pLastEnd;</div><div class=\"line\">\t<span class=\"keyword\">char</span> *pEqualChar;</div><div class=\"line\">    <span class=\"keyword\">char</span> *pItemName;</div><div class=\"line\">    <span class=\"keyword\">char</span> *pAnnoItemLine;</div><div class=\"line\">\t<span class=\"keyword\">char</span> *pIncludeFilename;</div><div class=\"line\">    <span class=\"keyword\">char</span> *pItemValues[<span class=\"number\">100</span>];</div><div class=\"line\">    <span class=\"keyword\">char</span> pFuncName[FAST_INI_ITEM_NAME_LEN + <span class=\"number\">1</span>];</div><div class=\"line\">\t<span class=\"keyword\">char</span> full_filename[MAX_PATH_SIZE];</div><div class=\"line\">    <span class=\"keyword\">int</span> i;</div><div class=\"line\">\t<span class=\"keyword\">int</span> nLineLen;</div><div class=\"line\">\t<span class=\"keyword\">int</span> nNameLen;</div><div class=\"line\">    <span class=\"keyword\">int</span> nItemCnt;</div><div class=\"line\">\t<span class=\"keyword\">int</span> nValueLen;</div><div class=\"line\">\t<span class=\"keyword\">int</span> result;</div><div class=\"line\">    <span class=\"keyword\">int</span> isAnnotation;</div><div class=\"line\"></div><div class=\"line\">\tresult = <span class=\"number\">0</span>;</div><div class=\"line\">    pAnnoItemLine = <span class=\"keyword\">NULL</span>;</div><div class=\"line\">    isAnnotation = <span class=\"number\">0</span>;</div><div class=\"line\">    *pFuncName = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">\tpLastEnd = content - <span class=\"number\">1</span>;</div><div class=\"line\">\tpSection = pContext-&gt;current_section;</div><div class=\"line\">    pItem = pSection-&gt;items + pSection-&gt;count;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">while</span> (pLastEnd != <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tpLine = pLastEnd + <span class=\"number\">1</span>;  <span class=\"comment\">// pointer to the begin of a line</span></div><div class=\"line\">\t\tpLastEnd = strchr(pLine, <span class=\"string\">'\\n'</span>); <span class=\"comment\">// pointer to the end of a line</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (pLastEnd != <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t*pLastEnd = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (isAnnotation &amp;&amp; pLine != pAnnoItemLine)</div><div class=\"line\">        &#123;</div><div class=\"line\">            logWarning(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">                <span class=\"string\">\"the @function annotation line \"</span> \\</div><div class=\"line\">                <span class=\"string\">\"must follow by key=value line!\"</span>, <span class=\"keyword\">__LINE__</span>);</div><div class=\"line\">            isAnnotation = <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (*pLine == <span class=\"string\">'#'</span> &amp;&amp; \\</div><div class=\"line\">\t\t\tstrncasecmp(pLine+<span class=\"number\">1</span>, <span class=\"string\">\"include\"</span>, <span class=\"number\">7</span>) == <span class=\"number\">0</span> &amp;&amp; \\</div><div class=\"line\">\t\t\t(*(pLine+<span class=\"number\">8</span>) == <span class=\"string\">' '</span> || *(pLine+<span class=\"number\">8</span>) == <span class=\"string\">'\\t'</span>))</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tpIncludeFilename = strdup(pLine + <span class=\"number\">9</span>);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (pIncludeFilename == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">\"strdup %d bytes fail\"</span>, <span class=\"keyword\">__LINE__</span>, \\</div><div class=\"line\">\t\t\t\t\t(<span class=\"keyword\">int</span>)strlen(pLine + <span class=\"number\">9</span>) + <span class=\"number\">1</span>);</div><div class=\"line\">\t\t\t\tresult = errno != <span class=\"number\">0</span> ? errno : ENOMEM;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\ttrim(pIncludeFilename);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (strncasecmp(pIncludeFilename, <span class=\"string\">\"http://\"</span>, <span class=\"number\">7</span>) == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tsnprintf(full_filename, sizeof(full_filename),\\</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">\"%s\"</span>, pIncludeFilename);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (*pIncludeFilename == <span class=\"string\">'/'</span>)</div><div class=\"line\">\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\tsnprintf(full_filename, sizeof(full_filename), \\</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">\"%s\"</span>, pIncludeFilename);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\tsnprintf(full_filename, sizeof(full_filename), \\</div><div class=\"line\">\t\t\t\t\t<span class=\"string\">\"%s/%s\"</span>, pContext-&gt;config_path, \\</div><div class=\"line\">\t\t\t\t\t pIncludeFilename);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!fileExists(full_filename))</div><div class=\"line\">\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">\t\t\t\t\t\t<span class=\"string\">\"include file \\\"%s\\\" not exists, \"</span> \\</div><div class=\"line\">\t\t\t\t\t\t<span class=\"string\">\"line: \\\"%s\\\"\"</span>, <span class=\"keyword\">__LINE__</span>, \\</div><div class=\"line\">\t\t\t\t\t\tpIncludeFilename, pLine);</div><div class=\"line\">\t\t\t\t\tfree(pIncludeFilename);</div><div class=\"line\">\t\t\t\t\tresult = ENOENT;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">            pContext-&gt;current_section = &amp;pContext-&gt;global;</div><div class=\"line\">\t\t\tresult = iniDoLoadFromFile(full_filename, pContext); <span class=\"comment\">// call again</span></div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (result != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tfree(pIncludeFilename);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">            pContext-&gt;current_section = &amp;pContext-&gt;global; <span class=\"comment\">// 将当前处理的section指向pContext-&gt;global</span></div><div class=\"line\">\t\t\tpSection = pContext-&gt;current_section;</div><div class=\"line\">            pItem = pSection-&gt;items + pSection-&gt;count;  <span class=\"comment\">//must re-asign</span></div><div class=\"line\"></div><div class=\"line\">\t\t\tfree(pIncludeFilename);</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((*pLine == <span class=\"string\">'#'</span> &amp;&amp; \\</div><div class=\"line\">            strncasecmp(pLine+<span class=\"number\">1</span>, <span class=\"string\">\"@function\"</span>, <span class=\"number\">9</span>) == <span class=\"number\">0</span> &amp;&amp; \\</div><div class=\"line\">            (*(pLine+<span class=\"number\">10</span>) == <span class=\"string\">' '</span> || *(pLine+<span class=\"number\">10</span>) == <span class=\"string\">'\\t'</span>)))  <span class=\"comment\">// 是否是@function annotation</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!pContext-&gt;ignore_annotation) </div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">                nNameLen = strlen(pLine + <span class=\"number\">11</span>);</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">                <span class=\"keyword\">if</span> (nNameLen &gt; FAST_INI_ITEM_NAME_LEN)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    nNameLen = FAST_INI_ITEM_NAME_LEN;</div><div class=\"line\">                &#125;</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">                memcpy(pFuncName, pLine + <span class=\"number\">11</span>, nNameLen);</div><div class=\"line\">                pFuncName[nNameLen] = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">                trim(pFuncName);</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">                <span class=\"keyword\">if</span> ((<span class=\"keyword\">int</span>)strlen(pFuncName) &gt; <span class=\"number\">0</span>)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    isAnnotation = <span class=\"number\">1</span>;</div><div class=\"line\">                    pAnnoItemLine = pLastEnd + <span class=\"number\">1</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">else</span></div><div class=\"line\">                &#123;</div><div class=\"line\">                    logWarning(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">                            <span class=\"string\">\"the function name of annotation line is empty\"</span>, \\</div><div class=\"line\">                            <span class=\"keyword\">__LINE__</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">            &#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t\t</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">\t\ttrim(pLine);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (*pLine == <span class=\"string\">'#'</span> || *pLine == <span class=\"string\">'\\0'</span>) </div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tnLineLen = strlen(pLine);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (*pLine == <span class=\"string\">'['</span> &amp;&amp; *(pLine + (nLineLen - <span class=\"number\">1</span>)) == <span class=\"string\">']'</span>) <span class=\"comment\">//section</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">char</span> *section_name;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> section_len;</div><div class=\"line\"></div><div class=\"line\">\t\t\t*(pLine + (nLineLen - <span class=\"number\">1</span>)) = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">\t\t\tsection_name = pLine + <span class=\"number\">1</span>; <span class=\"comment\">//skip [</span></div><div class=\"line\"></div><div class=\"line\">\t\t\ttrim(section_name);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (*section_name == <span class=\"string\">'\\0'</span>) <span class=\"comment\">//global section</span></div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tpContext-&gt;current_section = &amp;pContext-&gt;global;</div><div class=\"line\">\t\t\t\tpSection = pContext-&gt;current_section;</div><div class=\"line\">                pItem = pSection-&gt;items + pSection-&gt;count;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\tsection_len = strlen(section_name);</div><div class=\"line\">\t\t\tpSection = (IniSection *)hash_find(&amp;pContext-&gt;sections,\\</div><div class=\"line\">\t\t\t\t\tsection_name, section_len);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (pSection == <span class=\"keyword\">NULL</span>)  <span class=\"comment\">// not find</span></div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tpSection = (IniSection *)malloc(sizeof(IniSection));</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (pSection == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\tresult = errno != <span class=\"number\">0</span> ? errno : ENOMEM;</div><div class=\"line\">\t\t\t\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span>\\</div><div class=\"line\">\t\t\t\t\t\t<span class=\"string\">\"malloc %d bytes fail, \"</span> \\</div><div class=\"line\">\t\t\t\t\t\t<span class=\"string\">\"errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">__LINE__</span>, \\</div><div class=\"line\">\t\t\t\t\t\t(<span class=\"keyword\">int</span>)sizeof(IniSection), \\</div><div class=\"line\">\t\t\t\t\t\tresult, STRERROR(result));</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\tmemset(pSection, <span class=\"number\">0</span>, sizeof(IniSection));</div><div class=\"line\">\t\t\t\tresult = hash_insert(&amp;pContext-&gt;sections, \\</div><div class=\"line\">\t\t\t\t\t  section_name, section_len, pSection);</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (result &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\tresult *= <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t\t\t\tlogError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span>\\</div><div class=\"line\">\t\t\t\t\t\t<span class=\"string\">\"insert into hash table fail, \"</span>\\</div><div class=\"line\">\t\t\t\t\t\t<span class=\"string\">\"errno: %d, error info: %s\"</span>, \\</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">__LINE__</span>, result, \\</div><div class=\"line\">\t\t\t\t\t\tSTRERROR(result));</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\tresult = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\tpContext-&gt;current_section = pSection; </div><div class=\"line\">                        pItem = pSection-&gt;items + pSection-&gt;count;</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tpEqualChar = strchr(pLine, <span class=\"string\">'='</span>);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (pEqualChar == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tnNameLen = pEqualChar - pLine;</div><div class=\"line\">\t\tnValueLen = strlen(pLine) - (nNameLen + <span class=\"number\">1</span>); <span class=\"comment\">// means we can not have ' ' or '\\t' before '=' and after '='</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (nNameLen &gt; FAST_INI_ITEM_NAME_LEN)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tnNameLen = FAST_INI_ITEM_NAME_LEN;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (nValueLen &gt; FAST_INI_ITEM_VALUE_LEN)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tnValueLen = FAST_INI_ITEM_VALUE_LEN;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (pSection-&gt;count &gt;= pSection-&gt;alloc_count)</div><div class=\"line\">        &#123;</div><div class=\"line\">            result = remallocSection(pSection, &amp;pItem);</div><div class=\"line\">\t\t\t</div><div class=\"line\">            <span class=\"keyword\">if</span> (result)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tmemcpy(pItem-&gt;name, pLine, nNameLen);</div><div class=\"line\">\t\tmemcpy(pItem-&gt;value, pEqualChar + <span class=\"number\">1</span>, nValueLen); <span class=\"comment\">// means we can not have ' ' or '\\t' before '=' and after '='</span></div><div class=\"line\"></div><div class=\"line\">\t\ttrim(pItem-&gt;name);  <span class=\"comment\">// it allow has space before or after '='</span></div><div class=\"line\">\t\ttrim(pItem-&gt;value);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (isAnnotation) <span class=\"comment\">// access the global variable: g_annotataionMap and make some process</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            isAnnotation = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (g_annotataionMap == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">            &#123;</div><div class=\"line\">                logWarning(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">                    <span class=\"string\">\"not set annotataionMap and (%s) will use \"</span> \\</div><div class=\"line\">                    <span class=\"string\">\"the item value (%s)\"</span>, <span class=\"keyword\">__LINE__</span>, pItem-&gt;name,</div><div class=\"line\">                    pItem-&gt;value);</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">                pSection-&gt;count++;</div><div class=\"line\">                pItem++;</div><div class=\"line\">                <span class=\"keyword\">continue</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            nItemCnt = <span class=\"number\">-1</span>;</div><div class=\"line\">            pAnnoMap = g_annotataionMap;</div><div class=\"line\">\t\t\t</div><div class=\"line\">            <span class=\"keyword\">while</span> (pAnnoMap-&gt;func_name)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (strcmp(pFuncName, pAnnoMap-&gt;func_name) == <span class=\"number\">0</span>)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (pAnnoMap-&gt;func_init)</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        pAnnoMap-&gt;func_init();</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (pAnnoMap-&gt;func_get)</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        nItemCnt = pAnnoMap-&gt;func_get(pItem-&gt;value, pItemValues, <span class=\"number\">100</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\">\t\t\t\t\t</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">                pAnnoMap++;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (nItemCnt == <span class=\"number\">-1</span>)</div><div class=\"line\">            &#123;</div><div class=\"line\">                logWarning(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">                    <span class=\"string\">\"not found corresponding annotation function: %s, \"</span> \\</div><div class=\"line\">                    <span class=\"string\">\"\\\"%s\\\" will use the item value \\\"%s\\\"\"</span>, <span class=\"keyword\">__LINE__</span>,</div><div class=\"line\">                    pFuncName, pItem-&gt;name, pItem-&gt;value);</div><div class=\"line\">                pSection-&gt;count++;</div><div class=\"line\">                pItem++;</div><div class=\"line\">                <span class=\"keyword\">continue</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nItemCnt == <span class=\"number\">0</span>)</div><div class=\"line\">            &#123;</div><div class=\"line\">                logWarning(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">                    <span class=\"string\">\"annotation function %s execute fail, \"</span> \\</div><div class=\"line\">                    <span class=\"string\">\"\\\"%s\\\" will use the item value \\\"%s\\\"\"</span>, <span class=\"keyword\">__LINE__</span>,</div><div class=\"line\">                    pFuncName, pItem-&gt;name, pItem-&gt;value);</div><div class=\"line\">                pSection-&gt;count++;</div><div class=\"line\">                pItem++;</div><div class=\"line\">                <span class=\"keyword\">continue</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            pItemName = pItem-&gt;name;</div><div class=\"line\">            nNameLen = strlen(pItemName);</div><div class=\"line\">\t\t\t</div><div class=\"line\">            <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; nItemCnt; i++)</div><div class=\"line\">            &#123;</div><div class=\"line\">                nValueLen = strlen(pItemValues[i]);</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">                <span class=\"keyword\">if</span> (nValueLen &gt; FAST_INI_ITEM_VALUE_LEN)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    nValueLen = FAST_INI_ITEM_VALUE_LEN;</div><div class=\"line\">                &#125;</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">                memcpy(pItem-&gt;name, pItemName, nNameLen);</div><div class=\"line\">                memcpy(pItem-&gt;value, pItemValues[i], nValueLen);</div><div class=\"line\">                pItem-&gt;value[nValueLen] = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">                pSection-&gt;count++;</div><div class=\"line\">                pItem++;</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">                <span class=\"keyword\">if</span> (pSection-&gt;count &gt;= pSection-&gt;alloc_count)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    result = remallocSection(pSection, &amp;pItem);</div><div class=\"line\">\t\t\t\t\t</div><div class=\"line\">                    <span class=\"keyword\">if</span> (result)</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        <span class=\"keyword\">break</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">\t\tpSection-&gt;count++;</div><div class=\"line\">\t\tpItem++;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// result is 0 means has not error occured</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (result == <span class=\"number\">0</span> &amp;&amp; isAnnotation)</div><div class=\"line\">    &#123;</div><div class=\"line\">        logWarning(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">            <span class=\"string\">\"the @function annotation line \"</span> \\</div><div class=\"line\">            <span class=\"string\">\"must follow by key=value line!\"</span>, <span class=\"keyword\">__LINE__</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> result; </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// get the rid of white space from the left and right of pStr</span></div><div class=\"line\"><span class=\"keyword\">char</span> *trim(<span class=\"keyword\">char</span> *pStr)</div><div class=\"line\">&#123;</div><div class=\"line\">\ttrim_right(pStr);</div><div class=\"line\">\ttrim_left(pStr);</div><div class=\"line\">\t<span class=\"keyword\">return</span> pStr;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//get rid of the white space from the left of pStr</span></div><div class=\"line\"><span class=\"keyword\">char</span> *trim_left(<span class=\"keyword\">char</span> *pStr)</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">char</span> *p;</div><div class=\"line\">\t<span class=\"keyword\">char</span> *pEnd;</div><div class=\"line\">\t<span class=\"keyword\">int</span> nDestLen;</div><div class=\"line\"></div><div class=\"line\">\tpEnd = pStr + strlen(pStr);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">for</span> (p=pStr; p&lt;pEnd; p++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!(<span class=\"string\">' '</span> == *p|| <span class=\"string\">'\\n'</span> == *p || <span class=\"string\">'\\r'</span> == *p || <span class=\"string\">'\\t'</span> == *p))</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> ( p == pStr)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> pStr;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tnDestLen = (pEnd - p) + <span class=\"number\">1</span>; <span class=\"comment\">//including \\0</span></div><div class=\"line\">\tmemmove(pStr, p, nDestLen);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> pStr;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// get rid of the white space from the right of pStr</span></div><div class=\"line\"><span class=\"keyword\">char</span> *trim_right(<span class=\"keyword\">char</span> *pStr)</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> len;</div><div class=\"line\">\t<span class=\"keyword\">char</span> *p;</div><div class=\"line\">\t<span class=\"keyword\">char</span> *pEnd;</div><div class=\"line\"></div><div class=\"line\">\tlen = strlen(pStr);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (len == <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> pStr;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpEnd = pStr + len - <span class=\"number\">1</span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">for</span> (p = pEnd;  p&gt;=pStr; p--)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!(<span class=\"string\">' '</span> == *p || <span class=\"string\">'\\n'</span> == *p || <span class=\"string\">'\\r'</span> == *p || <span class=\"string\">'\\t'</span> == *p))</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (p != pEnd)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t*(p+<span class=\"number\">1</span>) = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> pStr;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">bool</span> fileExists(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *filename)</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> access(filename, <span class=\"number\">0</span>) == <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// allocate enough space for section</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> remallocSection(IniSection *pSection, IniItem **pItem)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> bytes, result;</div><div class=\"line\">    IniItem *pNew;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (pSection-&gt;alloc_count == <span class=\"number\">0</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        pSection-&gt;alloc_count = _INIT_ALLOC_ITEM_COUNT;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        pSection-&gt;alloc_count *= <span class=\"number\">2</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    bytes = sizeof(IniItem) * pSection-&gt;alloc_count;</div><div class=\"line\">    pNew = (IniItem *)malloc(bytes);</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (pNew == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        logError(<span class=\"string\">\"file: \"</span><span class=\"keyword\">__FILE__</span><span class=\"string\">\", line: %d, \"</span> \\</div><div class=\"line\">            <span class=\"string\">\"malloc %d bytes fail\"</span>, <span class=\"keyword\">__LINE__</span>, bytes);</div><div class=\"line\">        result = errno != <span class=\"number\">0</span> ? errno : ENOMEM;</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (pSection-&gt;count &gt; <span class=\"number\">0</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        memcpy(pNew, pSection-&gt;items,</div><div class=\"line\">                sizeof(IniItem) * pSection-&gt;count);</div><div class=\"line\">        free(pSection-&gt;items);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    pSection-&gt;items = pNew;</div><div class=\"line\">    *pItem = pSection-&gt;items + pSection-&gt;count;</div><div class=\"line\">\t</div><div class=\"line\">    memset(*pItem, <span class=\"number\">0</span>, sizeof(IniItem) * \\</div><div class=\"line\">        (pSection-&gt;alloc_count - pSection-&gt;count));</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">void *hash_find(HashArray *pHash, <span class=\"keyword\">const</span> void *key, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> key_len)</div><div class=\"line\">&#123;</div><div class=\"line\">\tunsigned <span class=\"keyword\">int</span> hash_code;</div><div class=\"line\">\tHashData **ppBucket;</div><div class=\"line\">\tHashData *hash_data;</div><div class=\"line\"></div><div class=\"line\">\thash_code = pHash-&gt;hash_func(key, key_len);</div><div class=\"line\">\tppBucket = pHash-&gt;buckets + (hash_code % (*pHash-&gt;capacity));</div><div class=\"line\"></div><div class=\"line\">\tHASH_LOCK(pHash, ppBucket - pHash-&gt;buckets)</div><div class=\"line\">\thash_data = _chain_find_entry(ppBucket, key, key_len, hash_code);</div><div class=\"line\">\tHASH_UNLOCK(pHash, ppBucket - pHash-&gt;buckets)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (hash_data != <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> hash_data-&gt;value;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">NULL</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#define HASH_LOCK(pHash, index) \\</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> (pHash-&gt;lock_count &gt; <span class=\"number\">0</span>) \\</div><div class=\"line\">\t&#123; \\</div><div class=\"line\">\t\tpthread_mutex_lock(pHash-&gt;locks + (index) % pHash-&gt;lock_count); \\</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#define HASH_UNLOCK(pHash, index) \\</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> (pHash-&gt;lock_count &gt; <span class=\"number\">0</span>) \\</div><div class=\"line\">\t&#123; \\</div><div class=\"line\">\t\tpthread_mutex_unlock(pHash-&gt;locks + (index) % pHash-&gt;lock_count); \\</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">static</span> HashData *_chain_find_entry(HashData **ppBucket, <span class=\"keyword\">const</span> void *key, \\</div><div class=\"line\">\t\t<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> key_len, <span class=\"keyword\">const</span> unsigned <span class=\"keyword\">int</span> hash_code)</div><div class=\"line\">&#123;</div><div class=\"line\">\tHashData *hash_data;</div><div class=\"line\"></div><div class=\"line\">\thash_data = *ppBucket;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">while</span> (hash_data != <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (key_len == hash_data-&gt;key_len &amp;&amp; \\</div><div class=\"line\">\t\t\tmemcmp(key, hash_data-&gt;key, key_len) == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> hash_data;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\thash_data = hash_data-&gt;next;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">NULL</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#define hash_insert(pHash, key, key_len, value) \\</span></div><div class=\"line\">\thash_insert_ex(pHash, key, key_len, value, <span class=\"number\">0</span>, <span class=\"keyword\">true</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> hash_insert_ex(HashArray *pHash, <span class=\"keyword\">const</span> void *key, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> key_len, \\</div><div class=\"line\">\t\tvoid *value, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> value_len, <span class=\"keyword\">const</span> <span class=\"keyword\">bool</span> needLock)</div><div class=\"line\">&#123;</div><div class=\"line\">\tunsigned <span class=\"keyword\">int</span> hash_code;</div><div class=\"line\">\tHashData **ppBucket;</div><div class=\"line\">\tHashData *hash_data;</div><div class=\"line\">\tHashData *previous;</div><div class=\"line\">\t<span class=\"keyword\">char</span> *pBuff;</div><div class=\"line\">\t<span class=\"keyword\">int</span> bytes;</div><div class=\"line\">\t<span class=\"keyword\">int</span> malloc_value_size;</div><div class=\"line\"></div><div class=\"line\">\thash_code = pHash-&gt;hash_func(key, key_len);</div><div class=\"line\">\tppBucket = pHash-&gt;buckets + (hash_code % (*pHash-&gt;capacity));</div><div class=\"line\"></div><div class=\"line\">\tprevious = <span class=\"keyword\">NULL</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (needLock)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tHASH_LOCK(pHash, ppBucket - pHash-&gt;buckets)</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\thash_data = *ppBucket;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">while</span> (hash_data != <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (key_len == hash_data-&gt;key_len &amp;&amp; \\</div><div class=\"line\">\t\t\tmemcmp(key, hash_data-&gt;key, key_len) == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tprevious = hash_data;</div><div class=\"line\">\t\thash_data = hash_data-&gt;next;</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (hash_data != <span class=\"keyword\">NULL</span>) <span class=\"comment\">//exists</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!pHash-&gt;is_malloc_value)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\thash_data-&gt;value_len = value_len;</div><div class=\"line\">\t\t\thash_data-&gt;value = (<span class=\"keyword\">char</span> *)value;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (needLock)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tHASH_UNLOCK(pHash, ppBucket - pHash-&gt;buckets)</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (hash_data-&gt;malloc_value_size &gt;= value_len &amp;&amp; \\</div><div class=\"line\">\t\t\t\t(hash_data-&gt;malloc_value_size &lt;= <span class=\"number\">128</span> ||</div><div class=\"line\">\t\t\t\t hash_data-&gt;malloc_value_size / <span class=\"number\">2</span> &lt; value_len))</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\thash_data-&gt;value_len = value_len;</div><div class=\"line\">\t\t\t\tmemcpy(hash_data-&gt;value, value, value_len);</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (needLock)</div><div class=\"line\">\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\tHASH_UNLOCK(pHash, ppBucket - pHash-&gt;buckets)</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\tDELETE_FROM_BUCKET(pHash, ppBucket, previous, hash_data)</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (needLock)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tHASH_UNLOCK(pHash, ppBucket - pHash-&gt;buckets)</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (!pHash-&gt;is_malloc_value)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tmalloc_value_size = <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tmalloc_value_size = MEM_ALIGN(value_len);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tbytes = CALC_NODE_MALLOC_BYTES(key_len, malloc_value_size);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (pHash-&gt;max_bytes &gt; <span class=\"number\">0</span> &amp;&amp; pHash-&gt;bytes_used+bytes &gt; pHash-&gt;max_bytes)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> -ENOSPC;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpBuff = (<span class=\"keyword\">char</span> *)malloc(bytes);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (pBuff == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> -ENOMEM;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpHash-&gt;bytes_used += bytes;</div><div class=\"line\"></div><div class=\"line\">\thash_data = (HashData *)pBuff;</div><div class=\"line\">\thash_data-&gt;malloc_value_size = malloc_value_size;</div><div class=\"line\"></div><div class=\"line\">\thash_data-&gt;key_len = key_len;</div><div class=\"line\">\tmemcpy(hash_data-&gt;key, key, key_len);</div><div class=\"line\"><span class=\"comment\">#ifdef HASH_STORE_HASH_CODE</span></div><div class=\"line\">\thash_data-&gt;hash_code = hash_code;  <span class=\"comment\">// save the hash code for next use, it need not calculate again when next use</span></div><div class=\"line\"><span class=\"comment\">#endif</span></div><div class=\"line\">\thash_data-&gt;value_len = value_len;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (!pHash-&gt;is_malloc_value) <span class=\"comment\">// means the buffer of value is allocated in outer space, rather than beening allocated in the end of the key buffer</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\thash_data-&gt;value = (<span class=\"keyword\">char</span> *)value;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\thash_data-&gt;value = hash_data-&gt;key + hash_data-&gt;key_len;</div><div class=\"line\">\t\tmemcpy(hash_data-&gt;value, value, value_len);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (needLock)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tHASH_LOCK(pHash, ppBucket - pHash-&gt;buckets)</div><div class=\"line\">\t\tADD_TO_BUCKET(pHash, ppBucket, hash_data)</div><div class=\"line\">\t\tHASH_UNLOCK(pHash, ppBucket - pHash-&gt;buckets)</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tADD_TO_BUCKET(pHash, ppBucket, hash_data)</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (pHash-&gt;load_factor &gt;= <span class=\"number\">0.10</span> &amp;&amp; (<span class=\"keyword\">double</span>)pHash-&gt;item_count /</div><div class=\"line\">\t\t(<span class=\"keyword\">double</span>)*pHash-&gt;capacity &gt;= pHash-&gt;load_factor)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t_rehash(pHash);  <span class=\"comment\">// rehash </span></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// delete a hash_data from pHash</span></div><div class=\"line\"><span class=\"comment\">#define DELETE_FROM_BUCKET(pHash, ppBucket, previous, hash_data) \\</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> (previous == <span class=\"keyword\">NULL</span>) \\</div><div class=\"line\">\t&#123; \\</div><div class=\"line\">\t\t*ppBucket = hash_data-&gt;next; \\</div><div class=\"line\">\t&#125; \\</div><div class=\"line\">\t<span class=\"keyword\">else</span> \\</div><div class=\"line\">\t&#123; \\</div><div class=\"line\">\t\tprevious-&gt;next = hash_data-&gt;next; \\</div><div class=\"line\">\t&#125; \\</div><div class=\"line\">\tpHash-&gt;item_count--; \\</div><div class=\"line\">\tpHash-&gt;bytes_used -= CALC_NODE_MALLOC_BYTES(hash_data-&gt;key_len, \\</div><div class=\"line\">\t\t\t\thash_data-&gt;malloc_value_size); \\</div><div class=\"line\">\tfree(hash_data);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#define MEM_ALIGN(x)  (((x) + 7) &amp; (~7))</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#define CALC_NODE_MALLOC_BYTES(key_len, value_size) \\</span></div><div class=\"line\">\t\tsizeof(HashData) + key_len + value_size</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#define ADD_TO_BUCKET(pHash, ppBucket, hash_data) \\</span></div><div class=\"line\">\thash_data-&gt;next = *ppBucket; \\</div><div class=\"line\">\t*ppBucket = hash_data; \\</div><div class=\"line\">\tpHash-&gt;item_count++;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> _rehash(HashArray *pHash)</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> result;</div><div class=\"line\">\tunsigned <span class=\"keyword\">int</span> *pOldCapacity;</div><div class=\"line\"></div><div class=\"line\">\tpOldCapacity = pHash-&gt;capacity;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (pHash-&gt;is_malloc_capacity)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tunsigned <span class=\"keyword\">int</span> *pprime;</div><div class=\"line\">\t\tunsigned <span class=\"keyword\">int</span> *prime_end;</div><div class=\"line\"></div><div class=\"line\">\t\tpHash-&gt;capacity = <span class=\"keyword\">NULL</span>;</div><div class=\"line\"></div><div class=\"line\">\t\tprime_end = prime_array + PRIME_ARRAY_SIZE;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (pprime = prime_array; pprime!=prime_end; pprime++)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (*pprime &gt; *pOldCapacity)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tpHash-&gt;capacity = pprime;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tpHash-&gt;capacity++;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=_rehash1(pHash, *pOldCapacity, pHash-&gt;capacity)) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tpHash-&gt;capacity = pOldCapacity;  <span class=\"comment\">//rollback</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (pHash-&gt;is_malloc_capacity)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tfree(pOldCapacity);</div><div class=\"line\">\t\t\tpHash-&gt;is_malloc_capacity = <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/*printf(\"rehash, old_capacity=%d, new_capacity=%d\\n\", \\</div><div class=\"line\">\t\told_capacity, *pHash-&gt;capacity);</div><div class=\"line\">\t*/</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// rehash by new size: *new_capacity</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> _rehash1(HashArray *pHash, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> old_capacity, \\</div><div class=\"line\">\t\tunsigned <span class=\"keyword\">int</span> *new_capacity)</div><div class=\"line\">&#123;</div><div class=\"line\">\tHashData **old_buckets;</div><div class=\"line\">\tHashData **ppBucket;</div><div class=\"line\">\tHashData **bucket_end;</div><div class=\"line\">\tHashData *hash_data;</div><div class=\"line\">\tHashData *pNext;</div><div class=\"line\">\t<span class=\"keyword\">int</span> result;</div><div class=\"line\"></div><div class=\"line\">\told_buckets = pHash-&gt;buckets;</div><div class=\"line\">\tpHash-&gt;capacity = new_capacity;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> ((result=_hash_alloc_buckets(pHash, old_capacity)) != <span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tpHash-&gt;buckets = old_buckets;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//printf(\"old: %d, new: %d\\n\", old_capacity, *pHash-&gt;capacity);</span></div><div class=\"line\"></div><div class=\"line\">\tpHash-&gt;item_count = <span class=\"number\">0</span>;</div><div class=\"line\">\tbucket_end = old_buckets + old_capacity;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">for</span> (ppBucket=old_buckets; ppBucket&lt;bucket_end; ppBucket++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (*ppBucket == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\thash_data = *ppBucket;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (hash_data != <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tpNext = hash_data-&gt;next;</div><div class=\"line\"></div><div class=\"line\">\t\t\tADD_TO_BUCKET(pHash, (pHash-&gt;buckets + \\</div><div class=\"line\">\t\t\t\t(HASH_CODE(pHash, hash_data) % \\</div><div class=\"line\">\t\t\t\t(*pHash-&gt;capacity))), hash_data)</div><div class=\"line\"></div><div class=\"line\">\t\t\thash_data = pNext;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tfree(old_buckets);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">char</span> *iniGetStrValue(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *szSectionName, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *szItemName, \\</div><div class=\"line\">\t\tIniContext *pContext)</div><div class=\"line\">&#123;</div><div class=\"line\">\tIniItem targetItem;</div><div class=\"line\">\tIniSection *pSection;</div><div class=\"line\">\tIniItem *pItem;</div><div class=\"line\"></div><div class=\"line\">\tINI_FIND_ITEM(szSectionName, szItemName, pContext, pSection, \\</div><div class=\"line\">\t\t\ttargetItem, pItem, <span class=\"keyword\">NULL</span>)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (pItem == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">NULL</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> pItem-&gt;value;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#define INI_FIND_ITEM(szSectionName, szItemName, pContext, pSection, \\</span></div><div class=\"line\">\t\t\ttargetItem, pItem, return_val) \\</div><div class=\"line\">\t<span class=\"keyword\">if</span> (szSectionName == <span class=\"keyword\">NULL</span> || *szSectionName == <span class=\"string\">'\\0'</span>) \\</div><div class=\"line\">\t&#123; \\</div><div class=\"line\">\t\tpSection = &amp;pContext-&gt;global; \\</div><div class=\"line\">\t&#125; \\</div><div class=\"line\">\t<span class=\"keyword\">else</span> \\</div><div class=\"line\">\t&#123; \\</div><div class=\"line\">\t\tpSection = (IniSection *)hash_find(&amp;pContext-&gt;sections, \\</div><div class=\"line\">\t\t\t\tszSectionName, strlen(szSectionName)); \\</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (pSection == <span class=\"keyword\">NULL</span>) \\</div><div class=\"line\">\t\t&#123; \\</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> return_val; \\</div><div class=\"line\">\t\t&#125; \\</div><div class=\"line\">\t&#125; \\</div><div class=\"line\">\t\\</div><div class=\"line\">\t<span class=\"keyword\">if</span> (pSection-&gt;count &lt;= <span class=\"number\">0</span>) \\</div><div class=\"line\">\t&#123; \\</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> return_val; \\</div><div class=\"line\">\t&#125; \\</div><div class=\"line\">\t\\</div><div class=\"line\">\tsnprintf(targetItem.name, sizeof(targetItem.name), <span class=\"string\">\"%s\"</span>, szItemName); \\</div><div class=\"line\">\tpItem = (IniItem *)bsearch(&amp;targetItem, pSection-&gt;items, \\</div><div class=\"line\">\t\t\tpSection-&gt;count, sizeof(IniItem), iniCompareByItemName); <span class=\"comment\">// 二分查找</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">static</span> void iniSortItems(IniContext *pContext)</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (pContext-&gt;global.count &gt; <span class=\"number\">1</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tqsort(pContext-&gt;global.items, pContext-&gt;global.count, \\</div><div class=\"line\">\t\t\tsizeof(IniItem), iniCompareByItemName);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\thash_walk(&amp;pContext-&gt;sections, iniSortHashData, <span class=\"keyword\">NULL</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> iniCompareByItemName(<span class=\"keyword\">const</span> void *p1, <span class=\"keyword\">const</span> void *p2)</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> strcmp(((IniItem *)p1)-&gt;name, ((IniItem *)p2)-&gt;name);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> hash_walk(HashArray *pHash, HashWalkFunc walkFunc, void *args)</div><div class=\"line\">&#123;</div><div class=\"line\">\tHashData **ppBucket;</div><div class=\"line\">\tHashData **bucket_end;</div><div class=\"line\">\tHashData *hash_data;</div><div class=\"line\">\t<span class=\"keyword\">int</span> index;</div><div class=\"line\">\t<span class=\"keyword\">int</span> result;</div><div class=\"line\"></div><div class=\"line\">\tindex = <span class=\"number\">0</span>;</div><div class=\"line\">\tbucket_end = pHash-&gt;buckets + (*pHash-&gt;capacity);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">for</span> (ppBucket=pHash-&gt;buckets; ppBucket&lt;bucket_end; ppBucket++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\thash_data = *ppBucket;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (hash_data != <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tresult = walkFunc(index, hash_data, args);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (result != <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\tindex++;</div><div class=\"line\">\t\t\thash_data = hash_data-&gt;next;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">void iniFreeContext(IniContext *pContext)</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (pContext == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (pContext-&gt;global.items != <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tfree(pContext-&gt;global.items);</div><div class=\"line\">\t\tmemset(&amp;pContext-&gt;global, <span class=\"number\">0</span>, sizeof(IniSection));</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\thash_walk(&amp;pContext-&gt;sections, iniFreeHashData, <span class=\"keyword\">NULL</span>);</div><div class=\"line\">\thash_destroy(&amp;pContext-&gt;sections);</div><div class=\"line\"></div><div class=\"line\">    iniFreeDynamicContent(pContext);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">void hash_destroy(HashArray *pHash)</div><div class=\"line\">&#123;</div><div class=\"line\">\tHashData **ppBucket;</div><div class=\"line\">\tHashData **bucket_end;</div><div class=\"line\">\tHashData *pNode;</div><div class=\"line\">\tHashData *pDelete;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (pHash == <span class=\"keyword\">NULL</span> || pHash-&gt;buckets == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tbucket_end = pHash-&gt;buckets + (*pHash-&gt;capacity);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">for</span> (ppBucket=pHash-&gt;buckets; ppBucket&lt;bucket_end; ppBucket++)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tpNode = *ppBucket;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (pNode != <span class=\"keyword\">NULL</span>)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tpDelete = pNode;</div><div class=\"line\">\t\t\tpNode = pNode-&gt;next;</div><div class=\"line\">\t\t\tfree(pDelete);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tfree(pHash-&gt;buckets);</div><div class=\"line\">\tpHash-&gt;buckets = <span class=\"keyword\">NULL</span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (pHash-&gt;is_malloc_capacity)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tfree(pHash-&gt;capacity);</div><div class=\"line\">\t\tpHash-&gt;capacity = <span class=\"keyword\">NULL</span>;</div><div class=\"line\">\t\tpHash-&gt;is_malloc_capacity = <span class=\"keyword\">false</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpHash-&gt;item_count = <span class=\"number\">0</span>;</div><div class=\"line\">\tpHash-&gt;bytes_used = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">static</span> void iniFreeDynamicContent(IniContext *pContext)</div><div class=\"line\">&#123;</div><div class=\"line\">    CDCPair *pCDCPair;</div><div class=\"line\">    DynamicContents *pDynamicContents;</div><div class=\"line\">    <span class=\"keyword\">int</span> i;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (g_dynamic_content_count == <span class=\"number\">0</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (g_dynamic_contents[g_dynamic_content_index].context == pContext)</div><div class=\"line\">    &#123;</div><div class=\"line\">        pCDCPair = g_dynamic_contents + g_dynamic_content_index;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        pCDCPair = <span class=\"keyword\">NULL</span>;</div><div class=\"line\">\t\t</div><div class=\"line\">        <span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>; i&lt;_MAX_DYNAMIC_CONTENTS; i++)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (g_dynamic_contents[i].context == pContext)</div><div class=\"line\">            &#123;</div><div class=\"line\">                pCDCPair = g_dynamic_contents + i;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">\t\t</div><div class=\"line\">        <span class=\"keyword\">if</span> (pCDCPair == <span class=\"keyword\">NULL</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    pCDCPair-&gt;used = <span class=\"keyword\">false</span>;</div><div class=\"line\">    pCDCPair-&gt;context = <span class=\"keyword\">NULL</span>;</div><div class=\"line\">    pDynamicContents = &amp;pCDCPair-&gt;dynamicContents;</div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (pDynamicContents-&gt;contents != <span class=\"keyword\">NULL</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>; i&lt;pDynamicContents-&gt;count; i++)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (pDynamicContents-&gt;contents[i] != <span class=\"keyword\">NULL</span>)</div><div class=\"line\">            &#123;</div><div class=\"line\">                free(pDynamicContents-&gt;contents[i]);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">\t\t</div><div class=\"line\">        free(pDynamicContents-&gt;contents);</div><div class=\"line\">        pDynamicContents-&gt;contents = <span class=\"keyword\">NULL</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">    pDynamicContents-&gt;alloc_count = <span class=\"number\">0</span>;</div><div class=\"line\">    pDynamicContents-&gt;count = <span class=\"number\">0</span>;</div><div class=\"line\">    g_dynamic_content_count--;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"ciwg2v9js000a6al8tu4ydtv1","category_id":"ciwg2v9k5000e6al8brj89yv6","_id":"ciwg2v9kg000k6al8a0xud4v6"},{"post_id":"ciwg2v9lh00146al8ew8d43ym","category_id":"ciwg2v9lm00156al8j4ttvci3","_id":"ciwg2v9lo00176al8eor3t9l8"}],"PostTag":[{"post_id":"ciwg2v9i700006al80ft2yd0u","tag_id":"ciwg2v9it00036al8ld4q3h5g","_id":"ciwg2v9ji00086al8bm2r9cr5"},{"post_id":"ciwg2v9il00026al8nubr1h39","tag_id":"ciwg2v9it00036al8ld4q3h5g","_id":"ciwg2v9jx000c6al8n9ov5a06"},{"post_id":"ciwg2v9iz00046al83hurv4i5","tag_id":"ciwg2v9it00036al8ld4q3h5g","_id":"ciwg2v9kf000j6al814jdt84p"},{"post_id":"ciwg2v9iz00046al83hurv4i5","tag_id":"ciwg2v9ka000g6al8x8h5cm8n","_id":"ciwg2v9kg000l6al8dhd39rxj"},{"post_id":"ciwg2v9j400056al8dertda0s","tag_id":"ciwg2v9it00036al8ld4q3h5g","_id":"ciwg2v9kh000n6al8ol2e32jp"},{"post_id":"ciwg2v9j400056al8dertda0s","tag_id":"ciwg2v9kf000i6al8s7riczd8","_id":"ciwg2v9ki000o6al833mu1wu0"},{"post_id":"ciwg2v9jb00066al87ei4kb96","tag_id":"ciwg2v9it00036al8ld4q3h5g","_id":"ciwg2v9kj000q6al8f73r8b8x"},{"post_id":"ciwg2v9jb00066al87ei4kb96","tag_id":"ciwg2v9kh000m6al82ejvzcwr","_id":"ciwg2v9kk000r6al865jz6r9m"},{"post_id":"ciwg2v9jj00096al8rhero8wg","tag_id":"ciwg2v9it00036al8ld4q3h5g","_id":"ciwg2v9km000t6al8c3pto2pa"},{"post_id":"ciwg2v9jj00096al8rhero8wg","tag_id":"ciwg2v9ki000p6al8fdqtjboj","_id":"ciwg2v9kp000u6al8llkagveo"},{"post_id":"ciwg2v9js000a6al8tu4ydtv1","tag_id":"ciwg2v9kk000s6al88y3v523g","_id":"ciwg2v9kt000x6al8qb2z00jb"},{"post_id":"ciwg2v9js000a6al8tu4ydtv1","tag_id":"ciwg2v9kq000v6al8co6d88pz","_id":"ciwg2v9kx000y6al8mnfj4qx3"},{"post_id":"ciwg2v9jz000d6al8hpolfh0u","tag_id":"ciwg2v9ks000w6al8xq3cj6bd","_id":"ciwg2v9ky00106al8372yy9ni"},{"post_id":"ciwg2v9k7000f6al8map9174l","tag_id":"ciwg2v9kx000z6al800iq6tci","_id":"ciwg2v9l100126al850pfwv9h"},{"post_id":"ciwg2v9kb000h6al8e4uc3sjx","tag_id":"ciwg2v9kz00116al8l0kjnci7","_id":"ciwg2v9l400136al8lohi93xt"},{"post_id":"ciwg2v9lh00146al8ew8d43ym","tag_id":"ciwg2v9it00036al8ld4q3h5g","_id":"ciwg2v9lm00166al8wwil4vwx"}],"Tag":[{"name":"fastdfs","_id":"ciwg2v9it00036al8ld4q3h5g"},{"name":"epoll","_id":"ciwg2v9ka000g6al8x8h5cm8n"},{"name":"超时事件","_id":"ciwg2v9kf000i6al8s7riczd8"},{"name":"分布式文件系统","_id":"ciwg2v9kh000m6al82ejvzcwr"},{"name":"连接池","_id":"ciwg2v9ki000p6al8fdqtjboj"},{"name":"hexo","_id":"ciwg2v9kk000s6al88y3v523g"},{"name":"github","_id":"ciwg2v9kq000v6al8co6d88pz"},{"name":"test","_id":"ciwg2v9ks000w6al8xq3cj6bd"},{"name":"multi pthread","_id":"ciwg2v9kx000z6al800iq6tci"},{"name":"搭建github博客","_id":"ciwg2v9kz00116al8l0kjnci7"}]}}